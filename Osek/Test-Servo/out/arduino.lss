
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e4  00800100  00002e02  00002e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e02  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000194  008002e4  008002e4  0000307a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000308c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000688  00000000  00000000  000030d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000143a4  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003456  00000000  00000000  00017afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000456b  00000000  00000000  0001af52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e5c  00000000  00000000  0001f4c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004040  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000060c9  00000000  00000000  0002435c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000768  00000000  00000000  0002a425  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      24:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_9>
      28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      2c:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__vector_11>
      30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      40:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__vector_16>
      44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      48:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__vector_18>
      4c:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_19>
      50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      54:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      58:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      5c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      60:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      64:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <setup+0x96>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	00 00       	nop
      ec:	00 08       	sbc	r0, r0
      ee:	00 02       	muls	r16, r16
      f0:	01 00       	.word	0x0001	; ????
      f2:	00 03       	mulsu	r16, r16
      f4:	04 07       	cpc	r16, r20
	...

000000fe <digital_pin_to_bit_mask_PGM>:
      fe:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     10e:	04 08 10 20                                         ... 

00000112 <digital_pin_to_port_PGM>:
     112:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     122:	03 03 03 03                                         ....

00000126 <port_to_input_PGM>:
     126:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000130 <port_to_output_PGM>:
     130:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000013a <port_to_mode_PGM>:
     13a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000144 <__ctors_start>:
     144:	b1 06       	cpc	r11, r17
     146:	d0 09       	sbc	r29, r0

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d8 e0       	ldi	r29, 0x08	; 8
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	12 e0       	ldi	r17, 0x02	; 2
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	e2 e0       	ldi	r30, 0x02	; 2
     15c:	fe e2       	ldi	r31, 0x2E	; 46
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x10>
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	a4 3e       	cpi	r26, 0xE4	; 228
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0xc>

0000016a <__do_clear_bss>:
     16a:	24 e0       	ldi	r18, 0x04	; 4
     16c:	a4 ee       	ldi	r26, 0xE4	; 228
     16e:	b2 e0       	ldi	r27, 0x02	; 2
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a8 37       	cpi	r26, 0x78	; 120
     176:	b2 07       	cpc	r27, r18
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>

0000017a <__do_global_ctors>:
     17a:	10 e0       	ldi	r17, 0x00	; 0
     17c:	c4 ea       	ldi	r28, 0xA4	; 164
     17e:	d0 e0       	ldi	r29, 0x00	; 0
     180:	04 c0       	rjmp	.+8      	; 0x18a <__do_global_ctors+0x10>
     182:	21 97       	sbiw	r28, 0x01	; 1
     184:	fe 01       	movw	r30, r28
     186:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__tablejump2__>
     18a:	c2 3a       	cpi	r28, 0xA2	; 162
     18c:	d1 07       	cpc	r29, r17
     18e:	c9 f7       	brne	.-14     	; 0x182 <__do_global_ctors+0x8>
     190:	0e 94 7e 04 	call	0x8fc	; 0x8fc <main>
     194:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <_exit>

00000198 <__bad_interrupt>:
     198:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__vector_default>

0000019c <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     19c:	2f 92       	push	r2
     19e:	3f 92       	push	r3
     1a0:	4f 92       	push	r4
     1a2:	5f 92       	push	r5
     1a4:	6f 92       	push	r6
     1a6:	7f 92       	push	r7
     1a8:	8f 92       	push	r8
     1aa:	9f 92       	push	r9
     1ac:	af 92       	push	r10
     1ae:	bf 92       	push	r11
     1b0:	cf 92       	push	r12
     1b2:	df 92       	push	r13
     1b4:	ef 92       	push	r14
     1b6:	ff 92       	push	r15
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	e4 2f       	mov	r30, r20
     1c2:	f5 2f       	mov	r31, r21
     1c4:	41 90       	ld	r4, Z+
     1c6:	50 80       	ld	r5, Z
     1c8:	4f 92       	push	r4
     1ca:	5f 92       	push	r5
     1cc:	e4 2f       	mov	r30, r20
     1ce:	f5 2f       	mov	r31, r21
     1d0:	4d b6       	in	r4, 0x3d	; 61
     1d2:	5e b6       	in	r5, 0x3e	; 62
     1d4:	41 92       	st	Z+, r4
     1d6:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     1d8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>

000001dc <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     1dc:	e6 2f       	mov	r30, r22
     1de:	f7 2f       	mov	r31, r23
     1e0:	41 90       	ld	r4, Z+
     1e2:	50 80       	ld	r5, Z
     1e4:	4d be       	out	0x3d, r4	; 61
     1e6:	5e be       	out	0x3e, r5	; 62
     1e8:	5f 90       	pop	r5
     1ea:	4f 90       	pop	r4
     1ec:	e6 2f       	mov	r30, r22
     1ee:	f7 2f       	mov	r31, r23
     1f0:	41 92       	st	Z+, r4
     1f2:	50 82       	st	Z, r5
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	bf 90       	pop	r11
     206:	af 90       	pop	r10
     208:	9f 90       	pop	r9
     20a:	8f 90       	pop	r8
     20c:	7f 90       	pop	r7
     20e:	6f 90       	pop	r6
     210:	5f 90       	pop	r5
     212:	4f 90       	pop	r4
     214:	3f 90       	pop	r3
     216:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     218:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <osEE_scheduler_task_wrapper_restore>

0000021c <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     21c:	e6 2f       	mov	r30, r22
    mov r31, r23
     21e:	f7 2f       	mov	r31, r23
    ld  r20, z+
     220:	41 91       	ld	r20, Z+
    ld  r21, z
     222:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     224:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     226:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     228:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <osEE_scheduler_task_wrapper_run>

0000022c <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     22c:	2f 92       	push	r2
     22e:	3f 92       	push	r3
     230:	4f 92       	push	r4
     232:	5f 92       	push	r5
     234:	6f 92       	push	r6
     236:	7f 92       	push	r7
     238:	8f 92       	push	r8
     23a:	9f 92       	push	r9
     23c:	af 92       	push	r10
     23e:	bf 92       	push	r11
     240:	cf 92       	push	r12
     242:	df 92       	push	r13
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	e4 2f       	mov	r30, r20
     252:	f5 2f       	mov	r31, r21
     254:	41 90       	ld	r4, Z+
     256:	50 80       	ld	r5, Z
     258:	4f 92       	push	r4
     25a:	5f 92       	push	r5
     25c:	e4 2f       	mov	r30, r20
     25e:	f5 2f       	mov	r31, r21
     260:	4d b6       	in	r4, 0x3d	; 61
     262:	5e b6       	in	r5, 0x3e	; 62
     264:	41 92       	st	Z+, r4
     266:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     268:	0c 94 0e 01 	jmp	0x21c	; 0x21c <osEE_hal_ready2stacked>

0000026c <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     26c:	e8 2f       	mov	r30, r24
    mov r31, r25
     26e:	f9 2f       	mov	r31, r25
    ld  r20, z+
     270:	41 91       	ld	r20, Z+
    ld  r21, z
     272:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     274:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     276:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     278:	e6 2f       	mov	r30, r22
    mov r31, r23
     27a:	f7 2f       	mov	r31, r23

    ijmp
     27c:	09 94       	ijmp
	...

00000280 <_ZN5Print17availableForWriteEv>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	08 95       	ret

00000286 <_ZN5Print5flushEv>:
     286:	08 95       	ret

00000288 <_ZN13LiquidCrystal11pulseEnableEv>:
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	ec 01       	movw	r28, r24
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	8e 81       	ldd	r24, Y+6	; 0x06
     292:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 15 07 	call	0xe2a	; 0xe2a <delayMicroseconds>
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	8e 81       	ldd	r24, Y+6	; 0x06
     2a2:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 15 07 	call	0xe2a	; 0xe2a <delayMicroseconds>
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	8e 81       	ldd	r24, Y+6	; 0x06
     2b2:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     2b6:	84 e6       	ldi	r24, 0x64	; 100
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <delayMicroseconds>

000002c2 <_ZN13LiquidCrystal10write4bitsEh>:
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	6c 01       	movw	r12, r24
     2d4:	7c 01       	movw	r14, r24
     2d6:	87 e0       	ldi	r24, 0x07	; 7
     2d8:	e8 0e       	add	r14, r24
     2da:	f1 1c       	adc	r15, r1
     2dc:	d0 e0       	ldi	r29, 0x00	; 0
     2de:	c0 e0       	ldi	r28, 0x00	; 0
     2e0:	06 2f       	mov	r16, r22
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	b8 01       	movw	r22, r16
     2e6:	0c 2e       	mov	r0, r28
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     2ea:	75 95       	asr	r23
     2ec:	67 95       	ror	r22
     2ee:	0a 94       	dec	r0
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <_ZN13LiquidCrystal10write4bitsEh+0x28>
     2f2:	61 70       	andi	r22, 0x01	; 1
     2f4:	f7 01       	movw	r30, r14
     2f6:	81 91       	ld	r24, Z+
     2f8:	7f 01       	movw	r14, r30
     2fa:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     2fe:	21 96       	adiw	r28, 0x01	; 1
     300:	c4 30       	cpi	r28, 0x04	; 4
     302:	d1 05       	cpc	r29, r1
     304:	79 f7       	brne	.-34     	; 0x2e4 <_ZN13LiquidCrystal10write4bitsEh+0x22>
     306:	c6 01       	movw	r24, r12
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	0c 94 44 01 	jmp	0x288	; 0x288 <_ZN13LiquidCrystal11pulseEnableEv>

0000031c <_ZN13LiquidCrystal10write8bitsEh>:
     31c:	cf 92       	push	r12
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	6c 01       	movw	r12, r24
     32e:	7c 01       	movw	r14, r24
     330:	87 e0       	ldi	r24, 0x07	; 7
     332:	e8 0e       	add	r14, r24
     334:	f1 1c       	adc	r15, r1
     336:	d0 e0       	ldi	r29, 0x00	; 0
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	06 2f       	mov	r16, r22
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	b8 01       	movw	r22, r16
     340:	0c 2e       	mov	r0, r28
     342:	02 c0       	rjmp	.+4      	; 0x348 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     344:	75 95       	asr	r23
     346:	67 95       	ror	r22
     348:	0a 94       	dec	r0
     34a:	e2 f7       	brpl	.-8      	; 0x344 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     34c:	61 70       	andi	r22, 0x01	; 1
     34e:	f7 01       	movw	r30, r14
     350:	81 91       	ld	r24, Z+
     352:	7f 01       	movw	r14, r30
     354:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     358:	21 96       	adiw	r28, 0x01	; 1
     35a:	c8 30       	cpi	r28, 0x08	; 8
     35c:	d1 05       	cpc	r29, r1
     35e:	79 f7       	brne	.-34     	; 0x33e <_ZN13LiquidCrystal10write8bitsEh+0x22>
     360:	c6 01       	movw	r24, r12
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	df 90       	pop	r13
     370:	cf 90       	pop	r12
     372:	0c 94 44 01 	jmp	0x288	; 0x288 <_ZN13LiquidCrystal11pulseEnableEv>

00000376 <_ZN13LiquidCrystal4sendEhh>:
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	ec 01       	movw	r28, r24
     37e:	16 2f       	mov	r17, r22
     380:	64 2f       	mov	r22, r20
     382:	8c 81       	ldd	r24, Y+4	; 0x04
     384:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	8f 3f       	cpi	r24, 0xFF	; 255
     38c:	19 f0       	breq	.+6      	; 0x394 <_ZN13LiquidCrystal4sendEhh+0x1e>
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     394:	8f 85       	ldd	r24, Y+15	; 0x0f
     396:	61 2f       	mov	r22, r17
     398:	84 ff       	sbrs	r24, 4
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <_ZN13LiquidCrystal4sendEhh+0x32>
     39c:	ce 01       	movw	r24, r28
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_ZN13LiquidCrystal10write8bitsEh>
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	75 95       	asr	r23
     3ae:	67 95       	ror	r22
     3b0:	8a 95       	dec	r24
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <_ZN13LiquidCrystal4sendEhh+0x36>
     3b4:	ce 01       	movw	r24, r28
     3b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     3ba:	61 2f       	mov	r22, r17
     3bc:	ce 01       	movw	r24, r28
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>

000003c8 <_ZN13LiquidCrystal7commandEh>:
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	0c 94 bb 01 	jmp	0x376	; 0x376 <_ZN13LiquidCrystal4sendEhh>

000003ce <_ZN13LiquidCrystal5clearEv>:
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     3d4:	80 ed       	ldi	r24, 0xD0	; 208
     3d6:	97 e0       	ldi	r25, 0x07	; 7
     3d8:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <delayMicroseconds>

000003dc <_ZN13LiquidCrystal9setCursorEhh>:
     3dc:	44 30       	cpi	r20, 0x04	; 4
     3de:	08 f0       	brcs	.+2      	; 0x3e2 <_ZN13LiquidCrystal9setCursorEhh+0x6>
     3e0:	43 e0       	ldi	r20, 0x03	; 3
     3e2:	fc 01       	movw	r30, r24
     3e4:	23 89       	ldd	r18, Z+19	; 0x13
     3e6:	42 17       	cp	r20, r18
     3e8:	10 f0       	brcs	.+4      	; 0x3ee <_ZN13LiquidCrystal9setCursorEhh+0x12>
     3ea:	4f ef       	ldi	r20, 0xFF	; 255
     3ec:	42 0f       	add	r20, r18
     3ee:	fc 01       	movw	r30, r24
     3f0:	e4 0f       	add	r30, r20
     3f2:	f1 1d       	adc	r31, r1
     3f4:	24 89       	ldd	r18, Z+20	; 0x14
     3f6:	62 0f       	add	r22, r18
     3f8:	60 68       	ori	r22, 0x80	; 128
     3fa:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>

000003fe <_ZN13LiquidCrystal7displayEv>:
     3fe:	fc 01       	movw	r30, r24
     400:	60 89       	ldd	r22, Z+16	; 0x10
     402:	26 2f       	mov	r18, r22
     404:	24 60       	ori	r18, 0x04	; 4
     406:	20 8b       	std	Z+16, r18	; 0x10
     408:	6c 60       	ori	r22, 0x0C	; 12
     40a:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>

0000040e <_ZN13LiquidCrystal5beginEhhh>:
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	ec 01       	movw	r28, r24
     418:	42 30       	cpi	r20, 0x02	; 2
     41a:	18 f0       	brcs	.+6      	; 0x422 <_ZN13LiquidCrystal5beginEhhh+0x14>
     41c:	8f 85       	ldd	r24, Y+15	; 0x0f
     41e:	88 60       	ori	r24, 0x08	; 8
     420:	8f 87       	std	Y+15, r24	; 0x0f
     422:	4b 8b       	std	Y+19, r20	; 0x13
     424:	1c 8a       	std	Y+20, r1	; 0x14
     426:	80 e4       	ldi	r24, 0x40	; 64
     428:	8d 8b       	std	Y+21, r24	; 0x15
     42a:	6e 8b       	std	Y+22, r22	; 0x16
     42c:	60 5c       	subi	r22, 0xC0	; 192
     42e:	6f 8b       	std	Y+23, r22	; 0x17
     430:	22 23       	and	r18, r18
     432:	29 f0       	breq	.+10     	; 0x43e <_ZN13LiquidCrystal5beginEhhh+0x30>
     434:	41 30       	cpi	r20, 0x01	; 1
     436:	19 f4       	brne	.+6      	; 0x43e <_ZN13LiquidCrystal5beginEhhh+0x30>
     438:	8f 85       	ldd	r24, Y+15	; 0x0f
     43a:	84 60       	ori	r24, 0x04	; 4
     43c:	8f 87       	std	Y+15, r24	; 0x0f
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	8c 81       	ldd	r24, Y+4	; 0x04
     442:	0e 94 84 07 	call	0xf08	; 0xf08 <pinMode>
     446:	8d 81       	ldd	r24, Y+5	; 0x05
     448:	8f 3f       	cpi	r24, 0xFF	; 255
     44a:	19 f0       	breq	.+6      	; 0x452 <_ZN13LiquidCrystal5beginEhhh+0x44>
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	0e 94 84 07 	call	0xf08	; 0xf08 <pinMode>
     452:	61 e0       	ldi	r22, 0x01	; 1
     454:	8e 81       	ldd	r24, Y+6	; 0x06
     456:	0e 94 84 07 	call	0xf08	; 0xf08 <pinMode>
     45a:	8e 01       	movw	r16, r28
     45c:	98 01       	movw	r18, r16
     45e:	2c 1b       	sub	r18, r28
     460:	3d 0b       	sbc	r19, r29
     462:	8f 85       	ldd	r24, Y+15	; 0x0f
     464:	84 fd       	sbrc	r24, 4
     466:	0d c0       	rjmp	.+26     	; 0x482 <_ZN13LiquidCrystal5beginEhhh+0x74>
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0f 5f       	subi	r16, 0xFF	; 255
     46e:	1f 4f       	sbci	r17, 0xFF	; 255
     470:	28 17       	cp	r18, r24
     472:	39 07       	cpc	r19, r25
     474:	4c f4       	brge	.+18     	; 0x488 <_ZN13LiquidCrystal5beginEhhh+0x7a>
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	f8 01       	movw	r30, r16
     47a:	86 81       	ldd	r24, Z+6	; 0x06
     47c:	0e 94 84 07 	call	0xf08	; 0xf08 <pinMode>
     480:	ed cf       	rjmp	.-38     	; 0x45c <_ZN13LiquidCrystal5beginEhhh+0x4e>
     482:	88 e0       	ldi	r24, 0x08	; 8
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	f2 cf       	rjmp	.-28     	; 0x46c <_ZN13LiquidCrystal5beginEhhh+0x5e>
     488:	80 e5       	ldi	r24, 0x50	; 80
     48a:	93 ec       	ldi	r25, 0xC3	; 195
     48c:	0e 94 15 07 	call	0xe2a	; 0xe2a <delayMicroseconds>
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	8c 81       	ldd	r24, Y+4	; 0x04
     494:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	8e 81       	ldd	r24, Y+6	; 0x06
     49c:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     4a0:	8d 81       	ldd	r24, Y+5	; 0x05
     4a2:	8f 3f       	cpi	r24, 0xFF	; 255
     4a4:	19 f0       	breq	.+6      	; 0x4ac <_ZN13LiquidCrystal5beginEhhh+0x9e>
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     4ac:	6f 85       	ldd	r22, Y+15	; 0x0f
     4ae:	64 fd       	sbrc	r22, 4
     4b0:	33 c0       	rjmp	.+102    	; 0x518 <_ZN13LiquidCrystal5beginEhhh+0x10a>
     4b2:	63 e0       	ldi	r22, 0x03	; 3
     4b4:	ce 01       	movw	r24, r28
     4b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ba:	84 e9       	ldi	r24, 0x94	; 148
     4bc:	91 e1       	ldi	r25, 0x11	; 17
     4be:	0e 94 15 07 	call	0xe2a	; 0xe2a <delayMicroseconds>
     4c2:	63 e0       	ldi	r22, 0x03	; 3
     4c4:	ce 01       	movw	r24, r28
     4c6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ca:	84 e9       	ldi	r24, 0x94	; 148
     4cc:	91 e1       	ldi	r25, 0x11	; 17
     4ce:	0e 94 15 07 	call	0xe2a	; 0xe2a <delayMicroseconds>
     4d2:	63 e0       	ldi	r22, 0x03	; 3
     4d4:	ce 01       	movw	r24, r28
     4d6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4da:	86 e9       	ldi	r24, 0x96	; 150
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 15 07 	call	0xe2a	; 0xe2a <delayMicroseconds>
     4e2:	62 e0       	ldi	r22, 0x02	; 2
     4e4:	ce 01       	movw	r24, r28
     4e6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN13LiquidCrystal10write4bitsEh>
     4ea:	6f 85       	ldd	r22, Y+15	; 0x0f
     4ec:	60 62       	ori	r22, 0x20	; 32
     4ee:	ce 01       	movw	r24, r28
     4f0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     4f4:	84 e0       	ldi	r24, 0x04	; 4
     4f6:	88 8b       	std	Y+16, r24	; 0x10
     4f8:	ce 01       	movw	r24, r28
     4fa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN13LiquidCrystal7displayEv>
     4fe:	ce 01       	movw	r24, r28
     500:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN13LiquidCrystal5clearEv>
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	89 8b       	std	Y+17, r24	; 0x11
     508:	66 e0       	ldi	r22, 0x06	; 6
     50a:	ce 01       	movw	r24, r28
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     518:	60 62       	ori	r22, 0x20	; 32
     51a:	ce 01       	movw	r24, r28
     51c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     520:	84 e9       	ldi	r24, 0x94	; 148
     522:	91 e1       	ldi	r25, 0x11	; 17
     524:	0e 94 15 07 	call	0xe2a	; 0xe2a <delayMicroseconds>
     528:	6f 85       	ldd	r22, Y+15	; 0x0f
     52a:	60 62       	ori	r22, 0x20	; 32
     52c:	ce 01       	movw	r24, r28
     52e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     532:	86 e9       	ldi	r24, 0x96	; 150
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 15 07 	call	0xe2a	; 0xe2a <delayMicroseconds>
     53a:	6f 85       	ldd	r22, Y+15	; 0x0f
     53c:	60 62       	ori	r22, 0x20	; 32
     53e:	ce 01       	movw	r24, r28
     540:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13LiquidCrystal7commandEh>
     544:	d2 cf       	rjmp	.-92     	; 0x4ea <_ZN13LiquidCrystal5beginEhhh+0xdc>

00000546 <_ZN13LiquidCrystalC1Ehhhhhh>:
     546:	cf 92       	push	r12
     548:	ef 92       	push	r14
     54a:	0f 93       	push	r16
     54c:	fc 01       	movw	r30, r24
     54e:	13 82       	std	Z+3, r1	; 0x03
     550:	12 82       	std	Z+2, r1	; 0x02
     552:	83 e6       	ldi	r24, 0x63	; 99
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	91 83       	std	Z+1, r25	; 0x01
     558:	80 83       	st	Z, r24
     55a:	64 83       	std	Z+4, r22	; 0x04
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	85 83       	std	Z+5, r24	; 0x05
     560:	46 83       	std	Z+6, r20	; 0x06
     562:	27 83       	std	Z+7, r18	; 0x07
     564:	00 87       	std	Z+8, r16	; 0x08
     566:	e1 86       	std	Z+9, r14	; 0x09
     568:	c2 86       	std	Z+10, r12	; 0x0a
     56a:	13 86       	std	Z+11, r1	; 0x0b
     56c:	14 86       	std	Z+12, r1	; 0x0c
     56e:	15 86       	std	Z+13, r1	; 0x0d
     570:	16 86       	std	Z+14, r1	; 0x0e
     572:	17 86       	std	Z+15, r1	; 0x0f
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	60 e1       	ldi	r22, 0x10	; 16
     57a:	cf 01       	movw	r24, r30
     57c:	0f 91       	pop	r16
     57e:	ef 90       	pop	r14
     580:	cf 90       	pop	r12
     582:	0c 94 07 02 	jmp	0x40e	; 0x40e <_ZN13LiquidCrystal5beginEhhh>

00000586 <_ZN13LiquidCrystal5writeEh>:
     586:	41 e0       	ldi	r20, 0x01	; 1
     588:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN13LiquidCrystal4sendEhh>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	08 95       	ret

00000592 <__vector_9>:
     592:	1f 92       	push	r1
     594:	0f 92       	push	r0
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	0f 92       	push	r0
     59a:	11 24       	eor	r1, r1
     59c:	2f 93       	push	r18
     59e:	3f 93       	push	r19
     5a0:	4f 93       	push	r20
     5a2:	5f 93       	push	r21
     5a4:	6f 93       	push	r22
     5a6:	7f 93       	push	r23
     5a8:	8f 93       	push	r24
     5aa:	9f 93       	push	r25
     5ac:	af 93       	push	r26
     5ae:	bf 93       	push	r27
     5b0:	ef 93       	push	r30
     5b2:	ff 93       	push	r31
     5b4:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <_ZL8ISRCount>
     5b8:	8f 5f       	subi	r24, 0xFF	; 255
     5ba:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <_ZL8ISRCount>
     5be:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <_ZL7Channel>
     5c2:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <_ZL8ISRCount>
     5c6:	8e 2f       	mov	r24, r30
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	fc 01       	movw	r30, r24
     5cc:	ee 0f       	add	r30, r30
     5ce:	ff 1f       	adc	r31, r31
     5d0:	e8 0f       	add	r30, r24
     5d2:	f9 1f       	adc	r31, r25
     5d4:	e8 51       	subi	r30, 0x18	; 24
     5d6:	fd 4f       	sbci	r31, 0xFD	; 253
     5d8:	81 81       	ldd	r24, Z+1	; 0x01
     5da:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <_ZL7Channel>
     5de:	82 13       	cpse	r24, r18
     5e0:	1d c0       	rjmp	.+58     	; 0x61c <__vector_9+0x8a>
     5e2:	8e 2f       	mov	r24, r30
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	fc 01       	movw	r30, r24
     5e8:	ee 0f       	add	r30, r30
     5ea:	ff 1f       	adc	r31, r31
     5ec:	e8 0f       	add	r30, r24
     5ee:	f9 1f       	adc	r31, r25
     5f0:	e8 51       	subi	r30, 0x18	; 24
     5f2:	fd 4f       	sbci	r31, 0xFD	; 253
     5f4:	82 81       	ldd	r24, Z+2	; 0x02
     5f6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	7f 91       	pop	r23
     608:	6f 91       	pop	r22
     60a:	5f 91       	pop	r21
     60c:	4f 91       	pop	r20
     60e:	3f 91       	pop	r19
     610:	2f 91       	pop	r18
     612:	0f 90       	pop	r0
     614:	0f be       	out	0x3f, r0	; 63
     616:	0f 90       	pop	r0
     618:	1f 90       	pop	r1
     61a:	18 95       	reti
     61c:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <_ZL8ISRCount>
     620:	8e 2f       	mov	r24, r30
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	fc 01       	movw	r30, r24
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	e8 0f       	add	r30, r24
     62c:	f9 1f       	adc	r31, r25
     62e:	e8 51       	subi	r30, 0x18	; 24
     630:	fd 4f       	sbci	r31, 0xFD	; 253
     632:	81 81       	ldd	r24, Z+1	; 0x01
     634:	82 17       	cp	r24, r18
     636:	08 f7       	brcc	.-62     	; 0x5fa <__vector_9+0x68>
     638:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <_ZL7Channel>
     63c:	8e 2f       	mov	r24, r30
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	fc 01       	movw	r30, r24
     642:	ee 0f       	add	r30, r30
     644:	ff 1f       	adc	r31, r31
     646:	e8 0f       	add	r30, r24
     648:	f9 1f       	adc	r31, r25
     64a:	e8 51       	subi	r30, 0x18	; 24
     64c:	fd 4f       	sbci	r31, 0xFD	; 253
     64e:	80 81       	ld	r24, Z
     650:	85 ff       	sbrs	r24, 5
     652:	10 c0       	rjmp	.+32     	; 0x674 <__vector_9+0xe2>
     654:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <_ZL7Channel>
     658:	8e 2f       	mov	r24, r30
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	fc 01       	movw	r30, r24
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	e8 0f       	add	r30, r24
     664:	f9 1f       	adc	r31, r25
     666:	e8 51       	subi	r30, 0x18	; 24
     668:	fd 4f       	sbci	r31, 0xFD	; 253
     66a:	80 81       	ld	r24, Z
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	8f 71       	andi	r24, 0x1F	; 31
     670:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     674:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <_ZL7Channel>
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <_ZL7Channel>
     67e:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <_ZL8ISRCount>
     682:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     686:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <_ZL7Channel>
     68a:	88 23       	and	r24, r24
     68c:	19 f1       	breq	.+70     	; 0x6d4 <__vector_9+0x142>
     68e:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <_ZL7Channel>
     692:	89 30       	cpi	r24, 0x09	; 9
     694:	f8 f4       	brcc	.+62     	; 0x6d4 <__vector_9+0x142>
     696:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <_ZL7Channel>
     69a:	8e 2f       	mov	r24, r30
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	e8 0f       	add	r30, r24
     6a6:	f9 1f       	adc	r31, r25
     6a8:	e8 51       	subi	r30, 0x18	; 24
     6aa:	fd 4f       	sbci	r31, 0xFD	; 253
     6ac:	80 81       	ld	r24, Z
     6ae:	85 ff       	sbrs	r24, 5
     6b0:	a4 cf       	rjmp	.-184    	; 0x5fa <__vector_9+0x68>
     6b2:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <_ZL7Channel>
     6b6:	8e 2f       	mov	r24, r30
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	fc 01       	movw	r30, r24
     6bc:	ee 0f       	add	r30, r30
     6be:	ff 1f       	adc	r31, r31
     6c0:	e8 0f       	add	r30, r24
     6c2:	f9 1f       	adc	r31, r25
     6c4:	e8 51       	subi	r30, 0x18	; 24
     6c6:	fd 4f       	sbci	r31, 0xFD	; 253
     6c8:	80 81       	ld	r24, Z
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	8f 71       	andi	r24, 0x1F	; 31
     6ce:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     6d2:	93 cf       	rjmp	.-218    	; 0x5fa <__vector_9+0x68>
     6d4:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <_ZL7Channel>
     6d8:	89 30       	cpi	r24, 0x09	; 9
     6da:	08 f4       	brcc	.+2      	; 0x6de <__vector_9+0x14c>
     6dc:	8e cf       	rjmp	.-228    	; 0x5fa <__vector_9+0x68>
     6de:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <_ZL7Channel>
     6e2:	8b cf       	rjmp	.-234    	; 0x5fa <__vector_9+0x68>

000006e4 <_ZN11ServoTimer2C1Ev>:
     6e4:	fc 01       	movw	r30, r24
     6e6:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <ChannelCount>
     6ea:	98 30       	cpi	r25, 0x08	; 8
     6ec:	28 f4       	brcc	.+10     	; 0x6f8 <_ZN11ServoTimer2C1Ev+0x14>
     6ee:	9f 5f       	subi	r25, 0xFF	; 255
     6f0:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <ChannelCount>
     6f4:	90 83       	st	Z, r25
     6f6:	08 95       	ret
     6f8:	10 82       	st	Z, r1
     6fa:	08 95       	ret

000006fc <_ZN11ServoTimer26attachEi>:
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ec 01       	movw	r28, r24
     704:	16 2f       	mov	r17, r22
     706:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__data_end>
     70a:	81 11       	cpse	r24, r1
     70c:	22 c0       	rjmp	.+68     	; 0x752 <_ZN11ServoTimer26attachEi+0x56>
     70e:	e8 ee       	ldi	r30, 0xE8	; 232
     710:	f2 e0       	ldi	r31, 0x02	; 2
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	93 e0       	ldi	r25, 0x03	; 3
     716:	3b e0       	ldi	r19, 0x0B	; 11
     718:	27 e5       	ldi	r18, 0x57	; 87
     71a:	34 83       	std	Z+4, r19	; 0x04
     71c:	25 83       	std	Z+5, r18	; 0x05
     71e:	33 96       	adiw	r30, 0x03	; 3
     720:	8e 17       	cp	r24, r30
     722:	9f 07       	cpc	r25, r31
     724:	d1 f7       	brne	.-12     	; 0x71a <_ZN11ServoTimer26attachEi+0x1e>
     726:	8e e3       	ldi	r24, 0x3E	; 62
     728:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <_ZL6servos+0x1>
     72c:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <_ZL7Channel>
     730:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <_ZL8ISRCount>
     734:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     738:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     742:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	87 bb       	out	0x17, r24	; 23
     74a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     74e:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <__data_end>
     752:	88 81       	ld	r24, Y
     754:	88 23       	and	r24, r24
     756:	a1 f0       	breq	.+40     	; 0x780 <_ZN11ServoTimer26attachEi+0x84>
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	81 2f       	mov	r24, r17
     75c:	0e 94 84 07 	call	0xf08	; 0xf08 <pinMode>
     760:	e8 81       	ld	r30, Y
     762:	8e 2f       	mov	r24, r30
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	fc 01       	movw	r30, r24
     768:	ee 0f       	add	r30, r30
     76a:	ff 1f       	adc	r31, r31
     76c:	e8 0f       	add	r30, r24
     76e:	f9 1f       	adc	r31, r25
     770:	e8 51       	subi	r30, 0x18	; 24
     772:	fd 4f       	sbci	r31, 0xFD	; 253
     774:	1f 71       	andi	r17, 0x1F	; 31
     776:	60 81       	ld	r22, Z
     778:	60 7e       	andi	r22, 0xE0	; 224
     77a:	61 2b       	or	r22, r17
     77c:	60 62       	ori	r22, 0x20	; 32
     77e:	60 83       	st	Z, r22
     780:	88 81       	ld	r24, Y
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	08 95       	ret

0000078a <_ZN11ServoTimer25writeEi>:
     78a:	dc 01       	movw	r26, r24
     78c:	ec 91       	ld	r30, X
     78e:	8f ef       	ldi	r24, 0xFF	; 255
     790:	8e 0f       	add	r24, r30
     792:	88 30       	cpi	r24, 0x08	; 8
     794:	f8 f4       	brcc	.+62     	; 0x7d4 <_ZN11ServoTimer25writeEi+0x4a>
     796:	cb 01       	movw	r24, r22
     798:	6b 3c       	cpi	r22, 0xCB	; 203
     79a:	78 40       	sbci	r23, 0x08	; 8
     79c:	14 f0       	brlt	.+4      	; 0x7a2 <_ZN11ServoTimer25writeEi+0x18>
     79e:	8a ec       	ldi	r24, 0xCA	; 202
     7a0:	98 e0       	ldi	r25, 0x08	; 8
     7a2:	8e 3e       	cpi	r24, 0xEE	; 238
     7a4:	22 e0       	ldi	r18, 0x02	; 2
     7a6:	92 07       	cpc	r25, r18
     7a8:	14 f4       	brge	.+4      	; 0x7ae <_ZN11ServoTimer25writeEi+0x24>
     7aa:	8e ee       	ldi	r24, 0xEE	; 238
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	08 97       	sbiw	r24, 0x08	; 8
     7b0:	ac 01       	movw	r20, r24
     7b2:	44 0f       	add	r20, r20
     7b4:	45 2f       	mov	r20, r21
     7b6:	44 1f       	adc	r20, r20
     7b8:	55 0b       	sbc	r21, r21
     7ba:	2e 2f       	mov	r18, r30
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	f9 01       	movw	r30, r18
     7c0:	ee 0f       	add	r30, r30
     7c2:	ff 1f       	adc	r31, r31
     7c4:	e2 0f       	add	r30, r18
     7c6:	f3 1f       	adc	r31, r19
     7c8:	e8 51       	subi	r30, 0x18	; 24
     7ca:	fd 4f       	sbci	r31, 0xFD	; 253
     7cc:	41 83       	std	Z+1, r20	; 0x01
     7ce:	88 0f       	add	r24, r24
     7d0:	80 95       	com	r24
     7d2:	82 83       	std	Z+2, r24	; 0x02
     7d4:	08 95       	ret

000007d6 <idle_hook>:
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <idle_hook+0xa>
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	8d b7       	in	r24, 0x3d	; 61
     7e6:	9e b7       	in	r25, 0x3e	; 62
     7e8:	9a 83       	std	Y+2, r25	; 0x02
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <main_sp>
     7f0:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <main_sp+0x1>
     7f4:	89 2b       	or	r24, r25
     7f6:	a9 f4       	brne	.+42     	; 0x822 <idle_hook+0x4c>
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <main_sp+0x1>
     800:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <main_sp>
     804:	f8 94       	cli
     806:	8f e6       	ldi	r24, 0x6F	; 111
     808:	98 e0       	ldi	r25, 0x08	; 8
     80a:	89 2b       	or	r24, r25
     80c:	11 f0       	breq	.+4      	; 0x812 <idle_hook+0x3c>
     80e:	0e 94 6f 08 	call	0x10de	; 0x10de <_Z14serialEventRunv>
     812:	78 94       	sei
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret
     822:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <main_sp>
     826:	30 91 04 03 	lds	r19, 0x0304	; 0x800304 <main_sp+0x1>
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	9a 81       	ldd	r25, Y+2	; 0x02
     82e:	28 17       	cp	r18, r24
     830:	39 07       	cpc	r19, r25
     832:	41 f3       	breq	.-48     	; 0x804 <idle_hook+0x2e>
     834:	f8 94       	cli
     836:	8b e6       	ldi	r24, 0x6B	; 107
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 88 04 	call	0x910	; 0x910 <serial_print>
     83e:	0f e6       	ldi	r16, 0x6F	; 111
     840:	18 e0       	ldi	r17, 0x08	; 8
     842:	01 15       	cp	r16, r1
     844:	11 05       	cpc	r17, r1
     846:	e9 f3       	breq	.-6      	; 0x842 <idle_hook+0x6c>
     848:	0e 94 6f 08 	call	0x10de	; 0x10de <_Z14serialEventRunv>
     84c:	fa cf       	rjmp	.-12     	; 0x842 <idle_hook+0x6c>

0000084e <setup>:
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	87 e0       	ldi	r24, 0x07	; 7
     852:	0e 94 84 07 	call	0xf08	; 0xf08 <pinMode>
     856:	87 e0       	ldi	r24, 0x07	; 7
     858:	0e 94 ee 07 	call	0xfdc	; 0xfdc <digitalRead>
     85c:	65 e0       	ldi	r22, 0x05	; 5
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	8c e0       	ldi	r24, 0x0C	; 12
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN11ServoTimer26attachEi>
     868:	66 e0       	ldi	r22, 0x06	; 6
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	8b e0       	ldi	r24, 0x0B	; 11
     86e:	93 e0       	ldi	r25, 0x03	; 3
     870:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN11ServoTimer26attachEi>
     874:	6e ee       	ldi	r22, 0xEE	; 238
     876:	72 e0       	ldi	r23, 0x02	; 2
     878:	8c e0       	ldi	r24, 0x0C	; 12
     87a:	93 e0       	ldi	r25, 0x03	; 3
     87c:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN11ServoTimer25writeEi>
     880:	6e ee       	ldi	r22, 0xEE	; 238
     882:	72 e0       	ldi	r23, 0x02	; 2
     884:	8b e0       	ldi	r24, 0x0B	; 11
     886:	93 e0       	ldi	r25, 0x03	; 3
     888:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN11ServoTimer25writeEi>
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	83 e1       	ldi	r24, 0x13	; 19
     890:	0e 94 84 07 	call	0xf08	; 0xf08 <pinMode>
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	0e 94 84 07 	call	0xf08	; 0xf08 <pinMode>
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	82 e1       	ldi	r24, 0x12	; 18
     8a8:	0e 94 84 07 	call	0xf08	; 0xf08 <pinMode>
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	83 e0       	ldi	r24, 0x03	; 3
     8b0:	0e 94 84 07 	call	0xf08	; 0xf08 <pinMode>
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     8bc:	26 e0       	ldi	r18, 0x06	; 6
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	52 ec       	ldi	r21, 0xC2	; 194
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	8e e3       	ldi	r24, 0x3E	; 62
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN14HardwareSerial5beginEmh>
     8ce:	66 e8       	ldi	r22, 0x86	; 134
     8d0:	71 e0       	ldi	r23, 0x01	; 1
     8d2:	8e e3       	ldi	r24, 0x3E	; 62
     8d4:	93 e0       	ldi	r25, 0x03	; 3
     8d6:	0e 94 4c 0a 	call	0x1498	; 0x1498 <_ZN5Print7printlnEPKc>
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	44 e0       	ldi	r20, 0x04	; 4
     8de:	64 e1       	ldi	r22, 0x14	; 20
     8e0:	8d e1       	ldi	r24, 0x1D	; 29
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	0e 94 07 02 	call	0x40e	; 0x40e <_ZN13LiquidCrystal5beginEhhh>
     8e8:	8d e1       	ldi	r24, 0x1D	; 29
     8ea:	93 e0       	ldi	r25, 0x03	; 3
     8ec:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN13LiquidCrystal5clearEv>
     8f0:	6a e9       	ldi	r22, 0x9A	; 154
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	8d e1       	ldi	r24, 0x1D	; 29
     8f6:	93 e0       	ldi	r25, 0x03	; 3
     8f8:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <_ZN5Print5printEPKc>

000008fc <main>:
     8fc:	0e 94 20 07 	call	0xe40	; 0xe40 <init>
     900:	0e 94 27 04 	call	0x84e	; 0x84e <setup>
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 1b 0c 	call	0x1836	; 0x1836 <StartOS>
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	08 95       	ret

00000910 <serial_print>:
     910:	f8 94       	cli
     912:	fc 01       	movw	r30, r24
     914:	01 90       	ld	r0, Z+
     916:	00 20       	and	r0, r0
     918:	e9 f7       	brne	.-6      	; 0x914 <serial_print+0x4>
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	af 01       	movw	r20, r30
     91e:	48 1b       	sub	r20, r24
     920:	59 0b       	sbc	r21, r25
     922:	bc 01       	movw	r22, r24
     924:	8e e3       	ldi	r24, 0x3E	; 62
     926:	93 e0       	ldi	r25, 0x03	; 3
     928:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZN5Print5writeEPKhj>
     92c:	78 94       	sei
     92e:	08 95       	ret

00000930 <FuncDetectLight>:
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	83 e1       	ldi	r24, 0x13	; 19
     93a:	0e 94 17 08 	call	0x102e	; 0x102e <analogRead>
     93e:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <WestDataRaw+0x1>
     942:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <WestDataRaw>
     946:	82 e1       	ldi	r24, 0x12	; 18
     948:	0e 94 17 08 	call	0x102e	; 0x102e <analogRead>
     94c:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <EastDataRaw+0x1>
     950:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <EastDataRaw>
     954:	60 91 1b 03 	lds	r22, 0x031B	; 0x80031b <WestDataRaw>
     958:	70 91 1c 03 	lds	r23, 0x031C	; 0x80031c <WestDataRaw+0x1>
     95c:	07 2e       	mov	r0, r23
     95e:	00 0c       	add	r0, r0
     960:	88 0b       	sbc	r24, r24
     962:	99 0b       	sbc	r25, r25
     964:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__floatsisf>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 ec       	ldi	r19, 0xC0	; 192
     96c:	4f e7       	ldi	r20, 0x7F	; 127
     96e:	54 e4       	ldi	r21, 0x44	; 68
     970:	0e 94 41 13 	call	0x2682	; 0x2682 <__divsf3>
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 ea       	ldi	r20, 0xA0	; 160
     97a:	50 e4       	ldi	r21, 0x40	; 64
     97c:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsf3>
     980:	6b 01       	movw	r12, r22
     982:	7c 01       	movw	r14, r24
     984:	ac 01       	movw	r20, r24
     986:	9b 01       	movw	r18, r22
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	80 ea       	ldi	r24, 0xA0	; 160
     98e:	90 e4       	ldi	r25, 0x40	; 64
     990:	0e 94 cf 12 	call	0x259e	; 0x259e <__subsf3>
     994:	a7 01       	movw	r20, r14
     996:	96 01       	movw	r18, r12
     998:	0e 94 41 13 	call	0x2682	; 0x2682 <__divsf3>
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e4       	ldi	r19, 0x40	; 64
     9a0:	4c e9       	ldi	r20, 0x9C	; 156
     9a2:	55 e4       	ldi	r21, 0x45	; 69
     9a4:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsf3>
     9a8:	22 ec       	ldi	r18, 0xC2	; 194
     9aa:	3f e2       	ldi	r19, 0x2F	; 47
     9ac:	45 e9       	ldi	r20, 0x95	; 149
     9ae:	5f eb       	ldi	r21, 0xBF	; 191
     9b0:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pow>
     9b4:	2e e1       	ldi	r18, 0x1E	; 30
     9b6:	38 e4       	ldi	r19, 0x48	; 72
     9b8:	49 e5       	ldi	r20, 0x59	; 89
     9ba:	59 e4       	ldi	r21, 0x49	; 73
     9bc:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsf3>
     9c0:	ab 01       	movw	r20, r22
     9c2:	bc 01       	movw	r22, r24
     9c4:	40 93 17 03 	sts	0x0317, r20	; 0x800317 <WestDataLux>
     9c8:	50 93 18 03 	sts	0x0318, r21	; 0x800318 <WestDataLux+0x1>
     9cc:	60 93 19 03 	sts	0x0319, r22	; 0x800319 <WestDataLux+0x2>
     9d0:	70 93 1a 03 	sts	0x031A, r23	; 0x80031a <WestDataLux+0x3>
     9d4:	22 e0       	ldi	r18, 0x02	; 2
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	8e e3       	ldi	r24, 0x3E	; 62
     9da:	93 e0       	ldi	r25, 0x03	; 3
     9dc:	0e 94 09 0c 	call	0x1812	; 0x1812 <_ZN5Print7printlnEdi>
     9e0:	60 91 15 03 	lds	r22, 0x0315	; 0x800315 <EastDataRaw>
     9e4:	70 91 16 03 	lds	r23, 0x0316	; 0x800316 <EastDataRaw+0x1>
     9e8:	07 2e       	mov	r0, r23
     9ea:	00 0c       	add	r0, r0
     9ec:	88 0b       	sbc	r24, r24
     9ee:	99 0b       	sbc	r25, r25
     9f0:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__floatsisf>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 ec       	ldi	r19, 0xC0	; 192
     9f8:	4f e7       	ldi	r20, 0x7F	; 127
     9fa:	54 e4       	ldi	r21, 0x44	; 68
     9fc:	0e 94 41 13 	call	0x2682	; 0x2682 <__divsf3>
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 ea       	ldi	r20, 0xA0	; 160
     a06:	50 e4       	ldi	r21, 0x40	; 64
     a08:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsf3>
     a0c:	6b 01       	movw	r12, r22
     a0e:	7c 01       	movw	r14, r24
     a10:	ac 01       	movw	r20, r24
     a12:	9b 01       	movw	r18, r22
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 ea       	ldi	r24, 0xA0	; 160
     a1a:	90 e4       	ldi	r25, 0x40	; 64
     a1c:	0e 94 cf 12 	call	0x259e	; 0x259e <__subsf3>
     a20:	a7 01       	movw	r20, r14
     a22:	96 01       	movw	r18, r12
     a24:	0e 94 41 13 	call	0x2682	; 0x2682 <__divsf3>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e4       	ldi	r19, 0x40	; 64
     a2c:	4c e9       	ldi	r20, 0x9C	; 156
     a2e:	55 e4       	ldi	r21, 0x45	; 69
     a30:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsf3>
     a34:	22 ec       	ldi	r18, 0xC2	; 194
     a36:	3f e2       	ldi	r19, 0x2F	; 47
     a38:	45 e9       	ldi	r20, 0x95	; 149
     a3a:	5f eb       	ldi	r21, 0xBF	; 191
     a3c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pow>
     a40:	2e e1       	ldi	r18, 0x1E	; 30
     a42:	38 e4       	ldi	r19, 0x48	; 72
     a44:	49 e5       	ldi	r20, 0x59	; 89
     a46:	59 e4       	ldi	r21, 0x49	; 73
     a48:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsf3>
     a4c:	ab 01       	movw	r20, r22
     a4e:	bc 01       	movw	r22, r24
     a50:	40 93 11 03 	sts	0x0311, r20	; 0x800311 <EastDataLux>
     a54:	50 93 12 03 	sts	0x0312, r21	; 0x800312 <EastDataLux+0x1>
     a58:	60 93 13 03 	sts	0x0313, r22	; 0x800313 <EastDataLux+0x2>
     a5c:	70 93 14 03 	sts	0x0314, r23	; 0x800314 <EastDataLux+0x3>
     a60:	22 e0       	ldi	r18, 0x02	; 2
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	8e e3       	ldi	r24, 0x3E	; 62
     a66:	93 e0       	ldi	r25, 0x03	; 3
     a68:	0e 94 09 0c 	call	0x1812	; 0x1812 <_ZN5Print7printlnEdi>
     a6c:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <WestDataLux>
     a70:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <WestDataLux+0x1>
     a74:	40 91 19 03 	lds	r20, 0x0319	; 0x800319 <WestDataLux+0x2>
     a78:	50 91 1a 03 	lds	r21, 0x031A	; 0x80031a <WestDataLux+0x3>
     a7c:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <EastDataLux>
     a80:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <EastDataLux+0x1>
     a84:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <EastDataLux+0x2>
     a88:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <EastDataLux+0x3>
     a8c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__addsf3>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	5f e3       	ldi	r21, 0x3F	; 63
     a98:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsf3>
     a9c:	6b 01       	movw	r12, r22
     a9e:	7c 01       	movw	r14, r24
     aa0:	c0 92 0d 03 	sts	0x030D, r12	; 0x80030d <AverageLux>
     aa4:	d0 92 0e 03 	sts	0x030E, r13	; 0x80030e <AverageLux+0x1>
     aa8:	e0 92 0f 03 	sts	0x030F, r14	; 0x80030f <AverageLux+0x2>
     aac:	f0 92 10 03 	sts	0x0310, r15	; 0x800310 <AverageLux+0x3>
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	a9 01       	movw	r20, r18
     ab6:	0e 94 3c 13 	call	0x2678	; 0x2678 <__cmpsf2>
     aba:	88 23       	and	r24, r24
     abc:	09 f4       	brne	.+2      	; 0xac0 <FuncDetectLight+0x190>
     abe:	3f c0       	rjmp	.+126    	; 0xb3e <FuncDetectLight+0x20e>
     ac0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <timeInSeconds>
     ac4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <timeInSeconds+0x1>
     ac8:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <timeInSeconds+0x2>
     acc:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <timeInSeconds+0x3>
     ad0:	89 57       	subi	r24, 0x79	; 121
     ad2:	99 46       	sbci	r25, 0x69	; 105
     ad4:	a1 09       	sbc	r26, r1
     ad6:	b1 09       	sbc	r27, r1
     ad8:	8f 3a       	cpi	r24, 0xAF	; 175
     ada:	9a 49       	sbci	r25, 0x9A	; 154
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	90 f4       	brcc	.+36     	; 0xb06 <FuncDetectLight+0x1d6>
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	48 e4       	ldi	r20, 0x48	; 72
     ae8:	53 e4       	ldi	r21, 0x43	; 67
     aea:	c7 01       	movw	r24, r14
     aec:	b6 01       	movw	r22, r12
     aee:	0e 94 3c 13 	call	0x2678	; 0x2678 <__cmpsf2>
     af2:	22 e0       	ldi	r18, 0x02	; 2
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	b7 01       	movw	r22, r14
     af8:	a6 01       	movw	r20, r12
     afa:	87 ff       	sbrs	r24, 7
     afc:	0f c0       	rjmp	.+30     	; 0xb1c <FuncDetectLight+0x1ec>
     afe:	8e e3       	ldi	r24, 0x3E	; 62
     b00:	93 e0       	ldi	r25, 0x03	; 3
     b02:	0e 94 09 0c 	call	0x1812	; 0x1812 <_ZN5Print7printlnEdi>
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	83 e0       	ldi	r24, 0x03	; 3
     b12:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	0e c0       	rjmp	.+28     	; 0xb38 <FuncDetectLight+0x208>
     b1c:	8e e3       	ldi	r24, 0x3E	; 62
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	0e 94 09 0c 	call	0x1812	; 0x1812 <_ZN5Print7printlnEdi>
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	0e 94 c0 07 	call	0xf80	; 0xf80 <digitalWrite>
     b34:	62 e0       	ldi	r22, 0x02	; 2
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	83 e0       	ldi	r24, 0x03	; 3
     b3a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <SetEvent>
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <TerminateTask>

00000b4a <FuncRollServo>:
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <FuncRollServo+0x6>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <WaitEvent>
     b5c:	be 01       	movw	r22, r28
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <GetEvent>
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	81 ff       	sbrs	r24, 1
     b6c:	16 c0       	rjmp	.+44     	; 0xb9a <FuncRollServo+0x50>
     b6e:	6a ec       	ldi	r22, 0xCA	; 202
     b70:	78 e0       	ldi	r23, 0x08	; 8
     b72:	8c e0       	ldi	r24, 0x0C	; 12
     b74:	93 e0       	ldi	r25, 0x03	; 3
     b76:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN11ServoTimer25writeEi>
     b7a:	6a ec       	ldi	r22, 0xCA	; 202
     b7c:	78 e0       	ldi	r23, 0x08	; 8
     b7e:	8b e0       	ldi	r24, 0x0B	; 11
     b80:	93 e0       	ldi	r25, 0x03	; 3
     b82:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN11ServoTimer25writeEi>
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <ClearEvent>
     b8e:	6d e8       	ldi	r22, 0x8D	; 141
     b90:	72 e0       	ldi	r23, 0x02	; 2
     b92:	8e e3       	ldi	r24, 0x3E	; 62
     b94:	93 e0       	ldi	r25, 0x03	; 3
     b96:	0e 94 4c 0a 	call	0x1498	; 0x1498 <_ZN5Print7printlnEPKc>
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	80 ff       	sbrs	r24, 0
     b9e:	da cf       	rjmp	.-76     	; 0xb54 <FuncRollServo+0xa>
     ba0:	6e ee       	ldi	r22, 0xEE	; 238
     ba2:	72 e0       	ldi	r23, 0x02	; 2
     ba4:	8c e0       	ldi	r24, 0x0C	; 12
     ba6:	93 e0       	ldi	r25, 0x03	; 3
     ba8:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN11ServoTimer25writeEi>
     bac:	6e ee       	ldi	r22, 0xEE	; 238
     bae:	72 e0       	ldi	r23, 0x02	; 2
     bb0:	8b e0       	ldi	r24, 0x0B	; 11
     bb2:	93 e0       	ldi	r25, 0x03	; 3
     bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN11ServoTimer25writeEi>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <ClearEvent>
     bc0:	69 e9       	ldi	r22, 0x99	; 153
     bc2:	72 e0       	ldi	r23, 0x02	; 2
     bc4:	8e e3       	ldi	r24, 0x3E	; 62
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <_ZN5Print7printlnEPKc>
     bcc:	c3 cf       	rjmp	.-122    	; 0xb54 <FuncRollServo+0xa>

00000bce <FuncDisplayTask>:
     bce:	cf 92       	push	r12
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	c0 90 5a 01 	lds	r12, 0x015A	; 0x80015a <timeInSeconds>
     bda:	d0 90 5b 01 	lds	r13, 0x015B	; 0x80015b <timeInSeconds+0x1>
     bde:	e0 90 5c 01 	lds	r14, 0x015C	; 0x80015c <timeInSeconds+0x2>
     be2:	f0 90 5d 01 	lds	r15, 0x015D	; 0x80015d <timeInSeconds+0x3>
     be6:	c7 01       	movw	r24, r14
     be8:	b6 01       	movw	r22, r12
     bea:	20 e1       	ldi	r18, 0x10	; 16
     bec:	3e e0       	ldi	r19, 0x0E	; 14
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__divmodsi4>
     bf6:	30 93 0a 03 	sts	0x030A, r19	; 0x80030a <hour+0x1>
     bfa:	20 93 09 03 	sts	0x0309, r18	; 0x800309 <hour>
     bfe:	60 e1       	ldi	r22, 0x10	; 16
     c00:	7e e0       	ldi	r23, 0x0E	; 14
     c02:	62 9f       	mul	r22, r18
     c04:	c0 01       	movw	r24, r0
     c06:	63 9f       	mul	r22, r19
     c08:	90 0d       	add	r25, r0
     c0a:	72 9f       	mul	r23, r18
     c0c:	90 0d       	add	r25, r0
     c0e:	11 24       	eor	r1, r1
     c10:	c8 1a       	sub	r12, r24
     c12:	d9 0a       	sbc	r13, r25
     c14:	c6 01       	movw	r24, r12
     c16:	6c e3       	ldi	r22, 0x3C	; 60
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__divmodhi4>
     c1e:	70 93 06 03 	sts	0x0306, r23	; 0x800306 <minute+0x1>
     c22:	60 93 05 03 	sts	0x0305, r22	; 0x800305 <minute>
     c26:	2c e3       	ldi	r18, 0x3C	; 60
     c28:	26 9f       	mul	r18, r22
     c2a:	c0 01       	movw	r24, r0
     c2c:	27 9f       	mul	r18, r23
     c2e:	90 0d       	add	r25, r0
     c30:	11 24       	eor	r1, r1
     c32:	c8 1a       	sub	r12, r24
     c34:	d9 0a       	sbc	r13, r25
     c36:	d0 92 08 03 	sts	0x0308, r13	; 0x800308 <second+0x1>
     c3a:	c0 92 07 03 	sts	0x0307, r12	; 0x800307 <second>
     c3e:	64 ea       	ldi	r22, 0xA4	; 164
     c40:	72 e0       	ldi	r23, 0x02	; 2
     c42:	8e e3       	ldi	r24, 0x3E	; 62
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN5Print5printEPKc>
     c4a:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <timeInSeconds>
     c4e:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <timeInSeconds+0x1>
     c52:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <timeInSeconds+0x2>
     c56:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <timeInSeconds+0x3>
     c5a:	2a e0       	ldi	r18, 0x0A	; 10
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	8e e3       	ldi	r24, 0x3E	; 62
     c60:	93 e0       	ldi	r25, 0x03	; 3
     c62:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN5Print7printlnEli>
     c66:	8d e1       	ldi	r24, 0x1D	; 29
     c68:	93 e0       	ldi	r25, 0x03	; 3
     c6a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN13LiquidCrystal5clearEv>
     c6e:	41 e0       	ldi	r20, 0x01	; 1
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	8d e1       	ldi	r24, 0x1D	; 29
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     c7a:	6e ea       	ldi	r22, 0xAE	; 174
     c7c:	72 e0       	ldi	r23, 0x02	; 2
     c7e:	8d e1       	ldi	r24, 0x1D	; 29
     c80:	93 e0       	ldi	r25, 0x03	; 3
     c82:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN5Print5printEPKc>
     c86:	40 91 0d 03 	lds	r20, 0x030D	; 0x80030d <AverageLux>
     c8a:	50 91 0e 03 	lds	r21, 0x030E	; 0x80030e <AverageLux+0x1>
     c8e:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <AverageLux+0x2>
     c92:	70 91 10 03 	lds	r23, 0x0310	; 0x800310 <AverageLux+0x3>
     c96:	22 e0       	ldi	r18, 0x02	; 2
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	8d e1       	ldi	r24, 0x1D	; 29
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	0e 94 07 0c 	call	0x180e	; 0x180e <_ZN5Print5printEdi>
     ca2:	43 e0       	ldi	r20, 0x03	; 3
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	8d e1       	ldi	r24, 0x1D	; 29
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN13LiquidCrystal9setCursorEhh>
     cae:	6a eb       	ldi	r22, 0xBA	; 186
     cb0:	72 e0       	ldi	r23, 0x02	; 2
     cb2:	8d e1       	ldi	r24, 0x1D	; 29
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN5Print5printEPKc>
     cba:	60 91 09 03 	lds	r22, 0x0309	; 0x800309 <hour>
     cbe:	70 91 0a 03 	lds	r23, 0x030A	; 0x80030a <hour+0x1>
     cc2:	4a e0       	ldi	r20, 0x0A	; 10
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	8d e1       	ldi	r24, 0x1D	; 29
     cc8:	93 e0       	ldi	r25, 0x03	; 3
     cca:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_ZN5Print5printEii>
     cce:	61 ec       	ldi	r22, 0xC1	; 193
     cd0:	72 e0       	ldi	r23, 0x02	; 2
     cd2:	8d e1       	ldi	r24, 0x1D	; 29
     cd4:	93 e0       	ldi	r25, 0x03	; 3
     cd6:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN5Print5printEPKc>
     cda:	60 91 05 03 	lds	r22, 0x0305	; 0x800305 <minute>
     cde:	70 91 06 03 	lds	r23, 0x0306	; 0x800306 <minute+0x1>
     ce2:	4a e0       	ldi	r20, 0x0A	; 10
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	8d e1       	ldi	r24, 0x1D	; 29
     ce8:	93 e0       	ldi	r25, 0x03	; 3
     cea:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_ZN5Print5printEii>
     cee:	61 ec       	ldi	r22, 0xC1	; 193
     cf0:	72 e0       	ldi	r23, 0x02	; 2
     cf2:	8d e1       	ldi	r24, 0x1D	; 29
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN5Print5printEPKc>
     cfa:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <second>
     cfe:	70 91 08 03 	lds	r23, 0x0308	; 0x800308 <second+0x1>
     d02:	4a e0       	ldi	r20, 0x0A	; 10
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	8d e1       	ldi	r24, 0x1D	; 29
     d08:	93 e0       	ldi	r25, 0x03	; 3
     d0a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_ZN5Print5printEii>
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <TerminateTask>

00000d1a <FuncIncrementTime>:
     d1a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <timeInSeconds>
     d1e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <timeInSeconds+0x1>
     d22:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <timeInSeconds+0x2>
     d26:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <timeInSeconds+0x3>
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	a1 1d       	adc	r26, r1
     d2e:	b1 1d       	adc	r27, r1
     d30:	80 38       	cpi	r24, 0x80	; 128
     d32:	21 e5       	ldi	r18, 0x51	; 81
     d34:	92 07       	cpc	r25, r18
     d36:	21 e0       	ldi	r18, 0x01	; 1
     d38:	a2 07       	cpc	r26, r18
     d3a:	b1 05       	cpc	r27, r1
     d3c:	4c f4       	brge	.+18     	; 0xd50 <FuncIncrementTime+0x36>
     d3e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <timeInSeconds>
     d42:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <timeInSeconds+0x1>
     d46:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <timeInSeconds+0x2>
     d4a:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <timeInSeconds+0x3>
     d4e:	08 95       	ret
     d50:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <timeInSeconds>
     d54:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <timeInSeconds+0x1>
     d58:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <timeInSeconds+0x2>
     d5c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <timeInSeconds+0x3>
     d60:	08 95       	ret

00000d62 <_GLOBAL__sub_I_lcd>:
     d62:	cf 92       	push	r12
     d64:	ef 92       	push	r14
     d66:	0f 93       	push	r16
     d68:	8d e0       	ldi	r24, 0x0D	; 13
     d6a:	c8 2e       	mov	r12, r24
     d6c:	9c e0       	ldi	r25, 0x0C	; 12
     d6e:	e9 2e       	mov	r14, r25
     d70:	0b e0       	ldi	r16, 0x0B	; 11
     d72:	2a e0       	ldi	r18, 0x0A	; 10
     d74:	49 e0       	ldi	r20, 0x09	; 9
     d76:	68 e0       	ldi	r22, 0x08	; 8
     d78:	8d e1       	ldi	r24, 0x1D	; 29
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN13LiquidCrystalC1Ehhhhhh>
     d80:	8c e0       	ldi	r24, 0x0C	; 12
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN11ServoTimer2C1Ev>
     d88:	8b e0       	ldi	r24, 0x0B	; 11
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	0f 91       	pop	r16
     d8e:	ef 90       	pop	r14
     d90:	cf 90       	pop	r12
     d92:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <_ZN11ServoTimer2C1Ev>

00000d96 <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	0f 92       	push	r0
     d9e:	11 24       	eor	r1, r1
     da0:	2f 93       	push	r18
     da2:	3f 93       	push	r19
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <timer0_millis>
     db0:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <timer0_millis+0x1>
     db4:	a0 91 38 03 	lds	r26, 0x0338	; 0x800338 <timer0_millis+0x2>
     db8:	b0 91 39 03 	lds	r27, 0x0339	; 0x800339 <timer0_millis+0x3>
     dbc:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <timer0_fract>
     dc0:	23 e0       	ldi	r18, 0x03	; 3
     dc2:	23 0f       	add	r18, r19
     dc4:	2d 37       	cpi	r18, 0x7D	; 125
     dc6:	58 f5       	brcc	.+86     	; 0xe1e <__vector_16+0x88>
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	a1 1d       	adc	r26, r1
     dcc:	b1 1d       	adc	r27, r1
     dce:	20 93 35 03 	sts	0x0335, r18	; 0x800335 <timer0_fract>
     dd2:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <timer0_millis>
     dd6:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <timer0_millis+0x1>
     dda:	a0 93 38 03 	sts	0x0338, r26	; 0x800338 <timer0_millis+0x2>
     dde:	b0 93 39 03 	sts	0x0339, r27	; 0x800339 <timer0_millis+0x3>
     de2:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <timer0_overflow_count>
     de6:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <timer0_overflow_count+0x1>
     dea:	a0 91 3c 03 	lds	r26, 0x033C	; 0x80033c <timer0_overflow_count+0x2>
     dee:	b0 91 3d 03 	lds	r27, 0x033D	; 0x80033d <timer0_overflow_count+0x3>
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	a1 1d       	adc	r26, r1
     df6:	b1 1d       	adc	r27, r1
     df8:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <timer0_overflow_count>
     dfc:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <timer0_overflow_count+0x1>
     e00:	a0 93 3c 03 	sts	0x033C, r26	; 0x80033c <timer0_overflow_count+0x2>
     e04:	b0 93 3d 03 	sts	0x033D, r27	; 0x80033d <timer0_overflow_count+0x3>
     e08:	bf 91       	pop	r27
     e0a:	af 91       	pop	r26
     e0c:	9f 91       	pop	r25
     e0e:	8f 91       	pop	r24
     e10:	3f 91       	pop	r19
     e12:	2f 91       	pop	r18
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti
     e1e:	26 e8       	ldi	r18, 0x86	; 134
     e20:	23 0f       	add	r18, r19
     e22:	02 96       	adiw	r24, 0x02	; 2
     e24:	a1 1d       	adc	r26, r1
     e26:	b1 1d       	adc	r27, r1
     e28:	d2 cf       	rjmp	.-92     	; 0xdce <__vector_16+0x38>

00000e2a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     e2a:	82 30       	cpi	r24, 0x02	; 2
     e2c:	91 05       	cpc	r25, r1
     e2e:	38 f0       	brcs	.+14     	; 0xe3e <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     e38:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <delayMicroseconds+0x10>
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
     e3e:	08 95       	ret

00000e40 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e40:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e42:	84 b5       	in	r24, 0x24	; 36
     e44:	82 60       	ori	r24, 0x02	; 2
     e46:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e48:	84 b5       	in	r24, 0x24	; 36
     e4a:	81 60       	ori	r24, 0x01	; 1
     e4c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e4e:	85 b5       	in	r24, 0x25	; 37
     e50:	82 60       	ori	r24, 0x02	; 2
     e52:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     e54:	85 b5       	in	r24, 0x25	; 37
     e56:	81 60       	ori	r24, 0x01	; 1
     e58:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     e5a:	ee e6       	ldi	r30, 0x6E	; 110
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	81 60       	ori	r24, 0x01	; 1
     e62:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     e64:	e1 e8       	ldi	r30, 0x81	; 129
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     e6a:	80 81       	ld	r24, Z
     e6c:	82 60       	ori	r24, 0x02	; 2
     e6e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     e70:	80 81       	ld	r24, Z
     e72:	81 60       	ori	r24, 0x01	; 1
     e74:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e76:	e0 e8       	ldi	r30, 0x80	; 128
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	81 60       	ori	r24, 0x01	; 1
     e7e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e80:	e1 eb       	ldi	r30, 0xB1	; 177
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	84 60       	ori	r24, 0x04	; 4
     e88:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e8a:	e0 eb       	ldi	r30, 0xB0	; 176
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	81 60       	ori	r24, 0x01	; 1
     e92:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e94:	ea e7       	ldi	r30, 0x7A	; 122
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	84 60       	ori	r24, 0x04	; 4
     e9c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e9e:	80 81       	ld	r24, Z
     ea0:	82 60       	ori	r24, 0x02	; 2
     ea2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     ea4:	80 81       	ld	r24, Z
     ea6:	81 60       	ori	r24, 0x01	; 1
     ea8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     eaa:	80 81       	ld	r24, Z
     eac:	80 68       	ori	r24, 0x80	; 128
     eae:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     eb0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
#endif
}
     eb4:	08 95       	ret

00000eb6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	81 f0       	breq	.+32     	; 0xeda <turnOffPWM+0x24>
     eba:	28 f4       	brcc	.+10     	; 0xec6 <turnOffPWM+0x10>
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	99 f0       	breq	.+38     	; 0xee6 <turnOffPWM+0x30>
     ec0:	82 30       	cpi	r24, 0x02	; 2
     ec2:	a9 f0       	breq	.+42     	; 0xeee <turnOffPWM+0x38>
     ec4:	08 95       	ret
     ec6:	87 30       	cpi	r24, 0x07	; 7
     ec8:	a9 f0       	breq	.+42     	; 0xef4 <turnOffPWM+0x3e>
     eca:	88 30       	cpi	r24, 0x08	; 8
     ecc:	c9 f0       	breq	.+50     	; 0xf00 <turnOffPWM+0x4a>
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	b1 f4       	brne	.+44     	; 0xefe <turnOffPWM+0x48>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ed2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     ed6:	8f 7d       	andi	r24, 0xDF	; 223
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     eda:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     ede:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     ee0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     ee4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     ee6:	84 b5       	in	r24, 0x24	; 36
     ee8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     eea:	84 bd       	out	0x24, r24	; 36
     eec:	08 95       	ret
     eee:	84 b5       	in	r24, 0x24	; 36
     ef0:	8f 7d       	andi	r24, 0xDF	; 223
     ef2:	fb cf       	rjmp	.-10     	; 0xeea <turnOffPWM+0x34>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     ef4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     ef8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     efa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
     efe:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f00:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     f04:	8f 7d       	andi	r24, 0xDF	; 223
     f06:	f9 cf       	rjmp	.-14     	; 0xefa <turnOffPWM+0x44>

00000f08 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	fc 01       	movw	r30, r24
     f10:	e2 50       	subi	r30, 0x02	; 2
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f16:	8e 5e       	subi	r24, 0xEE	; 238
     f18:	9e 4f       	sbci	r25, 0xFE	; 254
     f1a:	fc 01       	movw	r30, r24
     f1c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f1e:	88 23       	and	r24, r24
     f20:	c9 f0       	breq	.+50     	; 0xf54 <pinMode+0x4c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	fc 01       	movw	r30, r24
     f2a:	e6 5c       	subi	r30, 0xC6	; 198
     f2c:	fe 4f       	sbci	r31, 0xFE	; 254
     f2e:	a5 91       	lpm	r26, Z+
     f30:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     f32:	fc 01       	movw	r30, r24
     f34:	e0 5d       	subi	r30, 0xD0	; 208
     f36:	fe 4f       	sbci	r31, 0xFE	; 254
     f38:	c5 91       	lpm	r28, Z+
     f3a:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     f3c:	61 11       	cpse	r22, r1
     f3e:	0d c0       	rjmp	.+26     	; 0xf5a <pinMode+0x52>
		uint8_t oldSREG = SREG;
     f40:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f42:	f8 94       	cli
		*reg &= ~bit;
     f44:	8c 91       	ld	r24, X
     f46:	20 95       	com	r18
     f48:	82 23       	and	r24, r18
     f4a:	8c 93       	st	X, r24
		*out &= ~bit;
     f4c:	88 81       	ld	r24, Y
     f4e:	28 23       	and	r18, r24
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out |= bit;
     f50:	28 83       	st	Y, r18
		SREG = oldSREG;
     f52:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     f5a:	62 30       	cpi	r22, 0x02	; 2
     f5c:	51 f4       	brne	.+20     	; 0xf72 <pinMode+0x6a>
		uint8_t oldSREG = SREG;
     f5e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f60:	f8 94       	cli
		*reg &= ~bit;
     f62:	3c 91       	ld	r19, X
     f64:	82 2f       	mov	r24, r18
     f66:	80 95       	com	r24
     f68:	83 23       	and	r24, r19
     f6a:	8c 93       	st	X, r24
		*out |= bit;
     f6c:	e8 81       	ld	r30, Y
     f6e:	2e 2b       	or	r18, r30
     f70:	ef cf       	rjmp	.-34     	; 0xf50 <pinMode+0x48>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     f72:	8f b7       	in	r24, 0x3f	; 63
                cli();
     f74:	f8 94       	cli
		*reg |= bit;
     f76:	ec 91       	ld	r30, X
     f78:	2e 2b       	or	r18, r30
     f7a:	2c 93       	st	X, r18
		SREG = oldSREG;
     f7c:	8f bf       	out	0x3f, r24	; 63
     f7e:	ea cf       	rjmp	.-44     	; 0xf54 <pinMode+0x4c>

00000f80 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	f9 01       	movw	r30, r18
     f8c:	e6 51       	subi	r30, 0x16	; 22
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f92:	f9 01       	movw	r30, r18
     f94:	e2 50       	subi	r30, 0x02	; 2
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f9a:	f9 01       	movw	r30, r18
     f9c:	ee 5e       	subi	r30, 0xEE	; 238
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     fa2:	cc 23       	and	r28, r28
     fa4:	a9 f0       	breq	.+42     	; 0xfd0 <digitalWrite+0x50>
     fa6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     fa8:	81 11       	cpse	r24, r1
     faa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <turnOffPWM>

	out = portOutputRegister(port);
     fae:	ec 2f       	mov	r30, r28
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	e0 5d       	subi	r30, 0xD0	; 208
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	a5 91       	lpm	r26, Z+
     fbc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     fbe:	8f b7       	in	r24, 0x3f	; 63
	cli();
     fc0:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     fc2:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     fc4:	11 11       	cpse	r17, r1
     fc6:	08 c0       	rjmp	.+16     	; 0xfd8 <digitalWrite+0x58>
		*out &= ~bit;
     fc8:	d0 95       	com	r29
     fca:	de 23       	and	r29, r30
	} else {
		*out |= bit;
     fcc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     fce:	8f bf       	out	0x3f, r24	; 63
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	08 95       	ret
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
     fd8:	de 2b       	or	r29, r30
     fda:	f8 cf       	rjmp	.-16     	; 0xfcc <digitalWrite+0x4c>

00000fdc <digitalRead>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	f9 01       	movw	r30, r18
     fe6:	e6 51       	subi	r30, 0x16	; 22
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     fec:	f9 01       	movw	r30, r18
     fee:	e2 50       	subi	r30, 0x02	; 2
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     ff4:	f9 01       	movw	r30, r18
     ff6:	ee 5e       	subi	r30, 0xEE	; 238
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     ffc:	cc 23       	and	r28, r28
     ffe:	a1 f0       	breq	.+40     	; 0x1028 <digitalRead+0x4c>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1000:	81 11       	cpse	r24, r1
    1002:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1006:	ec 2f       	mov	r30, r28
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	ea 5d       	subi	r30, 0xDA	; 218
    1010:	fe 4f       	sbci	r31, 0xFE	; 254
    1012:	a5 91       	lpm	r26, Z+
    1014:	b4 91       	lpm	r27, Z
    1016:	ec 91       	ld	r30, X
    1018:	ed 23       	and	r30, r29
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	09 f4       	brne	.+2      	; 0x1022 <digitalRead+0x46>
    1020:	80 e0       	ldi	r24, 0x00	; 0
	return LOW;
}
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	fa cf       	rjmp	.-12     	; 0x1022 <digitalRead+0x46>

0000102e <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    102e:	8e 30       	cpi	r24, 0x0E	; 14
    1030:	08 f0       	brcs	.+2      	; 0x1034 <analogRead+0x6>
    1032:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1034:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <analog_reference>
    1038:	90 e4       	ldi	r25, 0x40	; 64
    103a:	29 9f       	mul	r18, r25
    103c:	90 01       	movw	r18, r0
    103e:	11 24       	eor	r1, r1
    1040:	87 70       	andi	r24, 0x07	; 7
    1042:	82 2b       	or	r24, r18
    1044:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1048:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    104c:	80 64       	ori	r24, 0x40	; 64
    104e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1052:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1056:	86 fd       	sbrc	r24, 6
    1058:	fc cf       	rjmp	.-8      	; 0x1052 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    105a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    105e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    1062:	08 95       	ret

00001064 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1064:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1066:	91 8d       	ldd	r25, Z+25	; 0x19
    1068:	22 8d       	ldd	r18, Z+26	; 0x1a
    106a:	89 2f       	mov	r24, r25
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	80 5c       	subi	r24, 0xC0	; 192
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	82 1b       	sub	r24, r18
    1074:	91 09       	sbc	r25, r1
}
    1076:	8f 73       	andi	r24, 0x3F	; 63
    1078:	99 27       	eor	r25, r25
    107a:	08 95       	ret

0000107c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    107c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    107e:	91 8d       	ldd	r25, Z+25	; 0x19
    1080:	82 8d       	ldd	r24, Z+26	; 0x1a
    1082:	98 17       	cp	r25, r24
    1084:	31 f0       	breq	.+12     	; 0x1092 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1086:	82 8d       	ldd	r24, Z+26	; 0x1a
    1088:	e8 0f       	add	r30, r24
    108a:	f1 1d       	adc	r31, r1
    108c:	85 8d       	ldd	r24, Z+29	; 0x1d
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1092:	8f ef       	ldi	r24, 0xFF	; 255
    1094:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1096:	08 95       	ret

00001098 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1098:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    109a:	91 8d       	ldd	r25, Z+25	; 0x19
    109c:	82 8d       	ldd	r24, Z+26	; 0x1a
    109e:	98 17       	cp	r25, r24
    10a0:	61 f0       	breq	.+24     	; 0x10ba <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    10a2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    10a4:	ae 0f       	add	r26, r30
    10a6:	bf 2f       	mov	r27, r31
    10a8:	b1 1d       	adc	r27, r1
    10aa:	5d 96       	adiw	r26, 0x1d	; 29
    10ac:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    10ae:	92 8d       	ldd	r25, Z+26	; 0x1a
    10b0:	9f 5f       	subi	r25, 0xFF	; 255
    10b2:	9f 73       	andi	r25, 0x3F	; 63
    10b4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
    10bc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    10be:	08 95       	ret

000010c0 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    10c0:	fc 01       	movw	r30, r24
    10c2:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    10c4:	44 8d       	ldd	r20, Z+28	; 0x1c
    10c6:	25 2f       	mov	r18, r21
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	84 2f       	mov	r24, r20
    10cc:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    10ce:	82 1b       	sub	r24, r18
    10d0:	93 0b       	sbc	r25, r19
    10d2:	54 17       	cp	r21, r20
    10d4:	10 f0       	brcs	.+4      	; 0x10da <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    10d6:	cf 96       	adiw	r24, 0x3f	; 63
    10d8:	08 95       	ret
  return tail - head - 1;
    10da:	01 97       	sbiw	r24, 0x01	; 1
}
    10dc:	08 95       	ret

000010de <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    10de:	86 ec       	ldi	r24, 0xC6	; 198
    10e0:	99 e0       	ldi	r25, 0x09	; 9
    10e2:	89 2b       	or	r24, r25
    10e4:	49 f0       	breq	.+18     	; 0x10f8 <_Z14serialEventRunv+0x1a>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	89 2b       	or	r24, r25
    10ec:	29 f0       	breq	.+10     	; 0x10f8 <_Z14serialEventRunv+0x1a>
    10ee:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z17Serial0_availablev>
    10f2:	81 11       	cpse	r24, r1
    10f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    10f8:	08 95       	ret

000010fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    10fa:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    10fc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    10fe:	a8 0f       	add	r26, r24
    1100:	b9 2f       	mov	r27, r25
    1102:	b1 1d       	adc	r27, r1
    1104:	a3 5a       	subi	r26, 0xA3	; 163
    1106:	bf 4f       	sbci	r27, 0xFF	; 255
    1108:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    110a:	84 8d       	ldd	r24, Z+28	; 0x1c
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	8f 73       	andi	r24, 0x3F	; 63
    1112:	99 27       	eor	r25, r25
    1114:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1116:	a6 89       	ldd	r26, Z+22	; 0x16
    1118:	b7 89       	ldd	r27, Z+23	; 0x17
    111a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    111c:	a0 89       	ldd	r26, Z+16	; 0x10
    111e:	b1 89       	ldd	r27, Z+17	; 0x11
    1120:	8c 91       	ld	r24, X
    1122:	83 70       	andi	r24, 0x03	; 3
    1124:	80 64       	ori	r24, 0x40	; 64
    1126:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1128:	93 8d       	ldd	r25, Z+27	; 0x1b
    112a:	84 8d       	ldd	r24, Z+28	; 0x1c
    112c:	98 13       	cpse	r25, r24
    112e:	06 c0       	rjmp	.+12     	; 0x113c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1130:	02 88       	ldd	r0, Z+18	; 0x12
    1132:	f3 89       	ldd	r31, Z+19	; 0x13
    1134:	e0 2d       	mov	r30, r0
    1136:	80 81       	ld	r24, Z
    1138:	8f 7d       	andi	r24, 0xDF	; 223
    113a:	80 83       	st	Z, r24
  }
}
    113c:	08 95       	ret

0000113e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1144:	88 8d       	ldd	r24, Y+24	; 0x18
    1146:	88 23       	and	r24, r24
    1148:	b9 f0       	breq	.+46     	; 0x1178 <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    114a:	aa 89       	ldd	r26, Y+18	; 0x12
    114c:	bb 89       	ldd	r27, Y+19	; 0x13
    114e:	e8 89       	ldd	r30, Y+16	; 0x10
    1150:	f9 89       	ldd	r31, Y+17	; 0x11
    1152:	8c 91       	ld	r24, X
    1154:	85 fd       	sbrc	r24, 5
    1156:	03 c0       	rjmp	.+6      	; 0x115e <_ZN14HardwareSerial5flushEv+0x20>
    1158:	80 81       	ld	r24, Z
    115a:	86 fd       	sbrc	r24, 6
    115c:	0d c0       	rjmp	.+26     	; 0x1178 <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	07 fc       	sbrc	r0, 7
    1162:	f7 cf       	rjmp	.-18     	; 0x1152 <_ZN14HardwareSerial5flushEv+0x14>
    1164:	8c 91       	ld	r24, X
    1166:	85 ff       	sbrs	r24, 5
    1168:	f2 cf       	rjmp	.-28     	; 0x114e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    116a:	80 81       	ld	r24, Z
    116c:	85 ff       	sbrs	r24, 5
    116e:	ed cf       	rjmp	.-38     	; 0x114a <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
    1170:	ce 01       	movw	r24, r28
    1172:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1176:	e9 cf       	rjmp	.-46     	; 0x114a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	08 95       	ret

0000117e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	ec 01       	movw	r28, r24
  _written = true;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1190:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1192:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1194:	98 13       	cpse	r25, r24
    1196:	1a c0       	rjmp	.+52     	; 0x11cc <_ZN14HardwareSerial5writeEh+0x4e>
    1198:	e8 89       	ldd	r30, Y+16	; 0x10
    119a:	f9 89       	ldd	r31, Y+17	; 0x11
    119c:	80 81       	ld	r24, Z
    119e:	85 ff       	sbrs	r24, 5
    11a0:	15 c0       	rjmp	.+42     	; 0x11cc <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    11a2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11a4:	f8 94       	cli
      *_udr = c;
    11a6:	ee 89       	ldd	r30, Y+22	; 0x16
    11a8:	ff 89       	ldd	r31, Y+23	; 0x17
    11aa:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    11ac:	e8 89       	ldd	r30, Y+16	; 0x10
    11ae:	f9 89       	ldd	r31, Y+17	; 0x11
    11b0:	80 81       	ld	r24, Z
    11b2:	83 70       	andi	r24, 0x03	; 3
    11b4:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
    11b6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11b8:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	08 95       	ret
    11cc:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    11ce:	0b 8d       	ldd	r16, Y+27	; 0x1b
    11d0:	10 e0       	ldi	r17, 0x00	; 0
    11d2:	0f 5f       	subi	r16, 0xFF	; 255
    11d4:	1f 4f       	sbci	r17, 0xFF	; 255
    11d6:	0f 73       	andi	r16, 0x3F	; 63
    11d8:	11 27       	eor	r17, r17
    11da:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    11dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11de:	8e 11       	cpse	r24, r14
    11e0:	0c c0       	rjmp	.+24     	; 0x11fa <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	07 fc       	sbrc	r0, 7
    11e6:	fa cf       	rjmp	.-12     	; 0x11dc <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    11e8:	e8 89       	ldd	r30, Y+16	; 0x10
    11ea:	f9 89       	ldd	r31, Y+17	; 0x11
    11ec:	80 81       	ld	r24, Z
    11ee:	85 ff       	sbrs	r24, 5
    11f0:	f5 cf       	rjmp	.-22     	; 0x11dc <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
    11f2:	ce 01       	movw	r24, r28
    11f4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    11f8:	f1 cf       	rjmp	.-30     	; 0x11dc <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    11fa:	eb 8d       	ldd	r30, Y+27	; 0x1b
    11fc:	ec 0f       	add	r30, r28
    11fe:	fd 2f       	mov	r31, r29
    1200:	f1 1d       	adc	r31, r1
    1202:	e3 5a       	subi	r30, 0xA3	; 163
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1208:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    120a:	f8 94       	cli
    _tx_buffer_head = i;
    120c:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    120e:	ea 89       	ldd	r30, Y+18	; 0x12
    1210:	fb 89       	ldd	r31, Y+19	; 0x13
    1212:	80 81       	ld	r24, Z
    1214:	80 62       	ori	r24, 0x20	; 32
    1216:	cf cf       	rjmp	.-98     	; 0x11b6 <_ZN14HardwareSerial5writeEh+0x38>

00001218 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1218:	cf 92       	push	r12
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	ec 01       	movw	r28, r24
    1228:	6a 01       	movw	r12, r20
    122a:	7b 01       	movw	r14, r22
    122c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    122e:	e8 89       	ldd	r30, Y+16	; 0x10
    1230:	f9 89       	ldd	r31, Y+17	; 0x11
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1236:	c1 14       	cp	r12, r1
    1238:	81 ee       	ldi	r24, 0xE1	; 225
    123a:	d8 06       	cpc	r13, r24
    123c:	e1 04       	cpc	r14, r1
    123e:	f1 04       	cpc	r15, r1
    1240:	a1 f0       	breq	.+40     	; 0x126a <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	79 e0       	ldi	r23, 0x09	; 9
    1246:	8d e3       	ldi	r24, 0x3D	; 61
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	a7 01       	movw	r20, r14
    124c:	96 01       	movw	r18, r12
    124e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__udivmodsi4>
    1252:	21 50       	subi	r18, 0x01	; 1
    1254:	31 09       	sbc	r19, r1
    1256:	41 09       	sbc	r20, r1
    1258:	51 09       	sbc	r21, r1
    125a:	56 95       	lsr	r21
    125c:	47 95       	ror	r20
    125e:	37 95       	ror	r19
    1260:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1262:	21 15       	cp	r18, r1
    1264:	80 e1       	ldi	r24, 0x10	; 16
    1266:	38 07       	cpc	r19, r24
    1268:	98 f0       	brcs	.+38     	; 0x1290 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    126a:	e8 89       	ldd	r30, Y+16	; 0x10
    126c:	f9 89       	ldd	r31, Y+17	; 0x11
    126e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1270:	60 e8       	ldi	r22, 0x80	; 128
    1272:	74 e8       	ldi	r23, 0x84	; 132
    1274:	8e e1       	ldi	r24, 0x1E	; 30
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a7 01       	movw	r20, r14
    127a:	96 01       	movw	r18, r12
    127c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__udivmodsi4>
    1280:	21 50       	subi	r18, 0x01	; 1
    1282:	31 09       	sbc	r19, r1
    1284:	41 09       	sbc	r20, r1
    1286:	51 09       	sbc	r21, r1
    1288:	56 95       	lsr	r21
    128a:	47 95       	ror	r20
    128c:	37 95       	ror	r19
    128e:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1290:	ec 85       	ldd	r30, Y+12	; 0x0c
    1292:	fd 85       	ldd	r31, Y+13	; 0x0d
    1294:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1296:	ee 85       	ldd	r30, Y+14	; 0x0e
    1298:	ff 85       	ldd	r31, Y+15	; 0x0f
    129a:	20 83       	st	Z, r18

  _written = false;
    129c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    129e:	ec 89       	ldd	r30, Y+20	; 0x14
    12a0:	fd 89       	ldd	r31, Y+21	; 0x15
    12a2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    12a4:	ea 89       	ldd	r30, Y+18	; 0x12
    12a6:	fb 89       	ldd	r31, Y+19	; 0x13
    12a8:	80 81       	ld	r24, Z
    12aa:	80 61       	ori	r24, 0x10	; 16
    12ac:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    12ae:	ea 89       	ldd	r30, Y+18	; 0x12
    12b0:	fb 89       	ldd	r31, Y+19	; 0x13
    12b2:	80 81       	ld	r24, Z
    12b4:	88 60       	ori	r24, 0x08	; 8
    12b6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    12b8:	ea 89       	ldd	r30, Y+18	; 0x12
    12ba:	fb 89       	ldd	r31, Y+19	; 0x13
    12bc:	80 81       	ld	r24, Z
    12be:	80 68       	ori	r24, 0x80	; 128
    12c0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    12c2:	ea 89       	ldd	r30, Y+18	; 0x12
    12c4:	fb 89       	ldd	r31, Y+19	; 0x13
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 7d       	andi	r24, 0xDF	; 223
    12ca:	80 83       	st	Z, r24
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	08 95       	ret

000012dc <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	0f 92       	push	r0
    12e4:	11 24       	eor	r1, r1
    12e6:	2f 93       	push	r18
    12e8:	8f 93       	push	r24
    12ea:	9f 93       	push	r25
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    12f0:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <Serial+0x10>
    12f4:	f0 91 4f 03 	lds	r31, 0x034F	; 0x80034f <Serial+0x11>
    12f8:	80 81       	ld	r24, Z
    12fa:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <Serial+0x16>
    12fe:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <Serial+0x17>
    1302:	82 fd       	sbrc	r24, 2
    1304:	1b c0       	rjmp	.+54     	; 0x133c <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1306:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1308:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <Serial+0x19>
    130c:	8f 5f       	subi	r24, 0xFF	; 255
    130e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1310:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <Serial+0x1a>
    1314:	82 17       	cp	r24, r18
    1316:	41 f0       	breq	.+16     	; 0x1328 <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
    1318:	e0 91 57 03 	lds	r30, 0x0357	; 0x800357 <Serial+0x19>
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	e2 5c       	subi	r30, 0xC2	; 194
    1320:	fc 4f       	sbci	r31, 0xFC	; 252
    1322:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1324:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <Serial+0x19>
    Serial._rx_complete_irq();
  }
    1328:	ff 91       	pop	r31
    132a:	ef 91       	pop	r30
    132c:	9f 91       	pop	r25
    132e:	8f 91       	pop	r24
    1330:	2f 91       	pop	r18
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    133c:	80 81       	ld	r24, Z
    133e:	f4 cf       	rjmp	.-24     	; 0x1328 <__vector_18+0x4c>

00001340 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1362:	8e e3       	ldi	r24, 0x3E	; 62
    1364:	93 e0       	ldi	r25, 0x03	; 3
    1366:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    136a:	ff 91       	pop	r31
    136c:	ef 91       	pop	r30
    136e:	bf 91       	pop	r27
    1370:	af 91       	pop	r26
    1372:	9f 91       	pop	r25
    1374:	8f 91       	pop	r24
    1376:	7f 91       	pop	r23
    1378:	6f 91       	pop	r22
    137a:	5f 91       	pop	r21
    137c:	4f 91       	pop	r20
    137e:	3f 91       	pop	r19
    1380:	2f 91       	pop	r18
    1382:	0f 90       	pop	r0
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	0f 90       	pop	r0
    1388:	1f 90       	pop	r1
    138a:	18 95       	reti

0000138c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    138c:	8e e3       	ldi	r24, 0x3E	; 62
    138e:	93 e0       	ldi	r25, 0x03	; 3
    1390:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN14HardwareSerial9availableEv>
    1394:	21 e0       	ldi	r18, 0x01	; 1
    1396:	89 2b       	or	r24, r25
    1398:	09 f4       	brne	.+2      	; 0x139c <_Z17Serial0_availablev+0x10>
    139a:	20 e0       	ldi	r18, 0x00	; 0
}
    139c:	82 2f       	mov	r24, r18
    139e:	08 95       	ret

000013a0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    13a0:	ee e3       	ldi	r30, 0x3E	; 62
    13a2:	f3 e0       	ldi	r31, 0x03	; 3
    13a4:	13 82       	std	Z+3, r1	; 0x03
    13a6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    13a8:	88 ee       	ldi	r24, 0xE8	; 232
    13aa:	93 e0       	ldi	r25, 0x03	; 3
    13ac:	a0 e0       	ldi	r26, 0x00	; 0
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	84 83       	std	Z+4, r24	; 0x04
    13b2:	95 83       	std	Z+5, r25	; 0x05
    13b4:	a6 83       	std	Z+6, r26	; 0x06
    13b6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    13b8:	89 ec       	ldi	r24, 0xC9	; 201
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	80 83       	st	Z, r24
    13c0:	85 ec       	ldi	r24, 0xC5	; 197
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	95 87       	std	Z+13, r25	; 0x0d
    13c6:	84 87       	std	Z+12, r24	; 0x0c
    13c8:	84 ec       	ldi	r24, 0xC4	; 196
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	97 87       	std	Z+15, r25	; 0x0f
    13ce:	86 87       	std	Z+14, r24	; 0x0e
    13d0:	80 ec       	ldi	r24, 0xC0	; 192
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	91 8b       	std	Z+17, r25	; 0x11
    13d6:	80 8b       	std	Z+16, r24	; 0x10
    13d8:	81 ec       	ldi	r24, 0xC1	; 193
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	93 8b       	std	Z+19, r25	; 0x13
    13de:	82 8b       	std	Z+18, r24	; 0x12
    13e0:	82 ec       	ldi	r24, 0xC2	; 194
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	95 8b       	std	Z+21, r25	; 0x15
    13e6:	84 8b       	std	Z+20, r24	; 0x14
    13e8:	86 ec       	ldi	r24, 0xC6	; 198
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	97 8b       	std	Z+23, r25	; 0x17
    13ee:	86 8b       	std	Z+22, r24	; 0x16
    13f0:	11 8e       	std	Z+25, r1	; 0x19
    13f2:	12 8e       	std	Z+26, r1	; 0x1a
    13f4:	13 8e       	std	Z+27, r1	; 0x1b
    13f6:	14 8e       	std	Z+28, r1	; 0x1c
    13f8:	08 95       	ret

000013fa <_ZN5Print5writeEPKhj>:
    13fa:	af 92       	push	r10
    13fc:	bf 92       	push	r11
    13fe:	cf 92       	push	r12
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	6c 01       	movw	r12, r24
    1410:	7b 01       	movw	r14, r22
    1412:	8b 01       	movw	r16, r22
    1414:	04 0f       	add	r16, r20
    1416:	15 1f       	adc	r17, r21
    1418:	eb 01       	movw	r28, r22
    141a:	5e 01       	movw	r10, r28
    141c:	ae 18       	sub	r10, r14
    141e:	bf 08       	sbc	r11, r15
    1420:	c0 17       	cp	r28, r16
    1422:	d1 07       	cpc	r29, r17
    1424:	59 f0       	breq	.+22     	; 0x143c <_ZN5Print5writeEPKhj+0x42>
    1426:	69 91       	ld	r22, Y+
    1428:	d6 01       	movw	r26, r12
    142a:	ed 91       	ld	r30, X+
    142c:	fc 91       	ld	r31, X
    142e:	01 90       	ld	r0, Z+
    1430:	f0 81       	ld	r31, Z
    1432:	e0 2d       	mov	r30, r0
    1434:	c6 01       	movw	r24, r12
    1436:	09 95       	icall
    1438:	89 2b       	or	r24, r25
    143a:	79 f7       	brne	.-34     	; 0x141a <_ZN5Print5writeEPKhj+0x20>
    143c:	c5 01       	movw	r24, r10
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	df 90       	pop	r13
    144c:	cf 90       	pop	r12
    144e:	bf 90       	pop	r11
    1450:	af 90       	pop	r10
    1452:	08 95       	ret

00001454 <_ZN5Print5writeEPKc.part.2>:
    1454:	fb 01       	movw	r30, r22
    1456:	01 90       	ld	r0, Z+
    1458:	00 20       	and	r0, r0
    145a:	e9 f7       	brne	.-6      	; 0x1456 <_ZN5Print5writeEPKc.part.2+0x2>
    145c:	31 97       	sbiw	r30, 0x01	; 1
    145e:	af 01       	movw	r20, r30
    1460:	46 1b       	sub	r20, r22
    1462:	57 0b       	sbc	r21, r23
    1464:	dc 01       	movw	r26, r24
    1466:	ed 91       	ld	r30, X+
    1468:	fc 91       	ld	r31, X
    146a:	02 80       	ldd	r0, Z+2	; 0x02
    146c:	f3 81       	ldd	r31, Z+3	; 0x03
    146e:	e0 2d       	mov	r30, r0
    1470:	09 94       	ijmp

00001472 <_ZN5Print5printEPKc>:
    1472:	61 15       	cp	r22, r1
    1474:	71 05       	cpc	r23, r1
    1476:	11 f0       	breq	.+4      	; 0x147c <_ZN5Print5printEPKc+0xa>
    1478:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <_ZN5Print5writeEPKc.part.2>
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	08 95       	ret

00001482 <_ZN5Print5printEc>:
    1482:	dc 01       	movw	r26, r24
    1484:	ed 91       	ld	r30, X+
    1486:	fc 91       	ld	r31, X
    1488:	01 90       	ld	r0, Z+
    148a:	f0 81       	ld	r31, Z
    148c:	e0 2d       	mov	r30, r0
    148e:	09 94       	ijmp

00001490 <_ZN5Print7printlnEv>:
    1490:	63 e8       	ldi	r22, 0x83	; 131
    1492:	71 e0       	ldi	r23, 0x01	; 1
    1494:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <_ZN5Print5writeEPKc.part.2>

00001498 <_ZN5Print7printlnEPKc>:
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	8c 01       	movw	r16, r24
    14a2:	d0 e0       	ldi	r29, 0x00	; 0
    14a4:	c0 e0       	ldi	r28, 0x00	; 0
    14a6:	61 15       	cp	r22, r1
    14a8:	71 05       	cpc	r23, r1
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <_ZN5Print7printlnEPKc+0x1a>
    14ac:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN5Print5writeEPKc.part.2>
    14b0:	ec 01       	movw	r28, r24
    14b2:	c8 01       	movw	r24, r16
    14b4:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN5Print7printlnEv>
    14b8:	8c 0f       	add	r24, r28
    14ba:	9d 1f       	adc	r25, r29
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	08 95       	ret

000014c6 <_ZN5Print11printNumberEmh>:
    14c6:	8f 92       	push	r8
    14c8:	9f 92       	push	r9
    14ca:	af 92       	push	r10
    14cc:	bf 92       	push	r11
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	a1 97       	sbiw	r28, 0x21	; 33
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	7c 01       	movw	r14, r24
    14ec:	fa 01       	movw	r30, r20
    14ee:	cb 01       	movw	r24, r22
    14f0:	19 a2       	std	Y+33, r1	; 0x21
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	08 f4       	brcc	.+2      	; 0x14f8 <_ZN5Print11printNumberEmh+0x32>
    14f6:	2a e0       	ldi	r18, 0x0A	; 10
    14f8:	8e 01       	movw	r16, r28
    14fa:	0f 5d       	subi	r16, 0xDF	; 223
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	82 2e       	mov	r8, r18
    1500:	91 2c       	mov	r9, r1
    1502:	b1 2c       	mov	r11, r1
    1504:	a1 2c       	mov	r10, r1
    1506:	bf 01       	movw	r22, r30
    1508:	a5 01       	movw	r20, r10
    150a:	94 01       	movw	r18, r8
    150c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__udivmodsi4>
    1510:	f9 01       	movw	r30, r18
    1512:	ca 01       	movw	r24, r20
    1514:	6a 30       	cpi	r22, 0x0A	; 10
    1516:	0c f5       	brge	.+66     	; 0x155a <_ZN5Print11printNumberEmh+0x94>
    1518:	60 5d       	subi	r22, 0xD0	; 208
    151a:	d8 01       	movw	r26, r16
    151c:	6e 93       	st	-X, r22
    151e:	8d 01       	movw	r16, r26
    1520:	23 2b       	or	r18, r19
    1522:	24 2b       	or	r18, r20
    1524:	25 2b       	or	r18, r21
    1526:	79 f7       	brne	.-34     	; 0x1506 <_ZN5Print11printNumberEmh+0x40>
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	10 97       	sbiw	r26, 0x00	; 0
    152e:	21 f0       	breq	.+8      	; 0x1538 <_ZN5Print11printNumberEmh+0x72>
    1530:	bd 01       	movw	r22, r26
    1532:	c7 01       	movw	r24, r14
    1534:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN5Print5writeEPKc.part.2>
    1538:	a1 96       	adiw	r28, 0x21	; 33
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	9f 90       	pop	r9
    1556:	8f 90       	pop	r8
    1558:	08 95       	ret
    155a:	69 5c       	subi	r22, 0xC9	; 201
    155c:	de cf       	rjmp	.-68     	; 0x151a <_ZN5Print11printNumberEmh+0x54>

0000155e <_ZN5Print5printEli>:
    155e:	cf 92       	push	r12
    1560:	df 92       	push	r13
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	21 15       	cp	r18, r1
    1570:	31 05       	cpc	r19, r1
    1572:	81 f4       	brne	.+32     	; 0x1594 <_ZN5Print5printEli+0x36>
    1574:	dc 01       	movw	r26, r24
    1576:	ed 91       	ld	r30, X+
    1578:	fc 91       	ld	r31, X
    157a:	01 90       	ld	r0, Z+
    157c:	f0 81       	ld	r31, Z
    157e:	e0 2d       	mov	r30, r0
    1580:	64 2f       	mov	r22, r20
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	09 94       	ijmp
    1594:	2a 30       	cpi	r18, 0x0A	; 10
    1596:	31 05       	cpc	r19, r1
    1598:	01 f5       	brne	.+64     	; 0x15da <_ZN5Print5printEli+0x7c>
    159a:	2a e0       	ldi	r18, 0x0A	; 10
    159c:	77 ff       	sbrs	r23, 7
    159e:	1d c0       	rjmp	.+58     	; 0x15da <_ZN5Print5printEli+0x7c>
    15a0:	6a 01       	movw	r12, r20
    15a2:	7b 01       	movw	r14, r22
    15a4:	ec 01       	movw	r28, r24
    15a6:	6d e2       	ldi	r22, 0x2D	; 45
    15a8:	0e 94 41 0a 	call	0x1482	; 0x1482 <_ZN5Print5printEc>
    15ac:	8c 01       	movw	r16, r24
    15ae:	44 27       	eor	r20, r20
    15b0:	55 27       	eor	r21, r21
    15b2:	ba 01       	movw	r22, r20
    15b4:	4c 19       	sub	r20, r12
    15b6:	5d 09       	sbc	r21, r13
    15b8:	6e 09       	sbc	r22, r14
    15ba:	7f 09       	sbc	r23, r15
    15bc:	2a e0       	ldi	r18, 0x0A	; 10
    15be:	ce 01       	movw	r24, r28
    15c0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print11printNumberEmh>
    15c4:	80 0f       	add	r24, r16
    15c6:	91 1f       	adc	r25, r17
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	ff 90       	pop	r15
    15d2:	ef 90       	pop	r14
    15d4:	df 90       	pop	r13
    15d6:	cf 90       	pop	r12
    15d8:	08 95       	ret
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	df 90       	pop	r13
    15e8:	cf 90       	pop	r12
    15ea:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <_ZN5Print11printNumberEmh>

000015ee <_ZN5Print5printEii>:
    15ee:	9a 01       	movw	r18, r20
    15f0:	ab 01       	movw	r20, r22
    15f2:	77 0f       	add	r23, r23
    15f4:	66 0b       	sbc	r22, r22
    15f6:	77 0b       	sbc	r23, r23
    15f8:	0c 94 af 0a 	jmp	0x155e	; 0x155e <_ZN5Print5printEli>

000015fc <_ZN5Print7printlnEli>:
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	ec 01       	movw	r28, r24
    1606:	0e 94 af 0a 	call	0x155e	; 0x155e <_ZN5Print5printEli>
    160a:	8c 01       	movw	r16, r24
    160c:	ce 01       	movw	r24, r28
    160e:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN5Print7printlnEv>
    1612:	80 0f       	add	r24, r16
    1614:	91 1f       	adc	r25, r17
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	08 95       	ret

00001620 <_ZN5Print5printEmi>:
    1620:	21 15       	cp	r18, r1
    1622:	31 05       	cpc	r19, r1
    1624:	41 f4       	brne	.+16     	; 0x1636 <_ZN5Print5printEmi+0x16>
    1626:	dc 01       	movw	r26, r24
    1628:	ed 91       	ld	r30, X+
    162a:	fc 91       	ld	r31, X
    162c:	01 90       	ld	r0, Z+
    162e:	f0 81       	ld	r31, Z
    1630:	e0 2d       	mov	r30, r0
    1632:	64 2f       	mov	r22, r20
    1634:	09 94       	ijmp
    1636:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <_ZN5Print11printNumberEmh>

0000163a <_ZN5Print5printEji>:
    163a:	9a 01       	movw	r18, r20
    163c:	ab 01       	movw	r20, r22
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <_ZN5Print5printEmi>

00001646 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1646:	2f 92       	push	r2
    1648:	3f 92       	push	r3
    164a:	4f 92       	push	r4
    164c:	5f 92       	push	r5
    164e:	6f 92       	push	r6
    1650:	7f 92       	push	r7
    1652:	8f 92       	push	r8
    1654:	9f 92       	push	r9
    1656:	af 92       	push	r10
    1658:	bf 92       	push	r11
    165a:	cf 92       	push	r12
    165c:	df 92       	push	r13
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ec 01       	movw	r28, r24
    166a:	6a 01       	movw	r12, r20
    166c:	7b 01       	movw	r14, r22
    166e:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1670:	ab 01       	movw	r20, r22
    1672:	96 01       	movw	r18, r12
    1674:	cb 01       	movw	r24, r22
    1676:	b6 01       	movw	r22, r12
    1678:	0e 94 56 15 	call	0x2aac	; 0x2aac <__unordsf2>
    167c:	67 ed       	ldi	r22, 0xD7	; 215
    167e:	72 e0       	ldi	r23, 0x02	; 2
    1680:	81 11       	cpse	r24, r1
    1682:	26 c0       	rjmp	.+76     	; 0x16d0 <_ZN5Print10printFloatEdh+0x8a>
  if (isinf(number)) return print("inf");
    1684:	46 01       	movw	r8, r12
    1686:	57 01       	movw	r10, r14
    1688:	e8 94       	clt
    168a:	b7 f8       	bld	r11, 7
    168c:	2f ef       	ldi	r18, 0xFF	; 255
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	5f e7       	ldi	r21, 0x7F	; 127
    1694:	c5 01       	movw	r24, r10
    1696:	b4 01       	movw	r22, r8
    1698:	0e 94 56 15 	call	0x2aac	; 0x2aac <__unordsf2>
    169c:	81 11       	cpse	r24, r1
    169e:	0c c0       	rjmp	.+24     	; 0x16b8 <_ZN5Print10printFloatEdh+0x72>
    16a0:	2f ef       	ldi	r18, 0xFF	; 255
    16a2:	3f ef       	ldi	r19, 0xFF	; 255
    16a4:	4f e7       	ldi	r20, 0x7F	; 127
    16a6:	5f e7       	ldi	r21, 0x7F	; 127
    16a8:	c5 01       	movw	r24, r10
    16aa:	b4 01       	movw	r22, r8
    16ac:	0e 94 3c 13 	call	0x2678	; 0x2678 <__cmpsf2>
    16b0:	6b ed       	ldi	r22, 0xDB	; 219
    16b2:	72 e0       	ldi	r23, 0x02	; 2
    16b4:	18 16       	cp	r1, r24
    16b6:	64 f0       	brlt	.+24     	; 0x16d0 <_ZN5Print10printFloatEdh+0x8a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    16b8:	2f ef       	ldi	r18, 0xFF	; 255
    16ba:	3f ef       	ldi	r19, 0xFF	; 255
    16bc:	4f e7       	ldi	r20, 0x7F	; 127
    16be:	5f e4       	ldi	r21, 0x4F	; 79
    16c0:	c7 01       	movw	r24, r14
    16c2:	b6 01       	movw	r22, r12
    16c4:	0e 94 94 14 	call	0x2928	; 0x2928 <__gesf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	b4 f4       	brge	.+44     	; 0x16f8 <_ZN5Print10printFloatEdh+0xb2>
    16cc:	6f ed       	ldi	r22, 0xDF	; 223
    16ce:	72 e0       	ldi	r23, 0x02	; 2
    16d0:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	df 90       	pop	r13
    16de:	cf 90       	pop	r12
    16e0:	bf 90       	pop	r11
    16e2:	af 90       	pop	r10
    16e4:	9f 90       	pop	r9
    16e6:	8f 90       	pop	r8
    16e8:	7f 90       	pop	r7
    16ea:	6f 90       	pop	r6
    16ec:	5f 90       	pop	r5
    16ee:	4f 90       	pop	r4
    16f0:	3f 90       	pop	r3
    16f2:	2f 90       	pop	r2
    16f4:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <_ZN5Print5writeEPKc.part.2>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    16f8:	2f ef       	ldi	r18, 0xFF	; 255
    16fa:	3f ef       	ldi	r19, 0xFF	; 255
    16fc:	4f e7       	ldi	r20, 0x7F	; 127
    16fe:	5f ec       	ldi	r21, 0xCF	; 207
    1700:	c7 01       	movw	r24, r14
    1702:	b6 01       	movw	r22, r12
    1704:	0e 94 3c 13 	call	0x2678	; 0x2678 <__cmpsf2>
    1708:	87 fd       	sbrc	r24, 7
    170a:	e0 cf       	rjmp	.-64     	; 0x16cc <_ZN5Print10printFloatEdh+0x86>
  
  // Handle negative numbers
  if (number < 0.0)
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	a9 01       	movw	r20, r18
    1712:	c7 01       	movw	r24, r14
    1714:	b6 01       	movw	r22, r12
    1716:	0e 94 3c 13 	call	0x2678	; 0x2678 <__cmpsf2>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    171a:	31 2c       	mov	r3, r1
    171c:	21 2c       	mov	r2, r1
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    171e:	87 ff       	sbrs	r24, 7
    1720:	09 c0       	rjmp	.+18     	; 0x1734 <_ZN5Print10printFloatEdh+0xee>
  {
     n += print('-');
    1722:	6d e2       	ldi	r22, 0x2D	; 45
    1724:	ce 01       	movw	r24, r28
    1726:	0e 94 41 0a 	call	0x1482	; 0x1482 <_ZN5Print5printEc>
    172a:	1c 01       	movw	r2, r24
     number = -number;
    172c:	f7 fa       	bst	r15, 7
    172e:	f0 94       	com	r15
    1730:	f7 f8       	bld	r15, 7
    1732:	f0 94       	com	r15
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1734:	10 e0       	ldi	r17, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    173e:	71 16       	cp	r7, r17
    1740:	41 f0       	breq	.+16     	; 0x1752 <_ZN5Print10printFloatEdh+0x10c>
    rounding /= 10.0;
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e2       	ldi	r20, 0x20	; 32
    1748:	51 e4       	ldi	r21, 0x41	; 65
    174a:	0e 94 41 13 	call	0x2682	; 0x2682 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    174e:	1f 5f       	subi	r17, 0xFF	; 255
    1750:	f6 cf       	rjmp	.-20     	; 0x173e <_ZN5Print10printFloatEdh+0xf8>
    rounding /= 10.0;
  
  number += rounding;
    1752:	a7 01       	movw	r20, r14
    1754:	96 01       	movw	r18, r12
    1756:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__addsf3>
    175a:	2b 01       	movw	r4, r22
    175c:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    175e:	0e 94 b3 13 	call	0x2766	; 0x2766 <__fixunssfsi>
    1762:	4b 01       	movw	r8, r22
    1764:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1766:	2a e0       	ldi	r18, 0x0A	; 10
    1768:	bc 01       	movw	r22, r24
    176a:	a4 01       	movw	r20, r8
    176c:	ce 01       	movw	r24, r28
    176e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1772:	7c 01       	movw	r14, r24
    1774:	e2 0c       	add	r14, r2
    1776:	f3 1c       	adc	r15, r3

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1778:	11 23       	and	r17, r17
    177a:	b1 f1       	breq	.+108    	; 0x17e8 <_ZN5Print10printFloatEdh+0x1a2>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    177c:	c5 01       	movw	r24, r10
    177e:	b4 01       	movw	r22, r8
    1780:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__floatunsisf>
    1784:	9b 01       	movw	r18, r22
    1786:	ac 01       	movw	r20, r24
    1788:	c3 01       	movw	r24, r6
    178a:	b2 01       	movw	r22, r4
    178c:	0e 94 cf 12 	call	0x259e	; 0x259e <__subsf3>
    1790:	4b 01       	movw	r8, r22
    1792:	5c 01       	movw	r10, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1794:	6e e2       	ldi	r22, 0x2E	; 46
    1796:	ce 01       	movw	r24, r28
    1798:	0e 94 41 0a 	call	0x1482	; 0x1482 <_ZN5Print5printEc>
    179c:	e8 0e       	add	r14, r24
    179e:	f9 1e       	adc	r15, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    17a0:	11 50       	subi	r17, 0x01	; 1
    17a2:	10 f1       	brcs	.+68     	; 0x17e8 <_ZN5Print10printFloatEdh+0x1a2>
  {
    remainder *= 10.0;
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	51 e4       	ldi	r21, 0x41	; 65
    17ac:	c5 01       	movw	r24, r10
    17ae:	b4 01       	movw	r22, r8
    17b0:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsf3>
    17b4:	2b 01       	movw	r4, r22
    17b6:	3c 01       	movw	r6, r24
    unsigned int toPrint = (unsigned int)(remainder);
    17b8:	0e 94 b3 13 	call	0x2766	; 0x2766 <__fixunssfsi>
    17bc:	4b 01       	movw	r8, r22
    n += print(toPrint);
    17be:	4a e0       	ldi	r20, 0x0A	; 10
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	ce 01       	movw	r24, r28
    17c4:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN5Print5printEji>
    17c8:	e8 0e       	add	r14, r24
    17ca:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    17cc:	b4 01       	movw	r22, r8
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__floatunsisf>
    17d6:	9b 01       	movw	r18, r22
    17d8:	ac 01       	movw	r20, r24
    17da:	c3 01       	movw	r24, r6
    17dc:	b2 01       	movw	r22, r4
    17de:	0e 94 cf 12 	call	0x259e	; 0x259e <__subsf3>
    17e2:	4b 01       	movw	r8, r22
    17e4:	5c 01       	movw	r10, r24
    17e6:	dc cf       	rjmp	.-72     	; 0x17a0 <_ZN5Print10printFloatEdh+0x15a>
  } 
  
  return n;
}
    17e8:	c7 01       	movw	r24, r14
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	df 90       	pop	r13
    17f6:	cf 90       	pop	r12
    17f8:	bf 90       	pop	r11
    17fa:	af 90       	pop	r10
    17fc:	9f 90       	pop	r9
    17fe:	8f 90       	pop	r8
    1800:	7f 90       	pop	r7
    1802:	6f 90       	pop	r6
    1804:	5f 90       	pop	r5
    1806:	4f 90       	pop	r4
    1808:	3f 90       	pop	r3
    180a:	2f 90       	pop	r2
    180c:	08 95       	ret

0000180e <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    180e:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <_ZN5Print10printFloatEdh>

00001812 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    181c:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN5Print10printFloatEdh>
    1820:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1822:	ce 01       	movw	r24, r28
    1824:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN5Print7printlnEv>
  return n;
}
    1828:	80 0f       	add	r24, r16
    182a:	91 1f       	adc	r25, r17
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	08 95       	ret

00001836 <StartOS>:
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetAlarmBase);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    1836:	4f 92       	push	r4
    1838:	5f 92       	push	r5
    183a:	6f 92       	push	r6
    183c:	7f 92       	push	r7
    183e:	8f 92       	push	r8
    1840:	9f 92       	push	r9
    1842:	af 92       	push	r10
    1844:	bf 92       	push	r11
    1846:	cf 92       	push	r12
    1848:	df 92       	push	r13
    184a:	ef 92       	push	r14
    184c:	ff 92       	push	r15
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	00 d0       	rcall	.+0      	; 0x1858 <StartOS+0x22>
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	00 91 c1 01 	lds	r16, 0x01C1	; 0x8001c1 <CDB>
    1860:	10 91 c2 01 	lds	r17, 0x01C2	; 0x8001c2 <CDB+0x1>
    1864:	9f b7       	in	r25, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	d8 01       	movw	r26, r16
    186a:	18 96       	adiw	r26, 0x08	; 8
    186c:	2d 91       	ld	r18, X+
    186e:	3c 91       	ld	r19, X
    1870:	23 2b       	or	r18, r19
    1872:	09 f0       	breq	.+2      	; 0x1876 <StartOS+0x40>
    1874:	a4 c0       	rjmp	.+328    	; 0x19be <StartOS+0x188>
    1876:	88 2e       	mov	r8, r24
    1878:	88 ea       	ldi	r24, 0xA8	; 168
    187a:	90 e1       	ldi	r25, 0x10	; 16
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <osEE_avr8_system_timer_init>
    1884:	a0 90 c5 01 	lds	r10, 0x01C5	; 0x8001c5 <CDB+0x4>
    1888:	b0 90 c6 01 	lds	r11, 0x01C6	; 0x8001c6 <CDB+0x5>
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	f8 01       	movw	r30, r16
    1892:	91 87       	std	Z+9, r25	; 0x09
    1894:	80 87       	std	Z+8, r24	; 0x08
    1896:	82 86       	std	Z+10, r8	; 0x0a
    1898:	e0 90 cd 01 	lds	r14, 0x01CD	; 0x8001cd <CDB+0xc>
    189c:	f0 90 ce 01 	lds	r15, 0x01CE	; 0x8001ce <CDB+0xd>
    18a0:	d1 2c       	mov	r13, r1
    18a2:	c1 2c       	mov	r12, r1
    18a4:	f4 e0       	ldi	r31, 0x04	; 4
    18a6:	8f 9e       	mul	r8, r31
    18a8:	40 01       	movw	r8, r0
    18aa:	11 24       	eor	r1, r1
    18ac:	e8 0c       	add	r14, r8
    18ae:	f9 1c       	adc	r15, r9
    18b0:	37 01       	movw	r6, r14
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	68 0e       	add	r6, r24
    18b6:	71 1c       	adc	r7, r1
    18b8:	46 e0       	ldi	r20, 0x06	; 6
    18ba:	54 2e       	mov	r5, r20
    18bc:	f3 01       	movw	r30, r6
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	c8 16       	cp	r12, r24
    18c4:	d9 06       	cpc	r13, r25
    18c6:	e0 f1       	brcs	.+120    	; 0x1940 <StartOS+0x10a>
    18c8:	e0 90 c9 01 	lds	r14, 0x01C9	; 0x8001c9 <CDB+0x8>
    18cc:	f0 90 ca 01 	lds	r15, 0x01CA	; 0x8001ca <CDB+0x9>
    18d0:	38 01       	movw	r6, r16
    18d2:	f2 e0       	ldi	r31, 0x02	; 2
    18d4:	6f 0e       	add	r6, r31
    18d6:	71 1c       	adc	r7, r1
    18d8:	d1 2c       	mov	r13, r1
    18da:	c1 2c       	mov	r12, r1
    18dc:	e8 0c       	add	r14, r8
    18de:	f9 1c       	adc	r15, r9
    18e0:	27 01       	movw	r4, r14
    18e2:	82 e0       	ldi	r24, 0x02	; 2
    18e4:	48 0e       	add	r4, r24
    18e6:	51 1c       	adc	r5, r1
    18e8:	88 24       	eor	r8, r8
    18ea:	83 94       	inc	r8
    18ec:	91 2c       	mov	r9, r1
    18ee:	f2 01       	movw	r30, r4
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	c8 16       	cp	r12, r24
    18f6:	d9 06       	cpc	r13, r25
    18f8:	e8 f1       	brcs	.+122    	; 0x1974 <StartOS+0x13e>
    18fa:	d8 01       	movw	r26, r16
    18fc:	18 96       	adiw	r26, 0x08	; 8
    18fe:	8d 91       	ld	r24, X+
    1900:	9c 91       	ld	r25, X
    1902:	19 97       	sbiw	r26, 0x09	; 9
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	31 f4       	brne	.+12     	; 0x1914 <StartOS+0xde>
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	19 96       	adiw	r26, 0x09	; 9
    190e:	9c 93       	st	X, r25
    1910:	8e 93       	st	-X, r24
    1912:	18 97       	sbiw	r26, 0x08	; 8
    1914:	f8 01       	movw	r30, r16
    1916:	80 85       	ldd	r24, Z+8	; 0x08
    1918:	91 85       	ldd	r25, Z+9	; 0x09
    191a:	02 97       	sbiw	r24, 0x02	; 2
    191c:	41 f4       	brne	.+16     	; 0x192e <StartOS+0xf8>
    191e:	d5 01       	movw	r26, r10
    1920:	12 96       	adiw	r26, 0x02	; 2
    1922:	6d 91       	ld	r22, X+
    1924:	7c 91       	ld	r23, X
    1926:	ab 01       	movw	r20, r22
    1928:	c5 01       	movw	r24, r10
    192a:	0e 94 16 01 	call	0x22c	; 0x22c <osEE_hal_save_ctx_and_ready2stacked>
    192e:	f8 01       	movw	r30, r16
    1930:	80 85       	ldd	r24, Z+8	; 0x08
    1932:	91 85       	ldd	r25, Z+9	; 0x09
    1934:	02 97       	sbiw	r24, 0x02	; 2
    1936:	09 f4       	brne	.+2      	; 0x193a <StartOS+0x104>
    1938:	78 94       	sei
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	42 c0       	rjmp	.+132    	; 0x19c4 <StartOS+0x18e>
    1940:	d7 01       	movw	r26, r14
    1942:	ed 91       	ld	r30, X+
    1944:	fc 91       	ld	r31, X
    1946:	5c 9c       	mul	r5, r12
    1948:	c0 01       	movw	r24, r0
    194a:	5d 9c       	mul	r5, r13
    194c:	90 0d       	add	r25, r0
    194e:	11 24       	eor	r1, r1
    1950:	e8 0f       	add	r30, r24
    1952:	f9 1f       	adc	r31, r25
    1954:	a0 81       	ld	r26, Z
    1956:	b1 81       	ldd	r27, Z+1	; 0x01
    1958:	24 81       	ldd	r18, Z+4	; 0x04
    195a:	35 81       	ldd	r19, Z+5	; 0x05
    195c:	42 81       	ldd	r20, Z+2	; 0x02
    195e:	53 81       	ldd	r21, Z+3	; 0x03
    1960:	bd 01       	movw	r22, r26
    1962:	12 96       	adiw	r26, 0x02	; 2
    1964:	8d 91       	ld	r24, X+
    1966:	9c 91       	ld	r25, X
    1968:	0e 94 95 10 	call	0x212a	; 0x212a <osEE_alarm_set_rel>
    196c:	bf ef       	ldi	r27, 0xFF	; 255
    196e:	cb 1a       	sub	r12, r27
    1970:	db 0a       	sbc	r13, r27
    1972:	a4 cf       	rjmp	.-184    	; 0x18bc <StartOS+0x86>
    1974:	d7 01       	movw	r26, r14
    1976:	ed 91       	ld	r30, X+
    1978:	fc 91       	ld	r31, X
    197a:	c6 01       	movw	r24, r12
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	e8 0f       	add	r30, r24
    1982:	f9 1f       	adc	r31, r25
    1984:	40 81       	ld	r20, Z
    1986:	51 81       	ldd	r21, Z+1	; 0x01
    1988:	da 01       	movw	r26, r20
    198a:	14 96       	adiw	r26, 0x04	; 4
    198c:	ed 91       	ld	r30, X+
    198e:	fc 91       	ld	r31, X
    1990:	80 81       	ld	r24, Z
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	80 83       	st	Z, r24
    1996:	93 82       	std	Z+3, r9	; 0x03
    1998:	82 82       	std	Z+2, r8	; 0x02
    199a:	f8 01       	movw	r30, r16
    199c:	64 81       	ldd	r22, Z+4	; 0x04
    199e:	75 81       	ldd	r23, Z+5	; 0x05
    19a0:	db 01       	movw	r26, r22
    19a2:	8d 91       	ld	r24, X+
    19a4:	9c 91       	ld	r25, X
    19a6:	11 97       	sbiw	r26, 0x01	; 1
    19a8:	95 83       	std	Z+5, r25	; 0x05
    19aa:	84 83       	std	Z+4, r24	; 0x04
    19ac:	1d 92       	st	X+, r1
    19ae:	1c 92       	st	X, r1
    19b0:	c3 01       	movw	r24, r6
    19b2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <osEE_scheduler_rq_insert>
    19b6:	bf ef       	ldi	r27, 0xFF	; 255
    19b8:	cb 1a       	sub	r12, r27
    19ba:	db 0a       	sbc	r13, r27
    19bc:	98 cf       	rjmp	.-208    	; 0x18ee <StartOS+0xb8>
    19be:	9f bf       	out	0x3f, r25	; 63
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	cf 90       	pop	r12
    19d8:	bf 90       	pop	r11
    19da:	af 90       	pop	r10
    19dc:	9f 90       	pop	r9
    19de:	8f 90       	pop	r8
    19e0:	7f 90       	pop	r7
    19e2:	6f 90       	pop	r6
    19e4:	5f 90       	pop	r5
    19e6:	4f 90       	pop	r4
    19e8:	08 95       	ret

000019ea <TerminateTask>:
    19ea:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <CDB>
    19ee:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <CDB+0x1>
    19f2:	01 90       	ld	r0, Z+
    19f4:	f0 81       	ld	r31, Z
    19f6:	e0 2d       	mov	r30, r0
    19f8:	8f b7       	in	r24, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	64 ee       	ldi	r22, 0xE4	; 228
    19fe:	7d e0       	ldi	r23, 0x0D	; 13
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	93 81       	ldd	r25, Z+3	; 0x03
    1a04:	0e 94 36 01 	call	0x26c	; 0x26c <osEE_hal_terminate_ctx>

00001a08 <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    1a08:	bf 92       	push	r11
    1a0a:	cf 92       	push	r12
    1a0c:	df 92       	push	r13
    1a0e:	ef 92       	push	r14
    1a10:	ff 92       	push	r15
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <WaitEvent+0x14>
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    1a20:	e0 90 c1 01 	lds	r14, 0x01C1	; 0x8001c1 <CDB>
    1a24:	f0 90 c2 01 	lds	r15, 0x01C2	; 0x8001c2 <CDB+0x1>
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    1a28:	d7 01       	movw	r26, r14
    1a2a:	cd 90       	ld	r12, X+
    1a2c:	dc 90       	ld	r13, X
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    1a2e:	f6 01       	movw	r30, r12
    1a30:	04 81       	ldd	r16, Z+4	; 0x04
    1a32:	15 81       	ldd	r17, Z+5	; 0x05
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_MUTEX */
#endif /* OSEE_HAS_CHECKS */
  /* Check if we have to wait */
  if ((p_curr_tcb->event_mask & Mask) == 0U) {
    1a34:	d8 01       	movw	r26, r16
    1a36:	16 96       	adiw	r26, 0x06	; 6
    1a38:	2d 91       	ld	r18, X+
    1a3a:	3c 91       	ld	r19, X
    1a3c:	28 23       	and	r18, r24
    1a3e:	39 23       	and	r19, r25
    1a40:	23 2b       	or	r18, r19
    1a42:	19 f5       	brne	.+70     	; 0x1a8a <WaitEvent+0x82>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1a44:	bf b6       	in	r11, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1a46:	f8 94       	cli
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();

    /* Set the waiting mask */
    p_curr_tcb->wait_mask = Mask;
    1a48:	f8 01       	movw	r30, r16
    1a4a:	95 83       	std	Z+5, r25	; 0x05
    1a4c:	84 83       	std	Z+4, r24	; 0x04

    /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
    osEE_lock_core(p_cdb);

    p_to =  osEE_scheduler_task_block_current(osEE_get_kernel(),
    1a4e:	ae 01       	movw	r20, r28
    1a50:	4f 5f       	subi	r20, 0xFF	; 255
    1a52:	5f 4f       	sbci	r21, 0xFF	; 255
    1a54:	61 ec       	ldi	r22, 0xC1	; 193
    1a56:	71 e0       	ldi	r23, 0x01	; 1
    1a58:	8f ea       	ldi	r24, 0xAF	; 175
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
    1a5c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <osEE_scheduler_task_block_current>
              p_cdb, &p_blocked_sn);

    /* Release the SN, I will allocate a new one when the TASK will be
     * reinserted into be reinserted in RQ */
    osEE_sn_release(&p_ccb->p_free_sn, p_blocked_sn);
    1a60:	e9 81       	ldd	r30, Y+1	; 0x01
    1a62:	fa 81       	ldd	r31, Y+2	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    1a64:	d7 01       	movw	r26, r14
    1a66:	14 96       	adiw	r26, 0x04	; 4
    1a68:	2d 91       	ld	r18, X+
    1a6a:	3c 91       	ld	r19, X
    1a6c:	15 97       	sbiw	r26, 0x05	; 5
    1a6e:	31 83       	std	Z+1, r19	; 0x01
    1a70:	20 83       	st	Z, r18
  (*pp_first)       = p_to_free;
    1a72:	15 96       	adiw	r26, 0x05	; 5
    1a74:	fc 93       	st	X, r31
    1a76:	ee 93       	st	-X, r30
    1a78:	14 97       	sbiw	r26, 0x04	; 4

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_to);
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	c6 01       	movw	r24, r12
    1a7e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <osEE_change_context_from_running>

    /* Reset the waiting mask */
    p_curr_tcb->wait_mask = 0U;
    1a82:	f8 01       	movw	r30, r16
    1a84:	15 82       	std	Z+5, r1	; 0x05
    1a86:	14 82       	std	Z+4, r1	; 0x04
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1a88:	bf be       	out	0x3f, r11	; 63
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	bf 90       	pop	r11
    1aa4:	08 95       	ret

00001aa6 <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  /* return (tid < p_kdb->tdb_array_size - OSEE_USED_CORES); */
  return (tid < p_kdb->tdb_array_size);
    1aac:	90 e0       	ldi	r25, 0x00	; 0
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    1aae:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <KDB+0x6>
    1ab2:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <KDB+0x7>
    1ab6:	82 17       	cp	r24, r18
    1ab8:	93 07       	cpc	r25, r19
    1aba:	08 f0       	brcs	.+2      	; 0x1abe <SetEvent+0x18>
    1abc:	45 c0       	rjmp	.+138    	; 0x1b48 <SetEvent+0xa2>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
    1abe:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <KDB+0x2>
    1ac2:	30 91 b2 01 	lds	r19, 0x01B2	; 0x8001b2 <KDB+0x3>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	82 0f       	add	r24, r18
    1acc:	93 1f       	adc	r25, r19
    1ace:	fc 01       	movw	r30, r24
    1ad0:	a0 81       	ld	r26, Z
    1ad2:	b1 81       	ldd	r27, Z+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_waking_up = p_tdb_waking_up->p_tcb;
    1ad4:	14 96       	adiw	r26, 0x04	; 4
    1ad6:	ed 91       	ld	r30, X+
    1ad8:	fc 91       	ld	r31, X
    1ada:	15 97       	sbiw	r26, 0x05	; 5
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1adc:	1f b7       	in	r17, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1ade:	f8 94       	cli
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    {
      /* Set the event mask only if the task is not suspended */
      p_tcb_waking_up->event_mask |= Mask;
    1ae0:	86 81       	ldd	r24, Z+6	; 0x06
    1ae2:	97 81       	ldd	r25, Z+7	; 0x07
    1ae4:	86 2b       	or	r24, r22
    1ae6:	97 2b       	or	r25, r23
    1ae8:	97 83       	std	Z+7, r25	; 0x07
    1aea:	86 83       	std	Z+6, r24	; 0x06

      if (((p_tcb_waking_up->wait_mask & Mask) != 0U) &&
    1aec:	84 81       	ldd	r24, Z+4	; 0x04
    1aee:	95 81       	ldd	r25, Z+5	; 0x05
    1af0:	68 23       	and	r22, r24
    1af2:	79 23       	and	r23, r25
    1af4:	67 2b       	or	r22, r23
    1af6:	09 f1       	breq	.+66     	; 0x1b3a <SetEvent+0x94>
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	03 97       	sbiw	r24, 0x03	; 3
    1afe:	e9 f4       	brne	.+58     	; 0x1b3a <SetEvent+0x94>
          (p_tcb_waking_up->status == OSEE_TASK_WAITING))
      {
        CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
          p_sn = osEE_sn_alloc(&p_cdb_waking_up->p_ccb->p_free_sn);
    1b00:	c0 91 c1 01 	lds	r28, 0x01C1	; 0x8001c1 <CDB>
    1b04:	d0 91 c2 01 	lds	r29, 0x01C2	; 0x8001c2 <CDB+0x1>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    1b08:	ec 81       	ldd	r30, Y+4	; 0x04
    1b0a:	fd 81       	ldd	r31, Y+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    1b0c:	80 81       	ld	r24, Z
    1b0e:	91 81       	ldd	r25, Z+1	; 0x01
    1b10:	9d 83       	std	Y+5, r25	; 0x05
    1b12:	8c 83       	std	Y+4, r24	; 0x04
  p_sn_allocated->p_next  = NULL;
    1b14:	11 82       	std	Z+1, r1	; 0x01
    1b16:	10 82       	st	Z, r1

        p_sn->p_tdb = p_tdb_waking_up;
    1b18:	b3 83       	std	Z+3, r27	; 0x03
    1b1a:	a2 83       	std	Z+2, r26	; 0x02

        /* Release the TASK (and the SN) */
        if (osEE_scheduler_task_unblocked(p_kdb, p_cdb_waking_up, p_sn))
    1b1c:	af 01       	movw	r20, r30
    1b1e:	61 ec       	ldi	r22, 0xC1	; 193
    1b20:	71 e0       	ldi	r23, 0x01	; 1
    1b22:	8f ea       	ldi	r24, 0xAF	; 175
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <osEE_scheduler_task_unblocked>
    1b2a:	89 2b       	or	r24, r25
    1b2c:	31 f0       	breq	.+12     	; 0x1b3a <SetEvent+0x94>
        {
          (void)osEE_scheduler_task_preemption_point(p_kdb, p_cdb_waking_up);
    1b2e:	61 ec       	ldi	r22, 0xC1	; 193
    1b30:	71 e0       	ldi	r23, 0x01	; 1
    1b32:	8f ea       	ldi	r24, 0xAF	; 175
    1b34:	91 e0       	ldi	r25, 0x01	; 1
    1b36:	0e 94 54 10 	call	0x20a8	; 0x20a8 <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1b3a:	1f bf       	out	0x3f, r17	; 63
      }

      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);

      ev = E_OK;
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	08 95       	ret
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    1b48:	83 e0       	ldi	r24, 0x03	; 3
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
    1b4c:	f9 cf       	rjmp	.-14     	; 0x1b40 <SetEvent+0x9a>

00001b4e <GetEvent>:
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    1b50:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <KDB+0x6>
    1b54:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <KDB+0x7>
    1b58:	82 17       	cp	r24, r18
    1b5a:	93 07       	cpc	r25, r19
    1b5c:	c8 f4       	brcc	.+50     	; 0x1b90 <GetEvent+0x42>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
    1b5e:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <KDB+0x2>
    1b62:	30 91 b2 01 	lds	r19, 0x01B2	; 0x8001b2 <KDB+0x3>
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	82 0f       	add	r24, r18
    1b6c:	93 1f       	adc	r25, r19
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    1b6e:	dc 01       	movw	r26, r24
    1b70:	ed 91       	ld	r30, X+
    1b72:	fc 91       	ld	r31, X
    1b74:	04 80       	ldd	r0, Z+4	; 0x04
    1b76:	f5 81       	ldd	r31, Z+5	; 0x05
    1b78:	e0 2d       	mov	r30, r0
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
    1b7a:	61 15       	cp	r22, r1
    1b7c:	71 05       	cpc	r23, r1
    1b7e:	59 f0       	breq	.+22     	; 0x1b96 <GetEvent+0x48>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      (*Event) = p_tcb_event->event_mask;
    1b80:	86 81       	ldd	r24, Z+6	; 0x06
    1b82:	97 81       	ldd	r25, Z+7	; 0x07
    1b84:	fb 01       	movw	r30, r22
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24

      ev = E_OK;
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	08 95       	ret
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	08 95       	ret
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
    1b96:	8e e0       	ldi	r24, 0x0E	; 14
    1b98:	90 e0       	ldi	r25, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    1b9a:	08 95       	ret

00001b9c <ClearEvent>:
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    1b9c:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <CDB>
    1ba0:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <CDB+0x1>
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    1ba4:	01 90       	ld	r0, Z+
    1ba6:	f0 81       	ld	r31, Z
    1ba8:	e0 2d       	mov	r30, r0
    1baa:	04 80       	ldd	r0, Z+4	; 0x04
    1bac:	f5 81       	ldd	r31, Z+5	; 0x05
    1bae:	e0 2d       	mov	r30, r0
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* clear the event */
    p_curr_tcb->event_mask &= ~Mask;
    1bb0:	9c 01       	movw	r18, r24
    1bb2:	20 95       	com	r18
    1bb4:	30 95       	com	r19
    1bb6:	86 81       	ldd	r24, Z+6	; 0x06
    1bb8:	97 81       	ldd	r25, Z+7	; 0x07
    1bba:	82 23       	and	r24, r18
    1bbc:	93 23       	and	r25, r19
    1bbe:	97 83       	std	Z+7, r25	; 0x07
    1bc0:	86 83       	std	Z+6, r24	; 0x06
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	08 95       	ret

00001bc8 <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <osEE_scheduler_task_end+0x6>
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
    1bd2:	ae 01       	movw	r20, r28
    1bd4:	4f 5f       	subi	r20, 0xFF	; 255
    1bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd8:	61 ec       	ldi	r22, 0xC1	; 193
    1bda:	71 e0       	ldi	r23, 0x01	; 1
    1bdc:	8f ea       	ldi	r24, 0xAF	; 175
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    1be4:	bc 01       	movw	r22, r24
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	0e 94 0f 11 	call	0x221e	; 0x221e <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	08 95       	ret

00001bf8 <osEE_scheduler_task_wrapper_restore>:
    p_ccb->p_lock_to_be_released = NULL;
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
    1bf8:	08 95       	ret

00001bfa <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    1bfa:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
    1bfc:	ec 81       	ldd	r30, Y+4	; 0x04
    1bfe:	fd 81       	ldd	r31, Y+5	; 0x05
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_prio < OSEE_ISR_ALL_PRIO) {
    1c00:	81 81       	ldd	r24, Z+1	; 0x01
    1c02:	8f 3f       	cpi	r24, 0xFF	; 255
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <osEE_scheduler_task_wrapper_run+0xe>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
    1c06:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
    1c08:	e9 85       	ldd	r30, Y+9	; 0x09
    1c0a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c0c:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1c0e:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1c10:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
    1c12:	64 ee       	ldi	r22, 0xE4	; 228
    1c14:	7d e0       	ldi	r23, 0x0D	; 13
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	0e 94 36 01 	call	0x26c	; 0x26c <osEE_hal_terminate_ctx>

00001c1e <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1c26:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1c28:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
    1c2a:	61 ec       	ldi	r22, 0xC1	; 193
    1c2c:	71 e0       	ldi	r23, 0x01	; 1
    1c2e:	8f ea       	ldi	r24, 0xAF	; 175
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 54 10 	call	0x20a8	; 0x20a8 <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1c36:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    1c38:	00 91 c1 01 	lds	r16, 0x01C1	; 0x8001c1 <CDB>
    1c3c:	10 91 c2 01 	lds	r17, 0x01C2	; 0x8001c2 <CDB+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    1c40:	c0 91 c3 01 	lds	r28, 0x01C3	; 0x8001c3 <CDB+0x2>
    1c44:	d0 91 c4 01 	lds	r29, 0x01C4	; 0x8001c4 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    1c48:	f8 01       	movw	r30, r16
    1c4a:	80 85       	ldd	r24, Z+8	; 0x08
    1c4c:	91 85       	ldd	r25, Z+9	; 0x09
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	91 05       	cpc	r25, r1
    1c52:	51 f0       	breq	.+20     	; 0x1c68 <osEE_idle_hook_wrapper+0x4a>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    1c54:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <CDB+0x4>
    1c58:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <CDB+0x5>
}
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    1c64:	0c 94 25 11 	jmp	0x224a	; 0x224a <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    1c68:	20 97       	sbiw	r28, 0x00	; 0
    1c6a:	89 f3       	breq	.-30     	; 0x1c4e <osEE_idle_hook_wrapper+0x30>
      p_idle_hook();
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	09 95       	icall
    1c70:	eb cf       	rjmp	.-42     	; 0x1c48 <osEE_idle_hook_wrapper+0x2a>

00001c72 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1c7a:	ec 01       	movw	r28, r24
    1c7c:	a8 81       	ld	r26, Y
    1c7e:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    1c80:	eb 01       	movw	r28, r22
    1c82:	e8 81       	ld	r30, Y
    1c84:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    1c86:	16 96       	adiw	r26, 0x06	; 6
    1c88:	cd 91       	ld	r28, X+
    1c8a:	dc 91       	ld	r29, X
    1c8c:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    1c8e:	20 97       	sbiw	r28, 0x00	; 0
    1c90:	c1 f1       	breq	.+112    	; 0x1d02 <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    1c96:	30 97       	sbiw	r30, 0x00	; 0
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <osEE_scheduler_core_rq_preempt_stk+0x2a>
    1c9a:	3f c0       	rjmp	.+126    	; 0x1d1a <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    1c9c:	ec 01       	movw	r28, r24
    1c9e:	0c 81       	ldd	r16, Y+4	; 0x04
    1ca0:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    1ca2:	22 81       	ldd	r18, Z+2	; 0x02
    1ca4:	33 81       	ldd	r19, Z+3	; 0x03
    1ca6:	e9 01       	movw	r28, r18
    1ca8:	4c 81       	ldd	r20, Y+4	; 0x04
    1caa:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    1cac:	e8 01       	movw	r28, r16
    1cae:	39 81       	ldd	r19, Y+1	; 0x01
    1cb0:	ea 01       	movw	r28, r20
    1cb2:	29 81       	ldd	r18, Y+1	; 0x01
    1cb4:	32 17       	cp	r19, r18
    1cb6:	88 f5       	brcc	.+98     	; 0x1d1a <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    1cb8:	22 e0       	ldi	r18, 0x02	; 2
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	e8 01       	movw	r28, r16
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    1cbe:	3b 83       	std	Y+3, r19	; 0x03
    1cc0:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    1cc2:	20 81       	ld	r18, Z
    1cc4:	31 81       	ldd	r19, Z+1	; 0x01
    1cc6:	eb 01       	movw	r28, r22
    1cc8:	39 83       	std	Y+1, r19	; 0x01
    1cca:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    1ccc:	c2 81       	ldd	r28, Z+2	; 0x02
    1cce:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    1cd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd2:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    1cd4:	16 96       	adiw	r26, 0x06	; 6
    1cd6:	4d 91       	ld	r20, X+
    1cd8:	5c 91       	ld	r21, X
    1cda:	17 97       	sbiw	r26, 0x07	; 7
    1cdc:	51 83       	std	Z+1, r21	; 0x01
    1cde:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    1ce0:	17 96       	adiw	r26, 0x07	; 7
    1ce2:	fc 93       	st	X, r31
    1ce4:	ee 93       	st	-X, r30
    1ce6:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    1ce8:	cd 93       	st	X+, r28
    1cea:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    1cec:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    1cee:	f9 01       	movw	r30, r18
    1cf0:	51 81       	ldd	r21, Z+1	; 0x01
    1cf2:	54 17       	cp	r21, r20
    1cf4:	08 f4       	brcc	.+2      	; 0x1cf8 <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
    1cf6:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    1d02:	30 97       	sbiw	r30, 0x00	; 0
    1d04:	51 f0       	breq	.+20     	; 0x1d1a <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    1d06:	ec 01       	movw	r28, r24
    1d08:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    1d0c:	ec 01       	movw	r28, r24
    1d0e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d10:	5d 81       	ldd	r21, Y+5	; 0x05
    1d12:	22 e0       	ldi	r18, 0x02	; 2
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	ea 01       	movw	r28, r20
    1d18:	d2 cf       	rjmp	.-92     	; 0x1cbe <osEE_scheduler_core_rq_preempt_stk+0x4c>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    p_ret_sn  = NULL;
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
    1d1e:	ec cf       	rjmp	.-40     	; 0x1cf8 <osEE_scheduler_core_rq_preempt_stk+0x86>

00001d20 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    1d20:	cf 92       	push	r12
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    1d30:	eb 01       	movw	r28, r22
    1d32:	aa 81       	ldd	r26, Y+2	; 0x02
    1d34:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    1d36:	14 96       	adiw	r26, 0x04	; 4
    1d38:	ed 91       	ld	r30, X+
    1d3a:	fc 91       	ld	r31, X
    1d3c:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1d3e:	41 15       	cp	r20, r1
    1d40:	51 05       	cpc	r21, r1
    1d42:	01 f1       	breq	.+64     	; 0x1d84 <osEE_sn_priority_insert+0x64>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    1d44:	22 81       	ldd	r18, Z+2	; 0x02
    1d46:	33 81       	ldd	r19, Z+3	; 0x03
    1d48:	22 30       	cpi	r18, 0x02	; 2
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	d8 f0       	brcs	.+54     	; 0x1d84 <osEE_sn_priority_insert+0x64>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1d4e:	1b 96       	adiw	r26, 0x0b	; 11
    1d50:	2c 91       	ld	r18, X
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    1d52:	dc 01       	movw	r26, r24
    1d54:	ed 91       	ld	r30, X+
    1d56:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    1d5c:	30 97       	sbiw	r30, 0x00	; 0
    1d5e:	a1 f4       	brne	.+40     	; 0x1d88 <osEE_sn_priority_insert+0x68>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    1d60:	10 97       	sbiw	r26, 0x00	; 0
    1d62:	69 f1       	breq	.+90     	; 0x1dbe <osEE_sn_priority_insert+0x9e>
    p_prev->p_next = p_sn_new;
    1d64:	6d 93       	st	X+, r22
    1d66:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
    1d6c:	eb 01       	movw	r28, r22
    1d6e:	f9 83       	std	Y+1, r31	; 0x01
    1d70:	e8 83       	st	Y, r30

  return head_changed;
}
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	df 90       	pop	r13
    1d80:	cf 90       	pop	r12
    1d82:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1d84:	21 81       	ldd	r18, Z+1	; 0x01
    1d86:	e5 cf       	rjmp	.-54     	; 0x1d52 <osEE_sn_priority_insert+0x32>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    1d88:	02 81       	ldd	r16, Z+2	; 0x02
    1d8a:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    1d8c:	e8 01       	movw	r28, r16
    1d8e:	cc 80       	ldd	r12, Y+4	; 0x04
    1d90:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    1d92:	41 15       	cp	r20, r1
    1d94:	51 05       	cpc	r21, r1
    1d96:	81 f0       	breq	.+32     	; 0x1db8 <osEE_sn_priority_insert+0x98>
    1d98:	e6 01       	movw	r28, r12
    1d9a:	ea 80       	ldd	r14, Y+2	; 0x02
    1d9c:	fb 80       	ldd	r15, Y+3	; 0x03
    1d9e:	d2 e0       	ldi	r29, 0x02	; 2
    1da0:	ed 16       	cp	r14, r29
    1da2:	f1 04       	cpc	r15, r1
    1da4:	48 f0       	brcs	.+18     	; 0x1db8 <osEE_sn_priority_insert+0x98>
      prio_to_check = p_cur_tdb->ready_prio;
    1da6:	e8 01       	movw	r28, r16
    1da8:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
    1daa:	32 17       	cp	r19, r18
    1dac:	c8 f2       	brcs	.-78     	; 0x1d60 <osEE_sn_priority_insert+0x40>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    1dae:	df 01       	movw	r26, r30
    1db0:	01 90       	ld	r0, Z+
    1db2:	f0 81       	ld	r31, Z
    1db4:	e0 2d       	mov	r30, r0
    1db6:	d2 cf       	rjmp	.-92     	; 0x1d5c <osEE_sn_priority_insert+0x3c>
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    1db8:	e6 01       	movw	r28, r12
    1dba:	39 81       	ldd	r19, Y+1	; 0x01
    1dbc:	f6 cf       	rjmp	.-20     	; 0x1daa <osEE_sn_priority_insert+0x8a>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	6d 93       	st	X+, r22
    1dc2:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	d1 cf       	rjmp	.-94     	; 0x1d6c <osEE_sn_priority_insert+0x4c>

00001dca <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    1dca:	fb 01       	movw	r30, r22
    1dcc:	53 83       	std	Z+3, r21	; 0x03
    1dce:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	50 e0       	ldi	r21, 0x00	; 0
    1dd4:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <osEE_sn_priority_insert>

00001dd8 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1dd8:	ef 92       	push	r14
    1dda:	ff 92       	push	r15
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    1de6:	fc 01       	movw	r30, r24
    1de8:	c0 81       	ld	r28, Z
    1dea:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    1dec:	ee 80       	ldd	r14, Y+6	; 0x06
    1dee:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    1df0:	f7 01       	movw	r30, r14
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	9f 83       	std	Y+7, r25	; 0x07
    1df8:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    1e00:	89 2b       	or	r24, r25
    1e02:	41 f4       	brne	.+16     	; 0x1e14 <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    1e04:	ee 81       	ldd	r30, Y+6	; 0x06
    1e06:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    1e08:	30 97       	sbiw	r30, 0x00	; 0
    1e0a:	61 f0       	breq	.+24     	; 0x1e24 <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
    1e10:	99 83       	std	Y+1, r25	; 0x01
    1e12:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    1e14:	c7 01       	movw	r24, r14
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	1f 91       	pop	r17
    1e1c:	0f 91       	pop	r16
    1e1e:	ff 90       	pop	r15
    1e20:	ef 90       	pop	r14
    1e22:	08 95       	ret
      if ( p_curr_stk_sn != NULL ) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    1e24:	f8 01       	movw	r30, r16
    1e26:	84 81       	ldd	r24, Z+4	; 0x04
    1e28:	95 81       	ldd	r25, Z+5	; 0x05
    1e2a:	f2 cf       	rjmp	.-28     	; 0x1e10 <osEE_scheduler_core_pop_running+0x38>

00001e2c <osEE_scheduler_task_activated>:
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act,
  CONST(OsEE_bool, AUTOMATIC)               is_preemption_point
)
{
    1e2c:	cf 92       	push	r12
    1e2e:	df 92       	push	r13
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	0f 93       	push	r16
    1e36:	1f 93       	push	r17
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act  = p_tdb_act->p_tcb;
    1e3c:	da 01       	movw	r26, r20
    1e3e:	14 96       	adiw	r26, 0x04	; 4
    1e40:	cd 91       	ld	r28, X+
    1e42:	dc 91       	ld	r29, X
    1e44:	15 97       	sbiw	r26, 0x05	; 5

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act)
    1e46:	98 81       	ld	r25, Y
    1e48:	1d 96       	adiw	r26, 0x0d	; 13
    1e4a:	8c 91       	ld	r24, X
    1e4c:	98 17       	cp	r25, r24
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <osEE_scheduler_task_activated+0x26>
    1e50:	54 c0       	rjmp	.+168    	; 0x1efa <osEE_scheduler_task_activated+0xce>
  {
    CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
    1e52:	db 01       	movw	r26, r22
    1e54:	ed 91       	ld	r30, X+
    1e56:	fc 91       	ld	r31, X
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
    1e58:	00 81       	ld	r16, Z
    1e5a:	11 81       	ldd	r17, Z+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
    1e5c:	d8 01       	movw	r26, r16
    1e5e:	14 96       	adiw	r26, 0x04	; 4
    1e60:	ed 90       	ld	r14, X+
    1e62:	fc 90       	ld	r15, X

    ++p_tcb_act->current_num_of_act;
    1e64:	9f 5f       	subi	r25, 0xFF	; 255
    1e66:	98 83       	st	Y, r25
    1e68:	c4 80       	ldd	r12, Z+4	; 0x04
    1e6a:	d5 80       	ldd	r13, Z+5	; 0x05
    1e6c:	d6 01       	movw	r26, r12
    1e6e:	6d 91       	ld	r22, X+
    1e70:	7c 91       	ld	r23, X
        osEE_hal_signal_core(p_tdb_act->orig_core_id);
      }
    } else
#endif /* !OSEE_SINGLECORE */
    /* Preemption Check */
    if ((is_preemption_point) &&
    1e72:	23 2b       	or	r18, r19
    1e74:	69 f1       	breq	.+90     	; 0x1ed0 <osEE_scheduler_task_activated+0xa4>
    1e76:	d7 01       	movw	r26, r14
    1e78:	11 96       	adiw	r26, 0x01	; 1
    1e7a:	9c 91       	ld	r25, X
    1e7c:	11 97       	sbiw	r26, 0x01	; 1
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	98 17       	cp	r25, r24
    1e82:	30 f5       	brcc	.+76     	; 0x1ed0 <osEE_scheduler_task_activated+0xa4>
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
  (*pp_fist)              = p_sn_allocated->p_next;
    1e84:	75 83       	std	Z+5, r23	; 0x05
    1e86:	64 83       	std	Z+4, r22	; 0x04

      /* Call PostTaskHook before switching active TASK */
      osEE_call_post_task_hook(p_ccb);

      /* Set Previous TASK status as Ready but stacked */
      p_curr_tcb->status = OSEE_TASK_READY_STACKED;
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	13 96       	adiw	r26, 0x03	; 3
    1e8e:	9c 93       	st	X, r25
    1e90:	8e 93       	st	-X, r24
    1e92:	12 97       	sbiw	r26, 0x02	; 2

      /* Set the activated TASK as current */
      p_new_stk->p_tdb            = p_tdb_act;
    1e94:	d6 01       	movw	r26, r12
    1e96:	13 96       	adiw	r26, 0x03	; 3
    1e98:	5c 93       	st	X, r21
    1e9a:	4e 93       	st	-X, r20
    1e9c:	12 97       	sbiw	r26, 0x02	; 2
      p_new_stk->p_next           = p_ccb->p_stk_sn;
    1e9e:	86 81       	ldd	r24, Z+6	; 0x06
    1ea0:	97 81       	ldd	r25, Z+7	; 0x07
    1ea2:	8d 93       	st	X+, r24
    1ea4:	9c 93       	st	X, r25
      p_ccb->p_stk_sn             = p_new_stk;
    1ea6:	d7 82       	std	Z+7, r13	; 0x07
    1ea8:	c6 82       	std	Z+6, r12	; 0x06
      p_ccb->p_curr               = p_tdb_act;
    1eaa:	51 83       	std	Z+1, r21	; 0x01
    1eac:	40 83       	st	Z, r20
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    1eae:	1f 82       	std	Y+7, r1	; 0x07
    1eb0:	1e 82       	std	Y+6, r1	; 0x06
      osEE_unlock_core(p_cdb);

#if (defined(OSEE_HAS_EVENTS))
      osEE_event_reset_mask(p_tdb_act->p_tcb);
#endif /* OSEE_HAS_EVENTS */
      osEE_change_context_from_running(p_curr, p_tdb_act);
    1eb2:	ba 01       	movw	r22, r20
    1eb4:	c8 01       	movw	r24, r16
    1eb6:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <osEE_change_context_from_running>
    } else {
      /* Actually Insert the activated in READY Queue */
      osEE_scheduler_task_activated_insert_rq(p_cdb, p_ccb, p_tdb_act,
        p_tcb_act);
    }
    ev = E_OK;
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
  }
  return ev;
}
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	ff 90       	pop	r15
    1ec8:	ef 90       	pop	r14
    1eca:	df 90       	pop	r13
    1ecc:	cf 90       	pop	r12
    1ece:	08 95       	ret
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed4:	89 2b       	or	r24, r25
    1ed6:	31 f4       	brne	.+12     	; 0x1ee4 <osEE_scheduler_task_activated+0xb8>
    p_tcb_act->status = OSEE_TASK_READY;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	9b 83       	std	Y+3, r25	; 0x03
    1ede:	8a 83       	std	Y+2, r24	; 0x02
    1ee0:	1f 82       	std	Y+7, r1	; 0x07
    1ee2:	1e 82       	std	Y+6, r1	; 0x06
    1ee4:	75 83       	std	Z+5, r23	; 0x05
    1ee6:	64 83       	std	Z+4, r22	; 0x04
  p_sn_allocated->p_next  = NULL;
    1ee8:	d6 01       	movw	r26, r12
    1eea:	1d 92       	st	X+, r1
    1eec:	1c 92       	st	X, r1
    osEE_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    1eee:	b6 01       	movw	r22, r12
    1ef0:	cf 01       	movw	r24, r30
    1ef2:	02 96       	adiw	r24, 0x02	; 2
    1ef4:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <osEE_scheduler_rq_insert>
    1ef8:	e0 cf       	rjmp	.-64     	; 0x1eba <osEE_scheduler_task_activated+0x8e>
        p_tcb_act);
    }
    ev = E_OK;
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
    1efa:	84 e0       	ldi	r24, 0x04	; 4
    1efc:	90 e0       	ldi	r25, 0x00	; 0
  }
  return ev;
    1efe:	df cf       	rjmp	.-66     	; 0x1ebe <osEE_scheduler_task_activated+0x92>

00001f00 <osEE_scheduler_task_block_current>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_SN *,  AUTOMATIC, OS_APPL_DATA)  p_sn_blocked
)
{
    1f00:	ef 92       	push	r14
    1f02:	ff 92       	push	r15
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	7a 01       	movw	r14, r20
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    1f10:	db 01       	movw	r26, r22
    1f12:	cd 91       	ld	r28, X+
    1f14:	dc 91       	ld	r29, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_blocked = p_ccb->p_curr;
    1f16:	fe 01       	movw	r30, r28
    1f18:	01 91       	ld	r16, Z+
    1f1a:	11 91       	ld	r17, Z+
    1f1c:	bf 01       	movw	r22, r30

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  (*p_sn_blocked) = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    1f1e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <osEE_scheduler_core_pop_running>
    1f22:	d7 01       	movw	r26, r14
    1f24:	8d 93       	st	X+, r24
    1f26:	9c 93       	st	X, r25

  p_tdb_blocked->p_tcb->status = OSEE_TASK_WAITING;
    1f28:	d8 01       	movw	r26, r16
    1f2a:	14 96       	adiw	r26, 0x04	; 4
    1f2c:	ed 91       	ld	r30, X+
    1f2e:	fc 91       	ld	r31, X
    1f30:	83 e0       	ldi	r24, 0x03	; 3
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	93 83       	std	Z+3, r25	; 0x03
    1f36:	82 83       	std	Z+2, r24	; 0x02

  osEE_unlock_core(p_cdb);

  return p_ccb->p_curr;
}
    1f38:	88 81       	ld	r24, Y
    1f3a:	99 81       	ldd	r25, Y+1	; 0x01
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	08 95       	ret

00001f4a <osEE_scheduler_task_unblocked>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	fa 01       	movw	r30, r20
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
    1f54:	db 01       	movw	r26, r22
    1f56:	0d 91       	ld	r16, X+
    1f58:	1c 91       	ld	r17, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
    1f5a:	42 81       	ldd	r20, Z+2	; 0x02
    1f5c:	53 81       	ldd	r21, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
    1f5e:	da 01       	movw	r26, r20
    1f60:	14 96       	adiw	r26, 0x04	; 4
    1f62:	cd 91       	ld	r28, X+
    1f64:	dc 91       	ld	r29, X
    1f66:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9b 83       	std	Y+3, r25	; 0x03
    1f6e:	8a 83       	std	Y+2, r24	; 0x02
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
    1f70:	1b 96       	adiw	r26, 0x0b	; 11
    1f72:	8c 91       	ld	r24, X
    1f74:	89 83       	std	Y+1, r24	; 0x01

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    1f76:	bf 01       	movw	r22, r30
    1f78:	c8 01       	movw	r24, r16
    1f7a:	02 96       	adiw	r24, 0x02	; 2
    1f7c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <osEE_scheduler_rq_insert>
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	91 f4       	brne	.+36     	; 0x1fa8 <osEE_scheduler_task_unblocked+0x5e>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
    1f84:	d8 01       	movw	r26, r16
    1f86:	ed 91       	ld	r30, X+
    1f88:	fc 91       	ld	r31, X
    1f8a:	04 80       	ldd	r0, Z+4	; 0x04
    1f8c:	f5 81       	ldd	r31, Z+5	; 0x05
    1f8e:	e0 2d       	mov	r30, r0

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    is_preemption = (p_tcb_released->current_prio >
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	39 81       	ldd	r19, Y+1	; 0x01
    1f96:	21 81       	ldd	r18, Z+1	; 0x01
    1f98:	23 17       	cp	r18, r19
    1f9a:	08 f0       	brcs	.+2      	; 0x1f9e <osEE_scheduler_task_unblocked+0x54>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	08 95       	ret
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
    1fac:	f8 cf       	rjmp	.-16     	; 0x1f9e <osEE_scheduler_task_unblocked+0x54>

00001fae <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    1fae:	af 92       	push	r10
    1fb0:	bf 92       	push	r11
    1fb2:	cf 92       	push	r12
    1fb4:	df 92       	push	r13
    1fb6:	ef 92       	push	r14
    1fb8:	ff 92       	push	r15
    1fba:	0f 93       	push	r16
    1fbc:	1f 93       	push	r17
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1fc4:	db 01       	movw	r26, r22
    1fc6:	cd 91       	ld	r28, X+
    1fc8:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    1fca:	fe 01       	movw	r30, r28
    1fcc:	01 91       	ld	r16, Z+
    1fce:	11 91       	ld	r17, Z+
    1fd0:	6f 01       	movw	r12, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    1fd2:	d8 01       	movw	r26, r16
    1fd4:	14 96       	adiw	r26, 0x04	; 4
    1fd6:	ed 90       	ld	r14, X+
    1fd8:	fc 90       	ld	r15, X

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    1fda:	fa 01       	movw	r30, r20
    1fdc:	11 83       	std	Z+1, r17	; 0x01
    1fde:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    1fe0:	d7 01       	movw	r26, r14
    1fe2:	12 96       	adiw	r26, 0x02	; 2
    1fe4:	8d 91       	ld	r24, X+
    1fe6:	9c 91       	ld	r25, X
    1fe8:	04 97       	sbiw	r24, 0x04	; 4
    1fea:	a9 f5       	brne	.+106    	; 0x2056 <osEE_scheduler_task_terminated+0xa8>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    1fec:	b6 01       	movw	r22, r12
    1fee:	c5 01       	movw	r24, r10
    1ff0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <osEE_scheduler_core_pop_running>
    1ff4:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    1ff6:	88 81       	ld	r24, Y
    1ff8:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    1ffa:	08 17       	cp	r16, r24
    1ffc:	19 07       	cpc	r17, r25
    1ffe:	31 f1       	breq	.+76     	; 0x204c <osEE_scheduler_task_terminated+0x9e>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    2000:	d8 01       	movw	r26, r16
    2002:	14 96       	adiw	r26, 0x04	; 4
    2004:	ed 91       	ld	r30, X+
    2006:	fc 91       	ld	r31, X
    2008:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    200a:	1b 96       	adiw	r26, 0x0b	; 11
    200c:	2c 91       	ld	r18, X
    200e:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    2010:	20 81       	ld	r18, Z
    2012:	21 50       	subi	r18, 0x01	; 1
    2014:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    2016:	21 11       	cpse	r18, r1
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <osEE_scheduler_task_terminated+0x94>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    201a:	13 82       	std	Z+3, r1	; 0x03
    201c:	12 82       	std	Z+2, r1	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    201e:	2c 81       	ldd	r18, Y+4	; 0x04
    2020:	3d 81       	ldd	r19, Y+5	; 0x05
    2022:	da 01       	movw	r26, r20
    2024:	2d 93       	st	X+, r18
    2026:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    2028:	5d 83       	std	Y+5, r21	; 0x05
    202a:	4c 83       	std	Y+4, r20	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	ff 90       	pop	r15
    2036:	ef 90       	pop	r14
    2038:	df 90       	pop	r13
    203a:	cf 90       	pop	r12
    203c:	bf 90       	pop	r11
    203e:	af 90       	pop	r10
    2040:	08 95       	ret
  } else {
    p_tcb->status = OSEE_TASK_READY;
    2042:	21 e0       	ldi	r18, 0x01	; 1
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	33 83       	std	Z+3, r19	; 0x03
    2048:	22 83       	std	Z+2, r18	; 0x02
    204a:	e9 cf       	rjmp	.-46     	; 0x201e <osEE_scheduler_task_terminated+0x70>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    204c:	f7 01       	movw	r30, r14
    204e:	20 81       	ld	r18, Z
    2050:	21 50       	subi	r18, 0x01	; 1
    2052:	20 83       	st	Z, r18
    2054:	e4 cf       	rjmp	.-56     	; 0x201e <osEE_scheduler_task_terminated+0x70>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    2056:	6e 81       	ldd	r22, Y+6	; 0x06
    2058:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    205a:	fb 01       	movw	r30, r22
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	9f 83       	std	Y+7, r25	; 0x07
    2062:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    2064:	d8 01       	movw	r26, r16
    2066:	1b 96       	adiw	r26, 0x0b	; 11
    2068:	8c 91       	ld	r24, X
    206a:	f7 01       	movw	r30, r14
    206c:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	93 83       	std	Z+3, r25	; 0x03
    2074:	82 83       	std	Z+2, r24	; 0x02
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transiction from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
    2076:	80 81       	ld	r24, Z
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	11 f4       	brne	.+4      	; 0x2080 <osEE_scheduler_task_terminated+0xd2>
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    207c:	17 82       	std	Z+7, r1	; 0x07
    207e:	16 82       	std	Z+6, r1	; 0x06
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    2080:	a8 01       	movw	r20, r16
    2082:	c6 01       	movw	r24, r12
    2084:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    2088:	b6 01       	movw	r22, r12
    208a:	c5 01       	movw	r24, r10
    208c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    2090:	89 2b       	or	r24, r25
    2092:	39 f4       	brne	.+14     	; 0x20a2 <osEE_scheduler_task_terminated+0xf4>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    2094:	ee 81       	ldd	r30, Y+6	; 0x06
    2096:	ff 81       	ldd	r31, Y+7	; 0x07
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    209c:	99 83       	std	Y+1, r25	; 0x01
    209e:	88 83       	st	Y, r24
    20a0:	c5 cf       	rjmp	.-118    	; 0x202c <osEE_scheduler_task_terminated+0x7e>
        } else {
          p_tdb_to = p_ccb->p_curr;
    20a2:	88 81       	ld	r24, Y
    20a4:	99 81       	ldd	r25, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    20a6:	c2 cf       	rjmp	.-124    	; 0x202c <osEE_scheduler_task_terminated+0x7e>

000020a8 <osEE_scheduler_task_preemption_point>:
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb
)
{
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	cb 01       	movw	r24, r22
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    20ae:	fb 01       	movw	r30, r22
    20b0:	c0 81       	ld	r28, Z
    20b2:	d1 81       	ldd	r29, Z+1	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    20b4:	be 01       	movw	r22, r28
    20b6:	6e 5f       	subi	r22, 0xFE	; 254
    20b8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ba:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <osEE_scheduler_core_rq_preempt_stk>

  if (p_prev != NULL) {
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	49 f0       	breq	.+18     	; 0x20d4 <osEE_scheduler_task_preemption_point+0x2c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_prev, p_curr);
    20c2:	68 81       	ld	r22, Y
    20c4:	79 81       	ldd	r23, Y+1	; 0x01
    20c6:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
  }
  return is_preemption;
}
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	08 95       	ret
    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	80 e0       	ldi	r24, 0x00	; 0
  }
  return is_preemption;
    20d8:	fa cf       	rjmp	.-12     	; 0x20ce <osEE_scheduler_task_preemption_point+0x26>

000020da <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb
)
{
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb  = p_cdb->p_ccb;
    20de:	db 01       	movw	r26, r22
    20e0:	ed 91       	ld	r30, X+
    20e2:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
    20e8:	26 81       	ldd	r18, Z+6	; 0x06
    20ea:	37 81       	ldd	r19, Z+7	; 0x07

  p_preempted->p_tcb->status    = OSEE_TASK_READY_STACKED;
    20ec:	ec 01       	movw	r28, r24
    20ee:	ac 81       	ldd	r26, Y+4	; 0x04
    20f0:	bd 81       	ldd	r27, Y+5	; 0x05
    20f2:	62 e0       	ldi	r22, 0x02	; 2
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	13 96       	adiw	r26, 0x03	; 3
    20f8:	7c 93       	st	X, r23
    20fa:	6e 93       	st	-X, r22
    20fc:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_curr                 = p_tdb;
    20fe:	51 83       	std	Z+1, r21	; 0x01
    2100:	40 83       	st	Z, r20
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    2102:	a4 81       	ldd	r26, Z+4	; 0x04
    2104:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    2106:	6d 91       	ld	r22, X+
    2108:	7c 91       	ld	r23, X
    210a:	11 97       	sbiw	r26, 0x01	; 1
    210c:	75 83       	std	Z+5, r23	; 0x05
    210e:	64 83       	std	Z+4, r22	; 0x04

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  /* Alloc the SN for the new Running TASK */
  p_ccb->p_stk_sn               = osEE_sn_alloc(&p_ccb->p_free_sn);
    2110:	b7 83       	std	Z+7, r27	; 0x07
    2112:	a6 83       	std	Z+6, r26	; 0x06
  osEE_unlock_core(p_cdb);

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
    2114:	13 96       	adiw	r26, 0x03	; 3
    2116:	5c 93       	st	X, r21
    2118:	4e 93       	st	-X, r20
    211a:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
    211c:	2d 93       	st	X+, r18
    211e:	3c 93       	st	X, r19

  osEE_change_context_from_running(p_preempted, p_tdb);
    2120:	ba 01       	movw	r22, r20
}
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;

  osEE_change_context_from_running(p_preempted, p_tdb);
    2126:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <osEE_change_context_from_running>

0000212a <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
    212a:	db 01       	movw	r26, r22
    212c:	ed 91       	ld	r30, X+
    212e:	fc 91       	ld	r31, X
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    2130:	a4 81       	ldd	r26, Z+4	; 0x04
    2132:	b5 81       	ldd	r27, Z+5	; 0x05
    2134:	ab 2b       	or	r26, r27
    2136:	39 f4       	brne	.+14     	; 0x2146 <osEE_alarm_set_rel+0x1c>
    ev = E_OS_STATE;
  } else {
    p_alarm_cb->cycle = cycle;
    2138:	37 83       	std	Z+7, r19	; 0x07
    213a:	26 83       	std	Z+6, r18	; 0x06

    osEE_counter_insert_rel_trigger(
    213c:	0e 94 8b 11 	call	0x2316	; 0x2316 <osEE_counter_insert_rel_trigger>
      p_counter_db, p_trigger_db, increment
    );
    ev = E_OK;
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	08 95       	ret
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    ev = E_OS_STATE;
    2146:	87 e0       	ldi	r24, 0x07	; 7
    2148:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
    214a:	08 95       	ret

0000214c <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    214c:	f8 94       	cli
    214e:	ff cf       	rjmp	.-2      	; 0x214e <__vector_default+0x2>

00002150 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    2150:	ec e4       	ldi	r30, 0x4C	; 76
}
    2152:	08 95       	ret

00002154 <__vector_11>:
OSEE_AVR8_ISR_NOT_DEFINED(TIMER1_CAPT_vect)
#endif /* OSEE_AVR8_TIMER1_CAPT_ISR */

/* TIMER1_COMPA interrupt vector */
#if (defined(OSEE_AVR8_TIMER1_COMPA_ISR_TID)) && (OSEE_AVR8_TIMER1_COMPA_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(TIMER1_COMPA_vect, OSEE_AVR8_TIMER1_COMPA_ISR_TID)
    2154:	8f 93       	push	r24
    2156:	9f 93       	push	r25
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	0e 94 b2 10 	call	0x2164	; 0x2164 <osEE_avr8_isr2_stub>
    215e:	9f 91       	pop	r25
    2160:	8f 91       	pop	r24
    2162:	18 95       	reti

00002164 <osEE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void OSEE_COMPILER_KEEP OSEE_NAKED osEE_avr8_isr2_stub(TaskType t)
{

  OSEE_AVR8_ISR_PREINSTUB();
    2164:	1f 92       	push	r1
    2166:	0f 92       	push	r0
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	0f 92       	push	r0
    216c:	11 24       	eor	r1, r1
    216e:	2f 93       	push	r18
    2170:	3f 93       	push	r19
    2172:	4f 93       	push	r20
    2174:	5f 93       	push	r21
    2176:	6f 93       	push	r22
    2178:	7f 93       	push	r23
    217a:	af 93       	push	r26
    217c:	bf 93       	push	r27
    217e:	ef 93       	push	r30
    2180:	ff 93       	push	r31
{
  VAR(StatusType, AUTOMATIC) ret_val  = E_OK;
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
    2182:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <KDB+0x2>
    2186:	f0 91 b2 01 	lds	r31, 0x01B2	; 0x8001b2 <KDB+0x3>
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	e8 0f       	add	r30, r24
    2192:	f9 1f       	adc	r31, r25
    2194:	40 81       	ld	r20, Z
    2196:	51 81       	ldd	r21, Z+1	; 0x01

  /* Mark the TASK as Activated */
  ++p_act_tdb->p_tcb->current_num_of_act;
    2198:	da 01       	movw	r26, r20
    219a:	14 96       	adiw	r26, 0x04	; 4
    219c:	ed 91       	ld	r30, X+
    219e:	fc 91       	ld	r31, X
    21a0:	80 81       	ld	r24, Z
    21a2:	8f 5f       	subi	r24, 0xFF	; 255
    21a4:	80 83       	st	Z, r24

  osEE_scheduler_task_set_running(p_kdb, p_cdb, p_act_tdb);
    21a6:	61 ec       	ldi	r22, 0xC1	; 193
    21a8:	71 e0       	ldi	r23, 0x01	; 1
    21aa:	8f ea       	ldi	r24, 0xAF	; 175
    21ac:	91 e0       	ldi	r25, 0x01	; 1
    21ae:	0e 94 6d 10 	call	0x20da	; 0x20da <osEE_scheduler_task_set_running>
#endif /* __ATXMEGA__ */

  /* Activate ISR2 */
  osEE_activate_isr2(t);

  OSEE_AVR8_ISR_POSTINSTUB();
    21b2:	ff 91       	pop	r31
    21b4:	ef 91       	pop	r30
    21b6:	bf 91       	pop	r27
    21b8:	af 91       	pop	r26
    21ba:	7f 91       	pop	r23
    21bc:	6f 91       	pop	r22
    21be:	5f 91       	pop	r21
    21c0:	4f 91       	pop	r20
    21c2:	3f 91       	pop	r19
    21c4:	2f 91       	pop	r18
    21c6:	0f 90       	pop	r0
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	0f 90       	pop	r0
    21cc:	1f 90       	pop	r1

  OSEE_RETURN();
    21ce:	08 95       	ret

000021d0 <osEE_avr8_system_timer_init>:

#if (defined(OSEE_SYSTEM_TIMER_DEVICE))
#if (OSEE_SYSTEM_TIMER_DEVICE == OSEE_AVR8_TIMER1_COMPA)

void osEE_avr8_system_timer_init(void) {
  OsEE_atmega_startTimer1(OSTICKDURATION / OSEE_KILO);
    21d0:	68 ee       	ldi	r22, 0xE8	; 232
    21d2:	73 e0       	ldi	r23, 0x03	; 3
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <OsEE_atmega_startTimer1>

000021dc <osEE_avr8_system_timer_handler>:
}

ISR2(osEE_avr8_system_timer_handler) {
  OsEE_CDB * p_cdb = osEE_get_curr_core();
  osEE_counter_increment(p_cdb->p_sys_counter_db);
    21dc:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <CDB+0x6>
    21e0:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <CDB+0x7>
    21e4:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <osEE_counter_increment>

000021e8 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    21e8:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    21ea:	a4 81       	ldd	r26, Z+4	; 0x04
    21ec:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    21ee:	12 96       	adiw	r26, 0x02	; 2
    21f0:	2d 91       	ld	r18, X+
    21f2:	3c 91       	ld	r19, X
    21f4:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    21f6:	44 e0       	ldi	r20, 0x04	; 4
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	13 96       	adiw	r26, 0x03	; 3
    21fc:	5c 93       	st	X, r21
    21fe:	4e 93       	st	-X, r20
    2200:	12 97       	sbiw	r26, 0x02	; 2
    2202:	dc 01       	movw	r26, r24
    2204:	12 96       	adiw	r26, 0x02	; 2
    2206:	4d 91       	ld	r20, X+
    2208:	5c 91       	ld	r21, X
    220a:	62 81       	ldd	r22, Z+2	; 0x02
    220c:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    220e:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    2210:	22 30       	cpi	r18, 0x02	; 2
    2212:	31 05       	cpc	r19, r1
    2214:	11 f4       	brne	.+4      	; 0x221a <osEE_change_context_from_running+0x32>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    2216:	0c 94 ce 00 	jmp	0x19c	; 0x19c <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    221a:	0c 94 16 01 	jmp	0x22c	; 0x22c <osEE_hal_save_ctx_and_ready2stacked>

0000221e <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    221e:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    2220:	db 01       	movw	r26, r22
    2222:	14 96       	adiw	r26, 0x04	; 4
    2224:	ed 91       	ld	r30, X+
    2226:	fc 91       	ld	r31, X
    2228:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    222a:	22 81       	ldd	r18, Z+2	; 0x02
    222c:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    222e:	44 e0       	ldi	r20, 0x04	; 4
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	53 83       	std	Z+3, r21	; 0x03
    2234:	42 83       	std	Z+2, r20	; 0x02
    2236:	12 96       	adiw	r26, 0x02	; 2
    2238:	6d 91       	ld	r22, X+
    223a:	7c 91       	ld	r23, X

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    223c:	22 30       	cpi	r18, 0x02	; 2
    223e:	31 05       	cpc	r19, r1
    2240:	11 f4       	brne	.+4      	; 0x2246 <osEE_change_context_from_task_end+0x28>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    2242:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    2246:	0c 94 0e 01 	jmp	0x21c	; 0x21c <osEE_hal_ready2stacked>

0000224a <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    224a:	dc 01       	movw	r26, r24
    224c:	12 96       	adiw	r26, 0x02	; 2
    224e:	6d 91       	ld	r22, X+
    2250:	7c 91       	ld	r23, X
    2252:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    2254:	ed 91       	ld	r30, X+
    2256:	fc 91       	ld	r31, X
    2258:	40 81       	ld	r20, Z
    225a:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    225c:	db 01       	movw	r26, r22
    225e:	ed 91       	ld	r30, X+
    2260:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    2262:	22 89       	ldd	r18, Z+18	; 0x12
    2264:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    2266:	21 15       	cp	r18, r1
    2268:	31 05       	cpc	r19, r1
    226a:	19 f0       	breq	.+6      	; 0x2272 <osEE_idle_task_terminate+0x28>
    226c:	42 17       	cp	r20, r18
    226e:	53 07       	cpc	r21, r19
    2270:	29 f4       	brne	.+10     	; 0x227c <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    2272:	db 01       	movw	r26, r22
    2274:	ed 93       	st	X+, r30
    2276:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    2278:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <osEE_hal_restore_ctx>
    227c:	f9 01       	movw	r30, r18
    227e:	f1 cf       	rjmp	.-30     	; 0x2262 <osEE_idle_task_terminate+0x18>

00002280 <osEE_counter_insert_abs_trigger>:
    }
  }

  /* Turn Off the Trigger */
  p_trigger_cb->active = OSEE_FALSE;
}
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	dc 01       	movw	r26, r24
    228e:	8d 91       	ld	r24, X+
    2290:	9c 91       	ld	r25, X
    2292:	dc 01       	movw	r26, r24
    2294:	ed 91       	ld	r30, X+
    2296:	fc 91       	ld	r31, X
    2298:	11 97       	sbiw	r26, 0x01	; 1
    229a:	12 96       	adiw	r26, 0x02	; 2
    229c:	0d 91       	ld	r16, X+
    229e:	1c 91       	ld	r17, X
    22a0:	db 01       	movw	r26, r22
    22a2:	cd 91       	ld	r28, X+
    22a4:	dc 91       	ld	r29, X
    22a6:	21 e0       	ldi	r18, 0x01	; 1
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	3d 83       	std	Y+5, r19	; 0x05
    22ac:	2c 83       	std	Y+4, r18	; 0x04
    22ae:	5b 83       	std	Y+3, r21	; 0x03
    22b0:	4a 83       	std	Y+2, r20	; 0x02
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 97       	sbiw	r30, 0x00	; 0
    22b8:	e1 f0       	breq	.+56     	; 0x22f2 <osEE_counter_insert_abs_trigger+0x72>
    22ba:	a0 81       	ld	r26, Z
    22bc:	b1 81       	ldd	r27, Z+1	; 0x01
    22be:	12 96       	adiw	r26, 0x02	; 2
    22c0:	ed 90       	ld	r14, X+
    22c2:	fc 90       	ld	r15, X
    22c4:	13 97       	sbiw	r26, 0x03	; 3
    22c6:	0e 15       	cp	r16, r14
    22c8:	1f 05       	cpc	r17, r15
    22ca:	68 f4       	brcc	.+26     	; 0x22e6 <osEE_counter_insert_abs_trigger+0x66>
    22cc:	4e 15       	cp	r20, r14
    22ce:	5f 05       	cpc	r21, r15
    22d0:	18 f4       	brcc	.+6      	; 0x22d8 <osEE_counter_insert_abs_trigger+0x58>
    22d2:	04 17       	cp	r16, r20
    22d4:	15 07       	cpc	r17, r21
    22d6:	68 f0       	brcs	.+26     	; 0x22f2 <osEE_counter_insert_abs_trigger+0x72>
    22d8:	fc 90       	ld	r15, X
    22da:	11 96       	adiw	r26, 0x01	; 1
    22dc:	ac 91       	ld	r26, X
    22de:	9f 01       	movw	r18, r30
    22e0:	ef 2d       	mov	r30, r15
    22e2:	fa 2f       	mov	r31, r26
    22e4:	e8 cf       	rjmp	.-48     	; 0x22b6 <osEE_counter_insert_abs_trigger+0x36>
    22e6:	04 17       	cp	r16, r20
    22e8:	15 07       	cpc	r17, r21
    22ea:	18 f0       	brcs	.+6      	; 0x22f2 <osEE_counter_insert_abs_trigger+0x72>
    22ec:	4e 15       	cp	r20, r14
    22ee:	5f 05       	cpc	r21, r15
    22f0:	98 f7       	brcc	.-26     	; 0x22d8 <osEE_counter_insert_abs_trigger+0x58>
    22f2:	21 15       	cp	r18, r1
    22f4:	31 05       	cpc	r19, r1
    22f6:	19 f0       	breq	.+6      	; 0x22fe <osEE_counter_insert_abs_trigger+0x7e>
    22f8:	d9 01       	movw	r26, r18
    22fa:	8d 91       	ld	r24, X+
    22fc:	9c 91       	ld	r25, X
    22fe:	dc 01       	movw	r26, r24
    2300:	6d 93       	st	X+, r22
    2302:	7c 93       	st	X, r23
    2304:	f9 83       	std	Y+1, r31	; 0x01
    2306:	e8 83       	st	Y, r30
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	ff 90       	pop	r15
    2312:	ef 90       	pop	r14
    2314:	08 95       	ret

00002316 <osEE_counter_insert_rel_trigger>:
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	dc 01       	movw	r26, r24
    231c:	12 96       	adiw	r26, 0x02	; 2
    231e:	ed 91       	ld	r30, X+
    2320:	fc 91       	ld	r31, X
    2322:	13 97       	sbiw	r26, 0x03	; 3
    2324:	0d 90       	ld	r0, X+
    2326:	bc 91       	ld	r27, X
    2328:	a0 2d       	mov	r26, r0
    232a:	12 96       	adiw	r26, 0x02	; 2
    232c:	2d 91       	ld	r18, X+
    232e:	3c 91       	ld	r19, X
    2330:	df 01       	movw	r26, r30
    2332:	a4 1b       	sub	r26, r20
    2334:	b5 0b       	sbc	r27, r21
    2336:	a2 17       	cp	r26, r18
    2338:	b3 07       	cpc	r27, r19
    233a:	30 f0       	brcs	.+12     	; 0x2348 <osEE_counter_insert_rel_trigger+0x32>
    233c:	42 0f       	add	r20, r18
    233e:	53 1f       	adc	r21, r19
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	0c 94 40 11 	jmp	0x2280	; 0x2280 <osEE_counter_insert_abs_trigger>
    2348:	41 50       	subi	r20, 0x01	; 1
    234a:	51 09       	sbc	r21, r1
    234c:	42 0f       	add	r20, r18
    234e:	53 1f       	adc	r21, r19
    2350:	4e 1b       	sub	r20, r30
    2352:	5f 0b       	sbc	r21, r31
    2354:	f5 cf       	rjmp	.-22     	; 0x2340 <osEE_counter_insert_rel_trigger+0x2a>

00002356 <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
    2356:	8f 92       	push	r8
    2358:	9f 92       	push	r9
    235a:	af 92       	push	r10
    235c:	bf 92       	push	r11
    235e:	cf 92       	push	r12
    2360:	df 92       	push	r13
    2362:	ef 92       	push	r14
    2364:	ff 92       	push	r15
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
    236e:	dc 01       	movw	r26, r24
    2370:	ed 90       	ld	r14, X+
    2372:	fc 90       	ld	r15, X
    2374:	11 97       	sbiw	r26, 0x01	; 1
       This because is more efficient to read SFR than mamory. */
    CONST(CoreIdType, AUTOMATIC) counter_core_id = osEE_get_curr_core_id();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
    2376:	f7 01       	movw	r30, r14
    2378:	22 81       	ldd	r18, Z+2	; 0x02
    237a:	33 81       	ldd	r19, Z+3	; 0x03
    237c:	12 96       	adiw	r26, 0x02	; 2
    237e:	4d 91       	ld	r20, X+
    2380:	5c 91       	ld	r21, X
    2382:	24 17       	cp	r18, r20
    2384:	35 07       	cpc	r19, r21
    2386:	08 f4       	brcc	.+2      	; 0x238a <osEE_counter_increment+0x34>
    2388:	5f c0       	rjmp	.+190    	; 0x2448 <osEE_counter_increment+0xf2>
      counter_value = (p_counter_cb->value = 0U);
    238a:	13 82       	std	Z+3, r1	; 0x03
    238c:	12 82       	std	Z+2, r1	; 0x02
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	20 e0       	ldi	r18, 0x00	; 0
            the counters, whenever the locks are not limited resources for the
            HW and falling back to use core locks only for those architectures
            where this is not true. TBD. */
    osEE_lock_core_id(counter_core_id);

    p_triggered_db = p_counter_cb->trigger_queue;
    2392:	f7 01       	movw	r30, r14
    2394:	c0 81       	ld	r28, Z
    2396:	d1 81       	ldd	r29, Z+1	; 0x01

    if (p_triggered_db != NULL) {
    2398:	20 97       	sbiw	r28, 0x00	; 0
    239a:	09 f4       	brne	.+2      	; 0x239e <osEE_counter_increment+0x48>
    239c:	48 c0       	rjmp	.+144    	; 0x242e <osEE_counter_increment+0xd8>
      P2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
    239e:	a8 81       	ld	r26, Y
    23a0:	b9 81       	ldd	r27, Y+1	; 0x01
    23a2:	12 96       	adiw	r26, 0x02	; 2
    23a4:	4d 91       	ld	r20, X+
    23a6:	5c 91       	ld	r21, X
    23a8:	42 17       	cp	r20, r18
    23aa:	53 07       	cpc	r21, r19
    23ac:	09 f0       	breq	.+2      	; 0x23b0 <osEE_counter_increment+0x5a>
    23ae:	3f c0       	rjmp	.+126    	; 0x242e <osEE_counter_increment+0xd8>
    23b0:	de 01       	movw	r26, r28
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
    23b2:	2d 91       	ld	r18, X+
    23b4:	3c 91       	ld	r19, X
    23b6:	f9 01       	movw	r30, r18
    23b8:	a0 81       	ld	r26, Z
    23ba:	b1 81       	ldd	r27, Z+1	; 0x01
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
    23bc:	10 97       	sbiw	r26, 0x00	; 0
    23be:	49 f0       	breq	.+18     	; 0x23d2 <osEE_counter_increment+0x7c>
    23c0:	6d 91       	ld	r22, X+
    23c2:	7c 91       	ld	r23, X
    23c4:	11 97       	sbiw	r26, 0x01	; 1

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
        } while ((p_current != NULL) &&
    23c6:	fb 01       	movw	r30, r22
    23c8:	62 81       	ldd	r22, Z+2	; 0x02
    23ca:	73 81       	ldd	r23, Z+3	; 0x03
    23cc:	46 17       	cp	r20, r22
    23ce:	57 07       	cpc	r21, r23
    23d0:	81 f3       	breq	.-32     	; 0x23b2 <osEE_counter_increment+0x5c>
    23d2:	8c 01       	movw	r16, r24
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
    23d4:	f9 01       	movw	r30, r18
    23d6:	11 82       	std	Z+1, r1	; 0x01
    23d8:	10 82       	st	Z, r1
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
    23da:	f7 01       	movw	r30, r14
    23dc:	b1 83       	std	Z+1, r27	; 0x01
    23de:	a0 83       	st	Z, r26

        if (((p_tcb->wait_mask & mask) != 0U) &&
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);
    23e0:	c0 90 c1 01 	lds	r12, 0x01C1	; 0x8001c1 <CDB>
    23e4:	d0 90 c2 01 	lds	r13, 0x01C2	; 0x8001c2 <CDB+0x1>
            p_trigger_to_be_handled = p_triggered_db;

          /* Prepare next trigger to be handled here, before actually handle the
           * current one, otherwise cycling triggers will mess with the list of
           * triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
    23e8:	e8 80       	ld	r14, Y
    23ea:	f9 80       	ldd	r15, Y+1	; 0x01
    23ec:	d7 01       	movw	r26, r14
    23ee:	8c 90       	ld	r8, X
    23f0:	11 96       	adiw	r26, 0x01	; 1
    23f2:	9c 90       	ld	r9, X
    23f4:	11 97       	sbiw	r26, 0x01	; 1
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
  CONST(TickType, AUTOMATIC)
    cycle = p_trigger_cb->cycle;
    23f6:	16 96       	adiw	r26, 0x06	; 6
    23f8:	ad 90       	ld	r10, X+
    23fa:	bc 90       	ld	r11, X
(
  P2CONST(OsEE_action, AUTOMATIC, OS_APPL_DATA) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev;
  switch (p_action->type) {
    23fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    23fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	91 05       	cpc	r25, r1
    2404:	89 f1       	breq	.+98     	; 0x2468 <osEE_counter_increment+0x112>
    2406:	28 f1       	brcs	.+74     	; 0x2452 <osEE_counter_increment+0xfc>
    2408:	82 30       	cpi	r24, 0x02	; 2
    240a:	91 05       	cpc	r25, r1
    240c:	09 f4       	brne	.+2      	; 0x2410 <osEE_counter_increment+0xba>
    240e:	5c c0       	rjmp	.+184    	; 0x24c8 <osEE_counter_increment+0x172>
    2410:	03 97       	sbiw	r24, 0x03	; 3
    2412:	09 f4       	brne	.+2      	; 0x2416 <osEE_counter_increment+0xc0>
    2414:	5e c0       	rjmp	.+188    	; 0x24d2 <osEE_counter_increment+0x17c>
    cycle = p_trigger_cb->cycle;

  ev = osEE_handle_action(&p_alarm_db->action);

  /* TODO: Add active check to let call CancelAlarm from callback... */
  if (cycle > 0U) {
    2416:	a1 14       	cp	r10, r1
    2418:	b1 04       	cpc	r11, r1
    241a:	09 f4       	brne	.+2      	; 0x241e <osEE_counter_increment+0xc8>
    241c:	5e c0       	rjmp	.+188    	; 0x24da <osEE_counter_increment+0x184>
    osEE_counter_insert_rel_trigger(
    241e:	a5 01       	movw	r20, r10
    2420:	be 01       	movw	r22, r28
    2422:	c8 01       	movw	r24, r16
    2424:	0e 94 8b 11 	call	0x2316	; 0x2316 <osEE_counter_insert_rel_trigger>
    2428:	e4 01       	movw	r28, r8
            osEE_end_primitive(flags);
          }
#else
          (void)ev; /* TODO: Handle ErrorHook */
#endif /* OSEE_HAS_ERRORHOOK */
        } while (p_triggered_db != NULL);
    242a:	20 97       	sbiw	r28, 0x00	; 0
    242c:	e9 f6       	brne	.-70     	; 0x23e8 <osEE_counter_increment+0x92>
    }
    /* XXX: Unlock the core only at the End of The Service, to not incur in
            races when handling cycling triggers. */
    osEE_unlock_core_id(counter_core_id);
  }
}
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	ff 90       	pop	r15
    2438:	ef 90       	pop	r14
    243a:	df 90       	pop	r13
    243c:	cf 90       	pop	r12
    243e:	bf 90       	pop	r11
    2440:	af 90       	pop	r10
    2442:	9f 90       	pop	r9
    2444:	8f 90       	pop	r8
    2446:	08 95       	ret
    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value = (p_counter_cb->value = 0U);
    } else {
      counter_value = ++p_counter_cb->value;
    2448:	2f 5f       	subi	r18, 0xFF	; 255
    244a:	3f 4f       	sbci	r19, 0xFF	; 255
    244c:	33 83       	std	Z+3, r19	; 0x03
    244e:	22 83       	std	Z+2, r18	; 0x02
    2450:	a0 cf       	rjmp	.-192    	; 0x2392 <osEE_counter_increment+0x3c>
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;

      ev = osEE_scheduler_task_activated(
    2452:	4e 81       	ldd	r20, Y+6	; 0x06
    2454:	5f 81       	ldd	r21, Y+7	; 0x07
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	61 ec       	ldi	r22, 0xC1	; 193
    245c:	71 e0       	ldi	r23, 0x01	; 1
    245e:	8f ea       	ldi	r24, 0xAF	; 175
    2460:	91 e0       	ldi	r25, 0x01	; 1
    2462:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <osEE_scheduler_task_activated>
    2466:	d7 cf       	rjmp	.-82     	; 0x2416 <osEE_counter_increment+0xc0>
    break;
#if (defined(OSEE_HAS_EVENTS))
    case OSEE_ACTION_EVENT:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
    2468:	4e 81       	ldd	r20, Y+6	; 0x06
    246a:	5f 81       	ldd	r21, Y+7	; 0x07
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_tcb = p_tdb->p_tcb;
    246c:	da 01       	movw	r26, r20
    246e:	14 96       	adiw	r26, 0x04	; 4
    2470:	ed 91       	ld	r30, X+
    2472:	fc 91       	ld	r31, X
      CONST(EventMaskType, AUTOMATIC)
        mask = p_action->param.mask;
    2474:	8a 85       	ldd	r24, Y+10	; 0x0a
    2476:	9b 85       	ldd	r25, Y+11	; 0x0b
      } else
#endif /* OSEE_HAS_CHECKS */
      {
        /* Set the event mask only if the task is not suspended */

        p_tcb->event_mask |= mask;
    2478:	26 81       	ldd	r18, Z+6	; 0x06
    247a:	37 81       	ldd	r19, Z+7	; 0x07
    247c:	28 2b       	or	r18, r24
    247e:	39 2b       	or	r19, r25
    2480:	37 83       	std	Z+7, r19	; 0x07
    2482:	26 83       	std	Z+6, r18	; 0x06

        if (((p_tcb->wait_mask & mask) != 0U) &&
    2484:	24 81       	ldd	r18, Z+4	; 0x04
    2486:	35 81       	ldd	r19, Z+5	; 0x05
    2488:	82 23       	and	r24, r18
    248a:	93 23       	and	r25, r19
    248c:	89 2b       	or	r24, r25
    248e:	19 f2       	breq	.-122    	; 0x2416 <osEE_counter_increment+0xc0>
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	03 97       	sbiw	r24, 0x03	; 3
    2496:	09 f0       	breq	.+2      	; 0x249a <osEE_counter_increment+0x144>
    2498:	be cf       	rjmp	.-132    	; 0x2416 <osEE_counter_increment+0xc0>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    249a:	d6 01       	movw	r26, r12
    249c:	14 96       	adiw	r26, 0x04	; 4
    249e:	ed 91       	ld	r30, X+
    24a0:	fc 91       	ld	r31, X
    24a2:	15 97       	sbiw	r26, 0x05	; 5
  (*pp_fist)              = p_sn_allocated->p_next;
    24a4:	80 81       	ld	r24, Z
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	15 96       	adiw	r26, 0x05	; 5
    24aa:	9c 93       	st	X, r25
    24ac:	8e 93       	st	-X, r24
    24ae:	14 97       	sbiw	r26, 0x04	; 4
  p_sn_allocated->p_next  = NULL;
    24b0:	11 82       	std	Z+1, r1	; 0x01
    24b2:	10 82       	st	Z, r1
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);

          p_sn->p_tdb = p_tdb;
    24b4:	53 83       	std	Z+3, r21	; 0x03
    24b6:	42 83       	std	Z+2, r20	; 0x02

          /* Release the TASK (and the SN) */
          (void)osEE_scheduler_task_unblocked(
    24b8:	af 01       	movw	r20, r30
    24ba:	61 ec       	ldi	r22, 0xC1	; 193
    24bc:	71 e0       	ldi	r23, 0x01	; 1
    24be:	8f ea       	ldi	r24, 0xAF	; 175
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <osEE_scheduler_task_unblocked>
    24c6:	a7 cf       	rjmp	.-178    	; 0x2416 <osEE_counter_increment+0xc0>
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
      osEE_counter_increment(p_action->param.p_counter_db);
    24c8:	88 85       	ldd	r24, Y+8	; 0x08
    24ca:	99 85       	ldd	r25, Y+9	; 0x09
    24cc:	0e 94 ab 11 	call	0x2356	; 0x2356 <osEE_counter_increment>
    24d0:	a2 cf       	rjmp	.-188    	; 0x2416 <osEE_counter_increment+0xc0>
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
    24d2:	ec 81       	ldd	r30, Y+4	; 0x04
    24d4:	fd 81       	ldd	r31, Y+5	; 0x05
    24d6:	09 95       	icall
    24d8:	9e cf       	rjmp	.-196    	; 0x2416 <osEE_counter_increment+0xc0>
  if (cycle > 0U) {
    osEE_counter_insert_rel_trigger(
      p_counter_db, p_trigger_db, cycle
    );
  } else {
    p_trigger_cb->active = OSEE_FALSE;
    24da:	f7 01       	movw	r30, r14
    24dc:	15 82       	std	Z+5, r1	; 0x05
    24de:	14 82       	std	Z+4, r1	; 0x04
    24e0:	a3 cf       	rjmp	.-186    	; 0x2428 <osEE_counter_increment+0xd2>

000024e2 <OsEE_atmega_startTimer1>:
 * - x < TIMER_1_PRESCALER_1024_MAX_TICKS = 4194304:	64     us
 */
void OsEE_atmega_startTimer1(uint32_t microsecondsInterval) {
  uint8_t	timer1Prescaler;
  uint16_t	timer1CompareValue;
  TCCR1B = 0;	/* Pause Timer. */
    24e2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  TCCR1A = 0;
    24e6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  TCCR1C = 0;
    24ea:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
  TCNT1  = 0;
    24ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    24f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
   * 0 1 1 clkIO/64 (From prescaler)
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    24f6:	61 15       	cp	r22, r1
    24f8:	20 e1       	ldi	r18, 0x10	; 16
    24fa:	72 07       	cpc	r23, r18
    24fc:	81 05       	cpc	r24, r1
    24fe:	91 05       	cpc	r25, r1
    2500:	a0 f4       	brcc	.+40     	; 0x252a <OsEE_atmega_startTimer1+0x48>
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
    2502:	e4 e0       	ldi	r30, 0x04	; 4
    2504:	66 0f       	add	r22, r22
    2506:	77 1f       	adc	r23, r23
    2508:	ea 95       	dec	r30
    250a:	e1 f7       	brne	.-8      	; 0x2504 <OsEE_atmega_startTimer1+0x22>
    250c:	61 50       	subi	r22, 0x01	; 1
    250e:	71 09       	sbc	r23, r1
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    2510:	81 e0       	ldi	r24, 0x01	; 1
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
  }
#else
  #error("Unsupported CPU frequency")
#endif
  TIFR1  = (1 << OCIE1A);	/* Clear Output Compare A Match Flag. */
    2512:	92 e0       	ldi	r25, 0x02	; 2
    2514:	96 bb       	out	0x16, r25	; 22
  TIMSK1 = (1 << OCIE1A);	/* Output Compare A Match Interrupt Enable */
    2516:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  OCR1A  = timer1CompareValue;	/* Set Compare A Match Value */
    251a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    251e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  TCCR1B = (1 << WGM12) | timer1Prescaler;	/* Set CTC Mode and Prescaler. */
    2522:	88 60       	ori	r24, 0x08	; 8
    2524:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
}	/* startTimer1() */
    2528:	08 95       	ret
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    252a:	61 15       	cp	r22, r1
    252c:	20 e8       	ldi	r18, 0x80	; 128
    252e:	72 07       	cpc	r23, r18
    2530:	81 05       	cpc	r24, r1
    2532:	91 05       	cpc	r25, r1
    2534:	30 f4       	brcc	.+12     	; 0x2542 <OsEE_atmega_startTimer1+0x60>
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
    2536:	66 0f       	add	r22, r22
    2538:	77 1f       	adc	r23, r23
    253a:	61 50       	subi	r22, 0x01	; 1
    253c:	71 09       	sbc	r23, r1
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	e8 cf       	rjmp	.-48     	; 0x2512 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    2542:	6c 3f       	cpi	r22, 0xFC	; 252
    2544:	2f ef       	ldi	r18, 0xFF	; 255
    2546:	72 07       	cpc	r23, r18
    2548:	23 e0       	ldi	r18, 0x03	; 3
    254a:	82 07       	cpc	r24, r18
    254c:	91 05       	cpc	r25, r1
    254e:	58 f4       	brcc	.+22     	; 0x2566 <OsEE_atmega_startTimer1+0x84>
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
    2550:	42 e0       	ldi	r20, 0x02	; 2
    2552:	96 95       	lsr	r25
    2554:	87 95       	ror	r24
    2556:	77 95       	ror	r23
    2558:	67 95       	ror	r22
    255a:	4a 95       	dec	r20
    255c:	d1 f7       	brne	.-12     	; 0x2552 <OsEE_atmega_startTimer1+0x70>
    255e:	61 50       	subi	r22, 0x01	; 1
    2560:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	d6 cf       	rjmp	.-84     	; 0x2512 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    2566:	61 15       	cp	r22, r1
    2568:	71 05       	cpc	r23, r1
    256a:	20 e1       	ldi	r18, 0x10	; 16
    256c:	82 07       	cpc	r24, r18
    256e:	91 05       	cpc	r25, r1
    2570:	58 f4       	brcc	.+22     	; 0x2588 <OsEE_atmega_startTimer1+0xa6>
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
    2572:	34 e0       	ldi	r19, 0x04	; 4
    2574:	96 95       	lsr	r25
    2576:	87 95       	ror	r24
    2578:	77 95       	ror	r23
    257a:	67 95       	ror	r22
    257c:	3a 95       	dec	r19
    257e:	d1 f7       	brne	.-12     	; 0x2574 <OsEE_atmega_startTimer1+0x92>
    2580:	61 50       	subi	r22, 0x01	; 1
    2582:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    2584:	84 e0       	ldi	r24, 0x04	; 4
    2586:	c5 cf       	rjmp	.-118    	; 0x2512 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
    2588:	26 e0       	ldi	r18, 0x06	; 6
    258a:	96 95       	lsr	r25
    258c:	87 95       	ror	r24
    258e:	77 95       	ror	r23
    2590:	67 95       	ror	r22
    2592:	2a 95       	dec	r18
    2594:	d1 f7       	brne	.-12     	; 0x258a <OsEE_atmega_startTimer1+0xa8>
    2596:	61 50       	subi	r22, 0x01	; 1
    2598:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    259a:	85 e0       	ldi	r24, 0x05	; 5
    259c:	ba cf       	rjmp	.-140    	; 0x2512 <OsEE_atmega_startTimer1+0x30>

0000259e <__subsf3>:
    259e:	50 58       	subi	r21, 0x80	; 128

000025a0 <__addsf3>:
    25a0:	bb 27       	eor	r27, r27
    25a2:	aa 27       	eor	r26, r26
    25a4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3x>
    25a8:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__fp_round>
    25ac:	0e 94 4c 14 	call	0x2898	; 0x2898 <__fp_pscA>
    25b0:	38 f0       	brcs	.+14     	; 0x25c0 <__addsf3+0x20>
    25b2:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_pscB>
    25b6:	20 f0       	brcs	.+8      	; 0x25c0 <__addsf3+0x20>
    25b8:	39 f4       	brne	.+14     	; 0x25c8 <__addsf3+0x28>
    25ba:	9f 3f       	cpi	r25, 0xFF	; 255
    25bc:	19 f4       	brne	.+6      	; 0x25c4 <__addsf3+0x24>
    25be:	26 f4       	brtc	.+8      	; 0x25c8 <__addsf3+0x28>
    25c0:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__fp_nan>
    25c4:	0e f4       	brtc	.+2      	; 0x25c8 <__addsf3+0x28>
    25c6:	e0 95       	com	r30
    25c8:	e7 fb       	bst	r30, 7
    25ca:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__fp_inf>

000025ce <__addsf3x>:
    25ce:	e9 2f       	mov	r30, r25
    25d0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__fp_split3>
    25d4:	58 f3       	brcs	.-42     	; 0x25ac <__addsf3+0xc>
    25d6:	ba 17       	cp	r27, r26
    25d8:	62 07       	cpc	r22, r18
    25da:	73 07       	cpc	r23, r19
    25dc:	84 07       	cpc	r24, r20
    25de:	95 07       	cpc	r25, r21
    25e0:	20 f0       	brcs	.+8      	; 0x25ea <__addsf3x+0x1c>
    25e2:	79 f4       	brne	.+30     	; 0x2602 <__addsf3x+0x34>
    25e4:	a6 f5       	brtc	.+104    	; 0x264e <__addsf3x+0x80>
    25e6:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__fp_zero>
    25ea:	0e f4       	brtc	.+2      	; 0x25ee <__addsf3x+0x20>
    25ec:	e0 95       	com	r30
    25ee:	0b 2e       	mov	r0, r27
    25f0:	ba 2f       	mov	r27, r26
    25f2:	a0 2d       	mov	r26, r0
    25f4:	0b 01       	movw	r0, r22
    25f6:	b9 01       	movw	r22, r18
    25f8:	90 01       	movw	r18, r0
    25fa:	0c 01       	movw	r0, r24
    25fc:	ca 01       	movw	r24, r20
    25fe:	a0 01       	movw	r20, r0
    2600:	11 24       	eor	r1, r1
    2602:	ff 27       	eor	r31, r31
    2604:	59 1b       	sub	r21, r25
    2606:	99 f0       	breq	.+38     	; 0x262e <__addsf3x+0x60>
    2608:	59 3f       	cpi	r21, 0xF9	; 249
    260a:	50 f4       	brcc	.+20     	; 0x2620 <__addsf3x+0x52>
    260c:	50 3e       	cpi	r21, 0xE0	; 224
    260e:	68 f1       	brcs	.+90     	; 0x266a <__addsf3x+0x9c>
    2610:	1a 16       	cp	r1, r26
    2612:	f0 40       	sbci	r31, 0x00	; 0
    2614:	a2 2f       	mov	r26, r18
    2616:	23 2f       	mov	r18, r19
    2618:	34 2f       	mov	r19, r20
    261a:	44 27       	eor	r20, r20
    261c:	58 5f       	subi	r21, 0xF8	; 248
    261e:	f3 cf       	rjmp	.-26     	; 0x2606 <__addsf3x+0x38>
    2620:	46 95       	lsr	r20
    2622:	37 95       	ror	r19
    2624:	27 95       	ror	r18
    2626:	a7 95       	ror	r26
    2628:	f0 40       	sbci	r31, 0x00	; 0
    262a:	53 95       	inc	r21
    262c:	c9 f7       	brne	.-14     	; 0x2620 <__addsf3x+0x52>
    262e:	7e f4       	brtc	.+30     	; 0x264e <__addsf3x+0x80>
    2630:	1f 16       	cp	r1, r31
    2632:	ba 0b       	sbc	r27, r26
    2634:	62 0b       	sbc	r22, r18
    2636:	73 0b       	sbc	r23, r19
    2638:	84 0b       	sbc	r24, r20
    263a:	ba f0       	brmi	.+46     	; 0x266a <__addsf3x+0x9c>
    263c:	91 50       	subi	r25, 0x01	; 1
    263e:	a1 f0       	breq	.+40     	; 0x2668 <__addsf3x+0x9a>
    2640:	ff 0f       	add	r31, r31
    2642:	bb 1f       	adc	r27, r27
    2644:	66 1f       	adc	r22, r22
    2646:	77 1f       	adc	r23, r23
    2648:	88 1f       	adc	r24, r24
    264a:	c2 f7       	brpl	.-16     	; 0x263c <__addsf3x+0x6e>
    264c:	0e c0       	rjmp	.+28     	; 0x266a <__addsf3x+0x9c>
    264e:	ba 0f       	add	r27, r26
    2650:	62 1f       	adc	r22, r18
    2652:	73 1f       	adc	r23, r19
    2654:	84 1f       	adc	r24, r20
    2656:	48 f4       	brcc	.+18     	; 0x266a <__addsf3x+0x9c>
    2658:	87 95       	ror	r24
    265a:	77 95       	ror	r23
    265c:	67 95       	ror	r22
    265e:	b7 95       	ror	r27
    2660:	f7 95       	ror	r31
    2662:	9e 3f       	cpi	r25, 0xFE	; 254
    2664:	08 f0       	brcs	.+2      	; 0x2668 <__addsf3x+0x9a>
    2666:	b0 cf       	rjmp	.-160    	; 0x25c8 <__addsf3+0x28>
    2668:	93 95       	inc	r25
    266a:	88 0f       	add	r24, r24
    266c:	08 f0       	brcs	.+2      	; 0x2670 <__addsf3x+0xa2>
    266e:	99 27       	eor	r25, r25
    2670:	ee 0f       	add	r30, r30
    2672:	97 95       	ror	r25
    2674:	87 95       	ror	r24
    2676:	08 95       	ret

00002678 <__cmpsf2>:
    2678:	0e 94 1f 14 	call	0x283e	; 0x283e <__fp_cmp>
    267c:	08 f4       	brcc	.+2      	; 0x2680 <__cmpsf2+0x8>
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	08 95       	ret

00002682 <__divsf3>:
    2682:	0e 94 55 13 	call	0x26aa	; 0x26aa <__divsf3x>
    2686:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__fp_round>
    268a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_pscB>
    268e:	58 f0       	brcs	.+22     	; 0x26a6 <__divsf3+0x24>
    2690:	0e 94 4c 14 	call	0x2898	; 0x2898 <__fp_pscA>
    2694:	40 f0       	brcs	.+16     	; 0x26a6 <__divsf3+0x24>
    2696:	29 f4       	brne	.+10     	; 0x26a2 <__divsf3+0x20>
    2698:	5f 3f       	cpi	r21, 0xFF	; 255
    269a:	29 f0       	breq	.+10     	; 0x26a6 <__divsf3+0x24>
    269c:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__fp_inf>
    26a0:	51 11       	cpse	r21, r1
    26a2:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_szero>
    26a6:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__fp_nan>

000026aa <__divsf3x>:
    26aa:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__fp_split3>
    26ae:	68 f3       	brcs	.-38     	; 0x268a <__divsf3+0x8>

000026b0 <__divsf3_pse>:
    26b0:	99 23       	and	r25, r25
    26b2:	b1 f3       	breq	.-20     	; 0x26a0 <__divsf3+0x1e>
    26b4:	55 23       	and	r21, r21
    26b6:	91 f3       	breq	.-28     	; 0x269c <__divsf3+0x1a>
    26b8:	95 1b       	sub	r25, r21
    26ba:	55 0b       	sbc	r21, r21
    26bc:	bb 27       	eor	r27, r27
    26be:	aa 27       	eor	r26, r26
    26c0:	62 17       	cp	r22, r18
    26c2:	73 07       	cpc	r23, r19
    26c4:	84 07       	cpc	r24, r20
    26c6:	38 f0       	brcs	.+14     	; 0x26d6 <__divsf3_pse+0x26>
    26c8:	9f 5f       	subi	r25, 0xFF	; 255
    26ca:	5f 4f       	sbci	r21, 0xFF	; 255
    26cc:	22 0f       	add	r18, r18
    26ce:	33 1f       	adc	r19, r19
    26d0:	44 1f       	adc	r20, r20
    26d2:	aa 1f       	adc	r26, r26
    26d4:	a9 f3       	breq	.-22     	; 0x26c0 <__divsf3_pse+0x10>
    26d6:	35 d0       	rcall	.+106    	; 0x2742 <__divsf3_pse+0x92>
    26d8:	0e 2e       	mov	r0, r30
    26da:	3a f0       	brmi	.+14     	; 0x26ea <__divsf3_pse+0x3a>
    26dc:	e0 e8       	ldi	r30, 0x80	; 128
    26de:	32 d0       	rcall	.+100    	; 0x2744 <__divsf3_pse+0x94>
    26e0:	91 50       	subi	r25, 0x01	; 1
    26e2:	50 40       	sbci	r21, 0x00	; 0
    26e4:	e6 95       	lsr	r30
    26e6:	00 1c       	adc	r0, r0
    26e8:	ca f7       	brpl	.-14     	; 0x26dc <__divsf3_pse+0x2c>
    26ea:	2b d0       	rcall	.+86     	; 0x2742 <__divsf3_pse+0x92>
    26ec:	fe 2f       	mov	r31, r30
    26ee:	29 d0       	rcall	.+82     	; 0x2742 <__divsf3_pse+0x92>
    26f0:	66 0f       	add	r22, r22
    26f2:	77 1f       	adc	r23, r23
    26f4:	88 1f       	adc	r24, r24
    26f6:	bb 1f       	adc	r27, r27
    26f8:	26 17       	cp	r18, r22
    26fa:	37 07       	cpc	r19, r23
    26fc:	48 07       	cpc	r20, r24
    26fe:	ab 07       	cpc	r26, r27
    2700:	b0 e8       	ldi	r27, 0x80	; 128
    2702:	09 f0       	breq	.+2      	; 0x2706 <__divsf3_pse+0x56>
    2704:	bb 0b       	sbc	r27, r27
    2706:	80 2d       	mov	r24, r0
    2708:	bf 01       	movw	r22, r30
    270a:	ff 27       	eor	r31, r31
    270c:	93 58       	subi	r25, 0x83	; 131
    270e:	5f 4f       	sbci	r21, 0xFF	; 255
    2710:	3a f0       	brmi	.+14     	; 0x2720 <__divsf3_pse+0x70>
    2712:	9e 3f       	cpi	r25, 0xFE	; 254
    2714:	51 05       	cpc	r21, r1
    2716:	78 f0       	brcs	.+30     	; 0x2736 <__divsf3_pse+0x86>
    2718:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__fp_inf>
    271c:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_szero>
    2720:	5f 3f       	cpi	r21, 0xFF	; 255
    2722:	e4 f3       	brlt	.-8      	; 0x271c <__divsf3_pse+0x6c>
    2724:	98 3e       	cpi	r25, 0xE8	; 232
    2726:	d4 f3       	brlt	.-12     	; 0x271c <__divsf3_pse+0x6c>
    2728:	86 95       	lsr	r24
    272a:	77 95       	ror	r23
    272c:	67 95       	ror	r22
    272e:	b7 95       	ror	r27
    2730:	f7 95       	ror	r31
    2732:	9f 5f       	subi	r25, 0xFF	; 255
    2734:	c9 f7       	brne	.-14     	; 0x2728 <__divsf3_pse+0x78>
    2736:	88 0f       	add	r24, r24
    2738:	91 1d       	adc	r25, r1
    273a:	96 95       	lsr	r25
    273c:	87 95       	ror	r24
    273e:	97 f9       	bld	r25, 7
    2740:	08 95       	ret
    2742:	e1 e0       	ldi	r30, 0x01	; 1
    2744:	66 0f       	add	r22, r22
    2746:	77 1f       	adc	r23, r23
    2748:	88 1f       	adc	r24, r24
    274a:	bb 1f       	adc	r27, r27
    274c:	62 17       	cp	r22, r18
    274e:	73 07       	cpc	r23, r19
    2750:	84 07       	cpc	r24, r20
    2752:	ba 07       	cpc	r27, r26
    2754:	20 f0       	brcs	.+8      	; 0x275e <__divsf3_pse+0xae>
    2756:	62 1b       	sub	r22, r18
    2758:	73 0b       	sbc	r23, r19
    275a:	84 0b       	sbc	r24, r20
    275c:	ba 0b       	sbc	r27, r26
    275e:	ee 1f       	adc	r30, r30
    2760:	88 f7       	brcc	.-30     	; 0x2744 <__divsf3_pse+0x94>
    2762:	e0 95       	com	r30
    2764:	08 95       	ret

00002766 <__fixunssfsi>:
    2766:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__fp_splitA>
    276a:	88 f0       	brcs	.+34     	; 0x278e <__fixunssfsi+0x28>
    276c:	9f 57       	subi	r25, 0x7F	; 127
    276e:	98 f0       	brcs	.+38     	; 0x2796 <__fixunssfsi+0x30>
    2770:	b9 2f       	mov	r27, r25
    2772:	99 27       	eor	r25, r25
    2774:	b7 51       	subi	r27, 0x17	; 23
    2776:	b0 f0       	brcs	.+44     	; 0x27a4 <__fixunssfsi+0x3e>
    2778:	e1 f0       	breq	.+56     	; 0x27b2 <__fixunssfsi+0x4c>
    277a:	66 0f       	add	r22, r22
    277c:	77 1f       	adc	r23, r23
    277e:	88 1f       	adc	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	1a f0       	brmi	.+6      	; 0x278a <__fixunssfsi+0x24>
    2784:	ba 95       	dec	r27
    2786:	c9 f7       	brne	.-14     	; 0x277a <__fixunssfsi+0x14>
    2788:	14 c0       	rjmp	.+40     	; 0x27b2 <__fixunssfsi+0x4c>
    278a:	b1 30       	cpi	r27, 0x01	; 1
    278c:	91 f0       	breq	.+36     	; 0x27b2 <__fixunssfsi+0x4c>
    278e:	0e 94 8d 14 	call	0x291a	; 0x291a <__fp_zero>
    2792:	b1 e0       	ldi	r27, 0x01	; 1
    2794:	08 95       	ret
    2796:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__fp_zero>
    279a:	67 2f       	mov	r22, r23
    279c:	78 2f       	mov	r23, r24
    279e:	88 27       	eor	r24, r24
    27a0:	b8 5f       	subi	r27, 0xF8	; 248
    27a2:	39 f0       	breq	.+14     	; 0x27b2 <__fixunssfsi+0x4c>
    27a4:	b9 3f       	cpi	r27, 0xF9	; 249
    27a6:	cc f3       	brlt	.-14     	; 0x279a <__fixunssfsi+0x34>
    27a8:	86 95       	lsr	r24
    27aa:	77 95       	ror	r23
    27ac:	67 95       	ror	r22
    27ae:	b3 95       	inc	r27
    27b0:	d9 f7       	brne	.-10     	; 0x27a8 <__fixunssfsi+0x42>
    27b2:	3e f4       	brtc	.+14     	; 0x27c2 <__fixunssfsi+0x5c>
    27b4:	90 95       	com	r25
    27b6:	80 95       	com	r24
    27b8:	70 95       	com	r23
    27ba:	61 95       	neg	r22
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	8f 4f       	sbci	r24, 0xFF	; 255
    27c0:	9f 4f       	sbci	r25, 0xFF	; 255
    27c2:	08 95       	ret

000027c4 <__floatunsisf>:
    27c4:	e8 94       	clt
    27c6:	09 c0       	rjmp	.+18     	; 0x27da <__floatsisf+0x12>

000027c8 <__floatsisf>:
    27c8:	97 fb       	bst	r25, 7
    27ca:	3e f4       	brtc	.+14     	; 0x27da <__floatsisf+0x12>
    27cc:	90 95       	com	r25
    27ce:	80 95       	com	r24
    27d0:	70 95       	com	r23
    27d2:	61 95       	neg	r22
    27d4:	7f 4f       	sbci	r23, 0xFF	; 255
    27d6:	8f 4f       	sbci	r24, 0xFF	; 255
    27d8:	9f 4f       	sbci	r25, 0xFF	; 255
    27da:	99 23       	and	r25, r25
    27dc:	a9 f0       	breq	.+42     	; 0x2808 <__floatsisf+0x40>
    27de:	f9 2f       	mov	r31, r25
    27e0:	96 e9       	ldi	r25, 0x96	; 150
    27e2:	bb 27       	eor	r27, r27
    27e4:	93 95       	inc	r25
    27e6:	f6 95       	lsr	r31
    27e8:	87 95       	ror	r24
    27ea:	77 95       	ror	r23
    27ec:	67 95       	ror	r22
    27ee:	b7 95       	ror	r27
    27f0:	f1 11       	cpse	r31, r1
    27f2:	f8 cf       	rjmp	.-16     	; 0x27e4 <__floatsisf+0x1c>
    27f4:	fa f4       	brpl	.+62     	; 0x2834 <__floatsisf+0x6c>
    27f6:	bb 0f       	add	r27, r27
    27f8:	11 f4       	brne	.+4      	; 0x27fe <__floatsisf+0x36>
    27fa:	60 ff       	sbrs	r22, 0
    27fc:	1b c0       	rjmp	.+54     	; 0x2834 <__floatsisf+0x6c>
    27fe:	6f 5f       	subi	r22, 0xFF	; 255
    2800:	7f 4f       	sbci	r23, 0xFF	; 255
    2802:	8f 4f       	sbci	r24, 0xFF	; 255
    2804:	9f 4f       	sbci	r25, 0xFF	; 255
    2806:	16 c0       	rjmp	.+44     	; 0x2834 <__floatsisf+0x6c>
    2808:	88 23       	and	r24, r24
    280a:	11 f0       	breq	.+4      	; 0x2810 <__floatsisf+0x48>
    280c:	96 e9       	ldi	r25, 0x96	; 150
    280e:	11 c0       	rjmp	.+34     	; 0x2832 <__floatsisf+0x6a>
    2810:	77 23       	and	r23, r23
    2812:	21 f0       	breq	.+8      	; 0x281c <__floatsisf+0x54>
    2814:	9e e8       	ldi	r25, 0x8E	; 142
    2816:	87 2f       	mov	r24, r23
    2818:	76 2f       	mov	r23, r22
    281a:	05 c0       	rjmp	.+10     	; 0x2826 <__floatsisf+0x5e>
    281c:	66 23       	and	r22, r22
    281e:	71 f0       	breq	.+28     	; 0x283c <__floatsisf+0x74>
    2820:	96 e8       	ldi	r25, 0x86	; 134
    2822:	86 2f       	mov	r24, r22
    2824:	70 e0       	ldi	r23, 0x00	; 0
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	2a f0       	brmi	.+10     	; 0x2834 <__floatsisf+0x6c>
    282a:	9a 95       	dec	r25
    282c:	66 0f       	add	r22, r22
    282e:	77 1f       	adc	r23, r23
    2830:	88 1f       	adc	r24, r24
    2832:	da f7       	brpl	.-10     	; 0x282a <__floatsisf+0x62>
    2834:	88 0f       	add	r24, r24
    2836:	96 95       	lsr	r25
    2838:	87 95       	ror	r24
    283a:	97 f9       	bld	r25, 7
    283c:	08 95       	ret

0000283e <__fp_cmp>:
    283e:	99 0f       	add	r25, r25
    2840:	00 08       	sbc	r0, r0
    2842:	55 0f       	add	r21, r21
    2844:	aa 0b       	sbc	r26, r26
    2846:	e0 e8       	ldi	r30, 0x80	; 128
    2848:	fe ef       	ldi	r31, 0xFE	; 254
    284a:	16 16       	cp	r1, r22
    284c:	17 06       	cpc	r1, r23
    284e:	e8 07       	cpc	r30, r24
    2850:	f9 07       	cpc	r31, r25
    2852:	c0 f0       	brcs	.+48     	; 0x2884 <__fp_cmp+0x46>
    2854:	12 16       	cp	r1, r18
    2856:	13 06       	cpc	r1, r19
    2858:	e4 07       	cpc	r30, r20
    285a:	f5 07       	cpc	r31, r21
    285c:	98 f0       	brcs	.+38     	; 0x2884 <__fp_cmp+0x46>
    285e:	62 1b       	sub	r22, r18
    2860:	73 0b       	sbc	r23, r19
    2862:	84 0b       	sbc	r24, r20
    2864:	95 0b       	sbc	r25, r21
    2866:	39 f4       	brne	.+14     	; 0x2876 <__fp_cmp+0x38>
    2868:	0a 26       	eor	r0, r26
    286a:	61 f0       	breq	.+24     	; 0x2884 <__fp_cmp+0x46>
    286c:	23 2b       	or	r18, r19
    286e:	24 2b       	or	r18, r20
    2870:	25 2b       	or	r18, r21
    2872:	21 f4       	brne	.+8      	; 0x287c <__fp_cmp+0x3e>
    2874:	08 95       	ret
    2876:	0a 26       	eor	r0, r26
    2878:	09 f4       	brne	.+2      	; 0x287c <__fp_cmp+0x3e>
    287a:	a1 40       	sbci	r26, 0x01	; 1
    287c:	a6 95       	lsr	r26
    287e:	8f ef       	ldi	r24, 0xFF	; 255
    2880:	81 1d       	adc	r24, r1
    2882:	81 1d       	adc	r24, r1
    2884:	08 95       	ret

00002886 <__fp_inf>:
    2886:	97 f9       	bld	r25, 7
    2888:	9f 67       	ori	r25, 0x7F	; 127
    288a:	80 e8       	ldi	r24, 0x80	; 128
    288c:	70 e0       	ldi	r23, 0x00	; 0
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	08 95       	ret

00002892 <__fp_nan>:
    2892:	9f ef       	ldi	r25, 0xFF	; 255
    2894:	80 ec       	ldi	r24, 0xC0	; 192
    2896:	08 95       	ret

00002898 <__fp_pscA>:
    2898:	00 24       	eor	r0, r0
    289a:	0a 94       	dec	r0
    289c:	16 16       	cp	r1, r22
    289e:	17 06       	cpc	r1, r23
    28a0:	18 06       	cpc	r1, r24
    28a2:	09 06       	cpc	r0, r25
    28a4:	08 95       	ret

000028a6 <__fp_pscB>:
    28a6:	00 24       	eor	r0, r0
    28a8:	0a 94       	dec	r0
    28aa:	12 16       	cp	r1, r18
    28ac:	13 06       	cpc	r1, r19
    28ae:	14 06       	cpc	r1, r20
    28b0:	05 06       	cpc	r0, r21
    28b2:	08 95       	ret

000028b4 <__fp_round>:
    28b4:	09 2e       	mov	r0, r25
    28b6:	03 94       	inc	r0
    28b8:	00 0c       	add	r0, r0
    28ba:	11 f4       	brne	.+4      	; 0x28c0 <__fp_round+0xc>
    28bc:	88 23       	and	r24, r24
    28be:	52 f0       	brmi	.+20     	; 0x28d4 <__fp_round+0x20>
    28c0:	bb 0f       	add	r27, r27
    28c2:	40 f4       	brcc	.+16     	; 0x28d4 <__fp_round+0x20>
    28c4:	bf 2b       	or	r27, r31
    28c6:	11 f4       	brne	.+4      	; 0x28cc <__fp_round+0x18>
    28c8:	60 ff       	sbrs	r22, 0
    28ca:	04 c0       	rjmp	.+8      	; 0x28d4 <__fp_round+0x20>
    28cc:	6f 5f       	subi	r22, 0xFF	; 255
    28ce:	7f 4f       	sbci	r23, 0xFF	; 255
    28d0:	8f 4f       	sbci	r24, 0xFF	; 255
    28d2:	9f 4f       	sbci	r25, 0xFF	; 255
    28d4:	08 95       	ret

000028d6 <__fp_split3>:
    28d6:	57 fd       	sbrc	r21, 7
    28d8:	90 58       	subi	r25, 0x80	; 128
    28da:	44 0f       	add	r20, r20
    28dc:	55 1f       	adc	r21, r21
    28de:	59 f0       	breq	.+22     	; 0x28f6 <__fp_splitA+0x10>
    28e0:	5f 3f       	cpi	r21, 0xFF	; 255
    28e2:	71 f0       	breq	.+28     	; 0x2900 <__fp_splitA+0x1a>
    28e4:	47 95       	ror	r20

000028e6 <__fp_splitA>:
    28e6:	88 0f       	add	r24, r24
    28e8:	97 fb       	bst	r25, 7
    28ea:	99 1f       	adc	r25, r25
    28ec:	61 f0       	breq	.+24     	; 0x2906 <__fp_splitA+0x20>
    28ee:	9f 3f       	cpi	r25, 0xFF	; 255
    28f0:	79 f0       	breq	.+30     	; 0x2910 <__fp_splitA+0x2a>
    28f2:	87 95       	ror	r24
    28f4:	08 95       	ret
    28f6:	12 16       	cp	r1, r18
    28f8:	13 06       	cpc	r1, r19
    28fa:	14 06       	cpc	r1, r20
    28fc:	55 1f       	adc	r21, r21
    28fe:	f2 cf       	rjmp	.-28     	; 0x28e4 <__fp_split3+0xe>
    2900:	46 95       	lsr	r20
    2902:	f1 df       	rcall	.-30     	; 0x28e6 <__fp_splitA>
    2904:	08 c0       	rjmp	.+16     	; 0x2916 <__fp_splitA+0x30>
    2906:	16 16       	cp	r1, r22
    2908:	17 06       	cpc	r1, r23
    290a:	18 06       	cpc	r1, r24
    290c:	99 1f       	adc	r25, r25
    290e:	f1 cf       	rjmp	.-30     	; 0x28f2 <__fp_splitA+0xc>
    2910:	86 95       	lsr	r24
    2912:	71 05       	cpc	r23, r1
    2914:	61 05       	cpc	r22, r1
    2916:	08 94       	sec
    2918:	08 95       	ret

0000291a <__fp_zero>:
    291a:	e8 94       	clt

0000291c <__fp_szero>:
    291c:	bb 27       	eor	r27, r27
    291e:	66 27       	eor	r22, r22
    2920:	77 27       	eor	r23, r23
    2922:	cb 01       	movw	r24, r22
    2924:	97 f9       	bld	r25, 7
    2926:	08 95       	ret

00002928 <__gesf2>:
    2928:	0e 94 1f 14 	call	0x283e	; 0x283e <__fp_cmp>
    292c:	08 f4       	brcc	.+2      	; 0x2930 <__gesf2+0x8>
    292e:	8f ef       	ldi	r24, 0xFF	; 255
    2930:	08 95       	ret

00002932 <__mulsf3>:
    2932:	0e 94 ac 14 	call	0x2958	; 0x2958 <__mulsf3x>
    2936:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__fp_round>
    293a:	0e 94 4c 14 	call	0x2898	; 0x2898 <__fp_pscA>
    293e:	38 f0       	brcs	.+14     	; 0x294e <__mulsf3+0x1c>
    2940:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_pscB>
    2944:	20 f0       	brcs	.+8      	; 0x294e <__mulsf3+0x1c>
    2946:	95 23       	and	r25, r21
    2948:	11 f0       	breq	.+4      	; 0x294e <__mulsf3+0x1c>
    294a:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__fp_inf>
    294e:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__fp_nan>
    2952:	11 24       	eor	r1, r1
    2954:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_szero>

00002958 <__mulsf3x>:
    2958:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__fp_split3>
    295c:	70 f3       	brcs	.-36     	; 0x293a <__mulsf3+0x8>

0000295e <__mulsf3_pse>:
    295e:	95 9f       	mul	r25, r21
    2960:	c1 f3       	breq	.-16     	; 0x2952 <__mulsf3+0x20>
    2962:	95 0f       	add	r25, r21
    2964:	50 e0       	ldi	r21, 0x00	; 0
    2966:	55 1f       	adc	r21, r21
    2968:	62 9f       	mul	r22, r18
    296a:	f0 01       	movw	r30, r0
    296c:	72 9f       	mul	r23, r18
    296e:	bb 27       	eor	r27, r27
    2970:	f0 0d       	add	r31, r0
    2972:	b1 1d       	adc	r27, r1
    2974:	63 9f       	mul	r22, r19
    2976:	aa 27       	eor	r26, r26
    2978:	f0 0d       	add	r31, r0
    297a:	b1 1d       	adc	r27, r1
    297c:	aa 1f       	adc	r26, r26
    297e:	64 9f       	mul	r22, r20
    2980:	66 27       	eor	r22, r22
    2982:	b0 0d       	add	r27, r0
    2984:	a1 1d       	adc	r26, r1
    2986:	66 1f       	adc	r22, r22
    2988:	82 9f       	mul	r24, r18
    298a:	22 27       	eor	r18, r18
    298c:	b0 0d       	add	r27, r0
    298e:	a1 1d       	adc	r26, r1
    2990:	62 1f       	adc	r22, r18
    2992:	73 9f       	mul	r23, r19
    2994:	b0 0d       	add	r27, r0
    2996:	a1 1d       	adc	r26, r1
    2998:	62 1f       	adc	r22, r18
    299a:	83 9f       	mul	r24, r19
    299c:	a0 0d       	add	r26, r0
    299e:	61 1d       	adc	r22, r1
    29a0:	22 1f       	adc	r18, r18
    29a2:	74 9f       	mul	r23, r20
    29a4:	33 27       	eor	r19, r19
    29a6:	a0 0d       	add	r26, r0
    29a8:	61 1d       	adc	r22, r1
    29aa:	23 1f       	adc	r18, r19
    29ac:	84 9f       	mul	r24, r20
    29ae:	60 0d       	add	r22, r0
    29b0:	21 1d       	adc	r18, r1
    29b2:	82 2f       	mov	r24, r18
    29b4:	76 2f       	mov	r23, r22
    29b6:	6a 2f       	mov	r22, r26
    29b8:	11 24       	eor	r1, r1
    29ba:	9f 57       	subi	r25, 0x7F	; 127
    29bc:	50 40       	sbci	r21, 0x00	; 0
    29be:	9a f0       	brmi	.+38     	; 0x29e6 <__mulsf3_pse+0x88>
    29c0:	f1 f0       	breq	.+60     	; 0x29fe <__mulsf3_pse+0xa0>
    29c2:	88 23       	and	r24, r24
    29c4:	4a f0       	brmi	.+18     	; 0x29d8 <__mulsf3_pse+0x7a>
    29c6:	ee 0f       	add	r30, r30
    29c8:	ff 1f       	adc	r31, r31
    29ca:	bb 1f       	adc	r27, r27
    29cc:	66 1f       	adc	r22, r22
    29ce:	77 1f       	adc	r23, r23
    29d0:	88 1f       	adc	r24, r24
    29d2:	91 50       	subi	r25, 0x01	; 1
    29d4:	50 40       	sbci	r21, 0x00	; 0
    29d6:	a9 f7       	brne	.-22     	; 0x29c2 <__mulsf3_pse+0x64>
    29d8:	9e 3f       	cpi	r25, 0xFE	; 254
    29da:	51 05       	cpc	r21, r1
    29dc:	80 f0       	brcs	.+32     	; 0x29fe <__mulsf3_pse+0xa0>
    29de:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__fp_inf>
    29e2:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_szero>
    29e6:	5f 3f       	cpi	r21, 0xFF	; 255
    29e8:	e4 f3       	brlt	.-8      	; 0x29e2 <__mulsf3_pse+0x84>
    29ea:	98 3e       	cpi	r25, 0xE8	; 232
    29ec:	d4 f3       	brlt	.-12     	; 0x29e2 <__mulsf3_pse+0x84>
    29ee:	86 95       	lsr	r24
    29f0:	77 95       	ror	r23
    29f2:	67 95       	ror	r22
    29f4:	b7 95       	ror	r27
    29f6:	f7 95       	ror	r31
    29f8:	e7 95       	ror	r30
    29fa:	9f 5f       	subi	r25, 0xFF	; 255
    29fc:	c1 f7       	brne	.-16     	; 0x29ee <__mulsf3_pse+0x90>
    29fe:	fe 2b       	or	r31, r30
    2a00:	88 0f       	add	r24, r24
    2a02:	91 1d       	adc	r25, r1
    2a04:	96 95       	lsr	r25
    2a06:	87 95       	ror	r24
    2a08:	97 f9       	bld	r25, 7
    2a0a:	08 95       	ret

00002a0c <pow>:
    2a0c:	fa 01       	movw	r30, r20
    2a0e:	ee 0f       	add	r30, r30
    2a10:	ff 1f       	adc	r31, r31
    2a12:	30 96       	adiw	r30, 0x00	; 0
    2a14:	21 05       	cpc	r18, r1
    2a16:	31 05       	cpc	r19, r1
    2a18:	a1 f1       	breq	.+104    	; 0x2a82 <pow+0x76>
    2a1a:	61 15       	cp	r22, r1
    2a1c:	71 05       	cpc	r23, r1
    2a1e:	61 f4       	brne	.+24     	; 0x2a38 <pow+0x2c>
    2a20:	80 38       	cpi	r24, 0x80	; 128
    2a22:	bf e3       	ldi	r27, 0x3F	; 63
    2a24:	9b 07       	cpc	r25, r27
    2a26:	49 f1       	breq	.+82     	; 0x2a7a <pow+0x6e>
    2a28:	68 94       	set
    2a2a:	90 38       	cpi	r25, 0x80	; 128
    2a2c:	81 05       	cpc	r24, r1
    2a2e:	61 f0       	breq	.+24     	; 0x2a48 <pow+0x3c>
    2a30:	80 38       	cpi	r24, 0x80	; 128
    2a32:	bf ef       	ldi	r27, 0xFF	; 255
    2a34:	9b 07       	cpc	r25, r27
    2a36:	41 f0       	breq	.+16     	; 0x2a48 <pow+0x3c>
    2a38:	99 23       	and	r25, r25
    2a3a:	4a f5       	brpl	.+82     	; 0x2a8e <pow+0x82>
    2a3c:	ff 3f       	cpi	r31, 0xFF	; 255
    2a3e:	e1 05       	cpc	r30, r1
    2a40:	31 05       	cpc	r19, r1
    2a42:	21 05       	cpc	r18, r1
    2a44:	19 f1       	breq	.+70     	; 0x2a8c <pow+0x80>
    2a46:	e8 94       	clt
    2a48:	08 94       	sec
    2a4a:	e7 95       	ror	r30
    2a4c:	d9 01       	movw	r26, r18
    2a4e:	aa 23       	and	r26, r26
    2a50:	29 f4       	brne	.+10     	; 0x2a5c <pow+0x50>
    2a52:	ab 2f       	mov	r26, r27
    2a54:	be 2f       	mov	r27, r30
    2a56:	f8 5f       	subi	r31, 0xF8	; 248
    2a58:	d0 f3       	brcs	.-12     	; 0x2a4e <pow+0x42>
    2a5a:	10 c0       	rjmp	.+32     	; 0x2a7c <pow+0x70>
    2a5c:	ff 5f       	subi	r31, 0xFF	; 255
    2a5e:	70 f4       	brcc	.+28     	; 0x2a7c <pow+0x70>
    2a60:	a6 95       	lsr	r26
    2a62:	e0 f7       	brcc	.-8      	; 0x2a5c <pow+0x50>
    2a64:	f7 39       	cpi	r31, 0x97	; 151
    2a66:	50 f0       	brcs	.+20     	; 0x2a7c <pow+0x70>
    2a68:	19 f0       	breq	.+6      	; 0x2a70 <pow+0x64>
    2a6a:	ff 3a       	cpi	r31, 0xAF	; 175
    2a6c:	38 f4       	brcc	.+14     	; 0x2a7c <pow+0x70>
    2a6e:	9f 77       	andi	r25, 0x7F	; 127
    2a70:	9f 93       	push	r25
    2a72:	0d d0       	rcall	.+26     	; 0x2a8e <pow+0x82>
    2a74:	0f 90       	pop	r0
    2a76:	07 fc       	sbrc	r0, 7
    2a78:	90 58       	subi	r25, 0x80	; 128
    2a7a:	08 95       	ret
    2a7c:	46 f0       	brts	.+16     	; 0x2a8e <pow+0x82>
    2a7e:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__fp_nan>
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	80 e8       	ldi	r24, 0x80	; 128
    2a88:	9f e3       	ldi	r25, 0x3F	; 63
    2a8a:	08 95       	ret
    2a8c:	4f e7       	ldi	r20, 0x7F	; 127
    2a8e:	9f 77       	andi	r25, 0x7F	; 127
    2a90:	5f 93       	push	r21
    2a92:	4f 93       	push	r20
    2a94:	3f 93       	push	r19
    2a96:	2f 93       	push	r18
    2a98:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <log>
    2a9c:	2f 91       	pop	r18
    2a9e:	3f 91       	pop	r19
    2aa0:	4f 91       	pop	r20
    2aa2:	5f 91       	pop	r21
    2aa4:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsf3>
    2aa8:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <exp>

00002aac <__unordsf2>:
    2aac:	0e 94 1f 14 	call	0x283e	; 0x283e <__fp_cmp>
    2ab0:	88 0b       	sbc	r24, r24
    2ab2:	99 0b       	sbc	r25, r25
    2ab4:	08 95       	ret
    2ab6:	29 f4       	brne	.+10     	; 0x2ac2 <__unordsf2+0x16>
    2ab8:	16 f0       	brts	.+4      	; 0x2abe <__unordsf2+0x12>
    2aba:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__fp_inf>
    2abe:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__fp_zero>
    2ac2:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__fp_nan>

00002ac6 <exp>:
    2ac6:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__fp_splitA>
    2aca:	a8 f3       	brcs	.-22     	; 0x2ab6 <__unordsf2+0xa>
    2acc:	96 38       	cpi	r25, 0x86	; 134
    2ace:	a0 f7       	brcc	.-24     	; 0x2ab8 <__unordsf2+0xc>
    2ad0:	07 f8       	bld	r0, 7
    2ad2:	0f 92       	push	r0
    2ad4:	e8 94       	clt
    2ad6:	2b e3       	ldi	r18, 0x3B	; 59
    2ad8:	3a ea       	ldi	r19, 0xAA	; 170
    2ada:	48 eb       	ldi	r20, 0xB8	; 184
    2adc:	5f e7       	ldi	r21, 0x7F	; 127
    2ade:	0e 94 af 14 	call	0x295e	; 0x295e <__mulsf3_pse>
    2ae2:	0f 92       	push	r0
    2ae4:	0f 92       	push	r0
    2ae6:	0f 92       	push	r0
    2ae8:	4d b7       	in	r20, 0x3d	; 61
    2aea:	5e b7       	in	r21, 0x3e	; 62
    2aec:	0f 92       	push	r0
    2aee:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <modf>
    2af2:	e8 e6       	ldi	r30, 0x68	; 104
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__fp_powser>
    2afa:	4f 91       	pop	r20
    2afc:	5f 91       	pop	r21
    2afe:	ef 91       	pop	r30
    2b00:	ff 91       	pop	r31
    2b02:	e5 95       	asr	r30
    2b04:	ee 1f       	adc	r30, r30
    2b06:	ff 1f       	adc	r31, r31
    2b08:	49 f0       	breq	.+18     	; 0x2b1c <exp+0x56>
    2b0a:	fe 57       	subi	r31, 0x7E	; 126
    2b0c:	e0 68       	ori	r30, 0x80	; 128
    2b0e:	44 27       	eor	r20, r20
    2b10:	ee 0f       	add	r30, r30
    2b12:	44 1f       	adc	r20, r20
    2b14:	fa 95       	dec	r31
    2b16:	e1 f7       	brne	.-8      	; 0x2b10 <exp+0x4a>
    2b18:	41 95       	neg	r20
    2b1a:	55 0b       	sbc	r21, r21
    2b1c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <ldexp>
    2b20:	0f 90       	pop	r0
    2b22:	07 fe       	sbrs	r0, 7
    2b24:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <inverse>
    2b28:	08 95       	ret

00002b2a <__fp_powser>:
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	1f 93       	push	r17
    2b30:	0f 93       	push	r16
    2b32:	ff 92       	push	r15
    2b34:	ef 92       	push	r14
    2b36:	df 92       	push	r13
    2b38:	7b 01       	movw	r14, r22
    2b3a:	8c 01       	movw	r16, r24
    2b3c:	68 94       	set
    2b3e:	06 c0       	rjmp	.+12     	; 0x2b4c <__fp_powser+0x22>
    2b40:	da 2e       	mov	r13, r26
    2b42:	ef 01       	movw	r28, r30
    2b44:	0e 94 ac 14 	call	0x2958	; 0x2958 <__mulsf3x>
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e8 94       	clt
    2b4c:	a5 91       	lpm	r26, Z+
    2b4e:	25 91       	lpm	r18, Z+
    2b50:	35 91       	lpm	r19, Z+
    2b52:	45 91       	lpm	r20, Z+
    2b54:	55 91       	lpm	r21, Z+
    2b56:	a6 f3       	brts	.-24     	; 0x2b40 <__fp_powser+0x16>
    2b58:	ef 01       	movw	r28, r30
    2b5a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3x>
    2b5e:	fe 01       	movw	r30, r28
    2b60:	97 01       	movw	r18, r14
    2b62:	a8 01       	movw	r20, r16
    2b64:	da 94       	dec	r13
    2b66:	69 f7       	brne	.-38     	; 0x2b42 <__fp_powser+0x18>
    2b68:	df 90       	pop	r13
    2b6a:	ef 90       	pop	r14
    2b6c:	ff 90       	pop	r15
    2b6e:	0f 91       	pop	r16
    2b70:	1f 91       	pop	r17
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <inverse>:
    2b78:	9b 01       	movw	r18, r22
    2b7a:	ac 01       	movw	r20, r24
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
    2b7e:	70 e0       	ldi	r23, 0x00	; 0
    2b80:	80 e8       	ldi	r24, 0x80	; 128
    2b82:	9f e3       	ldi	r25, 0x3F	; 63
    2b84:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__divsf3>
    2b88:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__fp_inf>
    2b8c:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__fp_mpack>

00002b90 <ldexp>:
    2b90:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__fp_splitA>
    2b94:	d8 f3       	brcs	.-10     	; 0x2b8c <inverse+0x14>
    2b96:	99 23       	and	r25, r25
    2b98:	c9 f3       	breq	.-14     	; 0x2b8c <inverse+0x14>
    2b9a:	94 0f       	add	r25, r20
    2b9c:	51 1d       	adc	r21, r1
    2b9e:	a3 f3       	brvs	.-24     	; 0x2b88 <inverse+0x10>
    2ba0:	91 50       	subi	r25, 0x01	; 1
    2ba2:	50 40       	sbci	r21, 0x00	; 0
    2ba4:	94 f0       	brlt	.+36     	; 0x2bca <ldexp+0x3a>
    2ba6:	59 f0       	breq	.+22     	; 0x2bbe <ldexp+0x2e>
    2ba8:	88 23       	and	r24, r24
    2baa:	32 f0       	brmi	.+12     	; 0x2bb8 <ldexp+0x28>
    2bac:	66 0f       	add	r22, r22
    2bae:	77 1f       	adc	r23, r23
    2bb0:	88 1f       	adc	r24, r24
    2bb2:	91 50       	subi	r25, 0x01	; 1
    2bb4:	50 40       	sbci	r21, 0x00	; 0
    2bb6:	c1 f7       	brne	.-16     	; 0x2ba8 <ldexp+0x18>
    2bb8:	9e 3f       	cpi	r25, 0xFE	; 254
    2bba:	51 05       	cpc	r21, r1
    2bbc:	2c f7       	brge	.-54     	; 0x2b88 <inverse+0x10>
    2bbe:	88 0f       	add	r24, r24
    2bc0:	91 1d       	adc	r25, r1
    2bc2:	96 95       	lsr	r25
    2bc4:	87 95       	ror	r24
    2bc6:	97 f9       	bld	r25, 7
    2bc8:	08 95       	ret
    2bca:	5f 3f       	cpi	r21, 0xFF	; 255
    2bcc:	ac f0       	brlt	.+42     	; 0x2bf8 <ldexp+0x68>
    2bce:	98 3e       	cpi	r25, 0xE8	; 232
    2bd0:	9c f0       	brlt	.+38     	; 0x2bf8 <ldexp+0x68>
    2bd2:	bb 27       	eor	r27, r27
    2bd4:	86 95       	lsr	r24
    2bd6:	77 95       	ror	r23
    2bd8:	67 95       	ror	r22
    2bda:	b7 95       	ror	r27
    2bdc:	08 f4       	brcc	.+2      	; 0x2be0 <ldexp+0x50>
    2bde:	b1 60       	ori	r27, 0x01	; 1
    2be0:	93 95       	inc	r25
    2be2:	c1 f7       	brne	.-16     	; 0x2bd4 <ldexp+0x44>
    2be4:	bb 0f       	add	r27, r27
    2be6:	58 f7       	brcc	.-42     	; 0x2bbe <ldexp+0x2e>
    2be8:	11 f4       	brne	.+4      	; 0x2bee <ldexp+0x5e>
    2bea:	60 ff       	sbrs	r22, 0
    2bec:	e8 cf       	rjmp	.-48     	; 0x2bbe <ldexp+0x2e>
    2bee:	6f 5f       	subi	r22, 0xFF	; 255
    2bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    2bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf6:	e3 cf       	rjmp	.-58     	; 0x2bbe <ldexp+0x2e>
    2bf8:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__fp_szero>
    2bfc:	16 f0       	brts	.+4      	; 0x2c02 <ldexp+0x72>
    2bfe:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__fp_mpack>
    2c02:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__fp_nan>
    2c06:	68 94       	set
    2c08:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__fp_inf>

00002c0c <log>:
    2c0c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__fp_splitA>
    2c10:	a8 f3       	brcs	.-22     	; 0x2bfc <ldexp+0x6c>
    2c12:	99 23       	and	r25, r25
    2c14:	c1 f3       	breq	.-16     	; 0x2c06 <ldexp+0x76>
    2c16:	ae f3       	brts	.-22     	; 0x2c02 <ldexp+0x72>
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	1f 93       	push	r17
    2c1e:	0f 93       	push	r16
    2c20:	ff 92       	push	r15
    2c22:	c9 2f       	mov	r28, r25
    2c24:	dd 27       	eor	r29, r29
    2c26:	88 23       	and	r24, r24
    2c28:	2a f0       	brmi	.+10     	; 0x2c34 <log+0x28>
    2c2a:	21 97       	sbiw	r28, 0x01	; 1
    2c2c:	66 0f       	add	r22, r22
    2c2e:	77 1f       	adc	r23, r23
    2c30:	88 1f       	adc	r24, r24
    2c32:	da f7       	brpl	.-10     	; 0x2c2a <log+0x1e>
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e8       	ldi	r20, 0x80	; 128
    2c3a:	5f eb       	ldi	r21, 0xBF	; 191
    2c3c:	9f e3       	ldi	r25, 0x3F	; 63
    2c3e:	88 39       	cpi	r24, 0x98	; 152
    2c40:	20 f0       	brcs	.+8      	; 0x2c4a <log+0x3e>
    2c42:	80 3e       	cpi	r24, 0xE0	; 224
    2c44:	38 f0       	brcs	.+14     	; 0x2c54 <log+0x48>
    2c46:	21 96       	adiw	r28, 0x01	; 1
    2c48:	8f 77       	andi	r24, 0x7F	; 127
    2c4a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__addsf3>
    2c4e:	e0 e9       	ldi	r30, 0x90	; 144
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	04 c0       	rjmp	.+8      	; 0x2c5c <log+0x50>
    2c54:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__addsf3>
    2c58:	ed eb       	ldi	r30, 0xBD	; 189
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__fp_powser>
    2c60:	8b 01       	movw	r16, r22
    2c62:	be 01       	movw	r22, r28
    2c64:	ec 01       	movw	r28, r24
    2c66:	fb 2e       	mov	r15, r27
    2c68:	6f 57       	subi	r22, 0x7F	; 127
    2c6a:	71 09       	sbc	r23, r1
    2c6c:	75 95       	asr	r23
    2c6e:	77 1f       	adc	r23, r23
    2c70:	88 0b       	sbc	r24, r24
    2c72:	99 0b       	sbc	r25, r25
    2c74:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__floatsisf>
    2c78:	28 e1       	ldi	r18, 0x18	; 24
    2c7a:	32 e7       	ldi	r19, 0x72	; 114
    2c7c:	41 e3       	ldi	r20, 0x31	; 49
    2c7e:	5f e3       	ldi	r21, 0x3F	; 63
    2c80:	0e 94 ac 14 	call	0x2958	; 0x2958 <__mulsf3x>
    2c84:	af 2d       	mov	r26, r15
    2c86:	98 01       	movw	r18, r16
    2c88:	ae 01       	movw	r20, r28
    2c8a:	ff 90       	pop	r15
    2c8c:	0f 91       	pop	r16
    2c8e:	1f 91       	pop	r17
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__addsf3x>
    2c98:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__fp_round>

00002c9c <modf>:
    2c9c:	fa 01       	movw	r30, r20
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	aa 0f       	add	r26, r26
    2ca2:	bb 1f       	adc	r27, r27
    2ca4:	9b 01       	movw	r18, r22
    2ca6:	ac 01       	movw	r20, r24
    2ca8:	bf 57       	subi	r27, 0x7F	; 127
    2caa:	28 f4       	brcc	.+10     	; 0x2cb6 <modf+0x1a>
    2cac:	22 27       	eor	r18, r18
    2cae:	33 27       	eor	r19, r19
    2cb0:	44 27       	eor	r20, r20
    2cb2:	50 78       	andi	r21, 0x80	; 128
    2cb4:	20 c0       	rjmp	.+64     	; 0x2cf6 <modf+0x5a>
    2cb6:	b7 51       	subi	r27, 0x17	; 23
    2cb8:	90 f4       	brcc	.+36     	; 0x2cde <modf+0x42>
    2cba:	ab 2f       	mov	r26, r27
    2cbc:	00 24       	eor	r0, r0
    2cbe:	46 95       	lsr	r20
    2cc0:	37 95       	ror	r19
    2cc2:	27 95       	ror	r18
    2cc4:	01 1c       	adc	r0, r1
    2cc6:	a3 95       	inc	r26
    2cc8:	d2 f3       	brmi	.-12     	; 0x2cbe <modf+0x22>
    2cca:	00 20       	and	r0, r0
    2ccc:	71 f0       	breq	.+28     	; 0x2cea <modf+0x4e>
    2cce:	22 0f       	add	r18, r18
    2cd0:	33 1f       	adc	r19, r19
    2cd2:	44 1f       	adc	r20, r20
    2cd4:	b3 95       	inc	r27
    2cd6:	da f3       	brmi	.-10     	; 0x2cce <modf+0x32>
    2cd8:	0e d0       	rcall	.+28     	; 0x2cf6 <modf+0x5a>
    2cda:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__subsf3>
    2cde:	61 30       	cpi	r22, 0x01	; 1
    2ce0:	71 05       	cpc	r23, r1
    2ce2:	a0 e8       	ldi	r26, 0x80	; 128
    2ce4:	8a 07       	cpc	r24, r26
    2ce6:	b9 46       	sbci	r27, 0x69	; 105
    2ce8:	30 f4       	brcc	.+12     	; 0x2cf6 <modf+0x5a>
    2cea:	9b 01       	movw	r18, r22
    2cec:	ac 01       	movw	r20, r24
    2cee:	66 27       	eor	r22, r22
    2cf0:	77 27       	eor	r23, r23
    2cf2:	88 27       	eor	r24, r24
    2cf4:	90 78       	andi	r25, 0x80	; 128
    2cf6:	30 96       	adiw	r30, 0x00	; 0
    2cf8:	21 f0       	breq	.+8      	; 0x2d02 <modf+0x66>
    2cfa:	20 83       	st	Z, r18
    2cfc:	31 83       	std	Z+1, r19	; 0x01
    2cfe:	42 83       	std	Z+2, r20	; 0x02
    2d00:	53 83       	std	Z+3, r21	; 0x03
    2d02:	08 95       	ret

00002d04 <__fp_mpack>:
    2d04:	9f 3f       	cpi	r25, 0xFF	; 255
    2d06:	31 f0       	breq	.+12     	; 0x2d14 <__fp_mpack_finite+0xc>

00002d08 <__fp_mpack_finite>:
    2d08:	91 50       	subi	r25, 0x01	; 1
    2d0a:	20 f4       	brcc	.+8      	; 0x2d14 <__fp_mpack_finite+0xc>
    2d0c:	87 95       	ror	r24
    2d0e:	77 95       	ror	r23
    2d10:	67 95       	ror	r22
    2d12:	b7 95       	ror	r27
    2d14:	88 0f       	add	r24, r24
    2d16:	91 1d       	adc	r25, r1
    2d18:	96 95       	lsr	r25
    2d1a:	87 95       	ror	r24
    2d1c:	97 f9       	bld	r25, 7
    2d1e:	08 95       	ret

00002d20 <__divmodhi4>:
    2d20:	97 fb       	bst	r25, 7
    2d22:	07 2e       	mov	r0, r23
    2d24:	16 f4       	brtc	.+4      	; 0x2d2a <__divmodhi4+0xa>
    2d26:	00 94       	com	r0
    2d28:	07 d0       	rcall	.+14     	; 0x2d38 <__divmodhi4_neg1>
    2d2a:	77 fd       	sbrc	r23, 7
    2d2c:	09 d0       	rcall	.+18     	; 0x2d40 <__divmodhi4_neg2>
    2d2e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__udivmodhi4>
    2d32:	07 fc       	sbrc	r0, 7
    2d34:	05 d0       	rcall	.+10     	; 0x2d40 <__divmodhi4_neg2>
    2d36:	3e f4       	brtc	.+14     	; 0x2d46 <__divmodhi4_exit>

00002d38 <__divmodhi4_neg1>:
    2d38:	90 95       	com	r25
    2d3a:	81 95       	neg	r24
    2d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3e:	08 95       	ret

00002d40 <__divmodhi4_neg2>:
    2d40:	70 95       	com	r23
    2d42:	61 95       	neg	r22
    2d44:	7f 4f       	sbci	r23, 0xFF	; 255

00002d46 <__divmodhi4_exit>:
    2d46:	08 95       	ret

00002d48 <__udivmodsi4>:
    2d48:	a1 e2       	ldi	r26, 0x21	; 33
    2d4a:	1a 2e       	mov	r1, r26
    2d4c:	aa 1b       	sub	r26, r26
    2d4e:	bb 1b       	sub	r27, r27
    2d50:	fd 01       	movw	r30, r26
    2d52:	0d c0       	rjmp	.+26     	; 0x2d6e <__udivmodsi4_ep>

00002d54 <__udivmodsi4_loop>:
    2d54:	aa 1f       	adc	r26, r26
    2d56:	bb 1f       	adc	r27, r27
    2d58:	ee 1f       	adc	r30, r30
    2d5a:	ff 1f       	adc	r31, r31
    2d5c:	a2 17       	cp	r26, r18
    2d5e:	b3 07       	cpc	r27, r19
    2d60:	e4 07       	cpc	r30, r20
    2d62:	f5 07       	cpc	r31, r21
    2d64:	20 f0       	brcs	.+8      	; 0x2d6e <__udivmodsi4_ep>
    2d66:	a2 1b       	sub	r26, r18
    2d68:	b3 0b       	sbc	r27, r19
    2d6a:	e4 0b       	sbc	r30, r20
    2d6c:	f5 0b       	sbc	r31, r21

00002d6e <__udivmodsi4_ep>:
    2d6e:	66 1f       	adc	r22, r22
    2d70:	77 1f       	adc	r23, r23
    2d72:	88 1f       	adc	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	1a 94       	dec	r1
    2d78:	69 f7       	brne	.-38     	; 0x2d54 <__udivmodsi4_loop>
    2d7a:	60 95       	com	r22
    2d7c:	70 95       	com	r23
    2d7e:	80 95       	com	r24
    2d80:	90 95       	com	r25
    2d82:	9b 01       	movw	r18, r22
    2d84:	ac 01       	movw	r20, r24
    2d86:	bd 01       	movw	r22, r26
    2d88:	cf 01       	movw	r24, r30
    2d8a:	08 95       	ret

00002d8c <__divmodsi4>:
    2d8c:	05 2e       	mov	r0, r21
    2d8e:	97 fb       	bst	r25, 7
    2d90:	1e f4       	brtc	.+6      	; 0x2d98 <__divmodsi4+0xc>
    2d92:	00 94       	com	r0
    2d94:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__negsi2>
    2d98:	57 fd       	sbrc	r21, 7
    2d9a:	07 d0       	rcall	.+14     	; 0x2daa <__divmodsi4_neg2>
    2d9c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__udivmodsi4>
    2da0:	07 fc       	sbrc	r0, 7
    2da2:	03 d0       	rcall	.+6      	; 0x2daa <__divmodsi4_neg2>
    2da4:	4e f4       	brtc	.+18     	; 0x2db8 <__divmodsi4_exit>
    2da6:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__negsi2>

00002daa <__divmodsi4_neg2>:
    2daa:	50 95       	com	r21
    2dac:	40 95       	com	r20
    2dae:	30 95       	com	r19
    2db0:	21 95       	neg	r18
    2db2:	3f 4f       	sbci	r19, 0xFF	; 255
    2db4:	4f 4f       	sbci	r20, 0xFF	; 255
    2db6:	5f 4f       	sbci	r21, 0xFF	; 255

00002db8 <__divmodsi4_exit>:
    2db8:	08 95       	ret

00002dba <__negsi2>:
    2dba:	90 95       	com	r25
    2dbc:	80 95       	com	r24
    2dbe:	70 95       	com	r23
    2dc0:	61 95       	neg	r22
    2dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc8:	08 95       	ret

00002dca <__udivmodhi4>:
    2dca:	aa 1b       	sub	r26, r26
    2dcc:	bb 1b       	sub	r27, r27
    2dce:	51 e1       	ldi	r21, 0x11	; 17
    2dd0:	07 c0       	rjmp	.+14     	; 0x2de0 <__udivmodhi4_ep>

00002dd2 <__udivmodhi4_loop>:
    2dd2:	aa 1f       	adc	r26, r26
    2dd4:	bb 1f       	adc	r27, r27
    2dd6:	a6 17       	cp	r26, r22
    2dd8:	b7 07       	cpc	r27, r23
    2dda:	10 f0       	brcs	.+4      	; 0x2de0 <__udivmodhi4_ep>
    2ddc:	a6 1b       	sub	r26, r22
    2dde:	b7 0b       	sbc	r27, r23

00002de0 <__udivmodhi4_ep>:
    2de0:	88 1f       	adc	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	5a 95       	dec	r21
    2de6:	a9 f7       	brne	.-22     	; 0x2dd2 <__udivmodhi4_loop>
    2de8:	80 95       	com	r24
    2dea:	90 95       	com	r25
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	08 95       	ret

00002df2 <__tablejump2__>:
    2df2:	ee 0f       	add	r30, r30
    2df4:	ff 1f       	adc	r31, r31
    2df6:	05 90       	lpm	r0, Z+
    2df8:	f4 91       	lpm	r31, Z
    2dfa:	e0 2d       	mov	r30, r0
    2dfc:	09 94       	ijmp

00002dfe <_exit>:
    2dfe:	f8 94       	cli

00002e00 <__stop_program>:
    2e00:	ff cf       	rjmp	.-2      	; 0x2e00 <__stop_program>
