/* ###*B*###
 * Erika Enterprise, version 3
 * 
 * Copyright (C) 2017 - 2019 Evidence s.r.l.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License, version 2, for more details.
 * 
 * You should have received a copy of the GNU General Public License,
 * version 2, along with this program; if not, see
 * <www.gnu.org/licenses/old-licenses/gpl-2.0.html >.
 * 
 * This program is distributed to you subject to the following
 * clarifications and special exceptions to the GNU General Public
 * License, version 2.
 * 
 * THIRD PARTIES' MATERIALS
 * 
 * Certain materials included in this library are provided by third
 * parties under licenses other than the GNU General Public License. You
 * may only use, copy, link to, modify and redistribute this library
 * following the terms of license indicated below for third parties'
 * materials.
 * 
 * In case you make modified versions of this library which still include
 * said third parties' materials, you are obligated to grant this special
 * exception.
 * 
 * The complete list of Third party materials allowed with ERIKA
 * Enterprise version 3, together with the terms and conditions of each
 * license, is present in the file THIRDPARTY.TXT in the root of the
 * project.
 * ###*E*### */

/** \file   conf.oil
 *  \brief  System Configuration.
 *
 *  This file contains the System Configuration for Erika Enterprise.
 *
 *  \author  
 *  \date    
 */

CPU mySystem {

  OS myOs {
    EE_OPT = "OS_EE_APPL_BUILD_DEBUG";
    EE_OPT = "OS_EE_BUILD_DEBUG";

    USERESSCHEDULER = FALSE;			/* Defined UseResScheduler */

    CPU_DATA = AVR8 {
      MULTI_STACK = TRUE;
      IDLEHOOK = TRUE {
        HOOKNAME = "idle_hook";
      };
    };

    MCU_DATA = MEGA {
      MODEL = MEGA_328p;
    };


    LIB = ARDUINO {
      /* Used to select Board: UNO or NANO */
      SDK_BOARD = UNO;
      /* Used to select vendor: CC or ORG */
      VARIANT = CC {
        VERSION = "1.8.15";
      };
      /* Create libarduino.a */
      STAND_ALONE = TRUE;
    };
		
    KERNEL_TYPE = OSEK {			/* Kernel Type BCC1, BCC2, ECC1, ECC2*/
      CLASS = BCC1;					/* Pending Activation 1-No Store 2-Store*/
    };

  };
  
  APPDATA myApp {
    APP_SRC  = "code.cpp";			/* startup OSEE */
    APP_SRC  = "task.cpp";			/* task file */
    APP_SRC  = "debug.cpp";			/* debug file */
  };

  TASK DetectLight {
    PRIORITY = 1;				
    SCHEDULE = FULL;
    AUTOSTART = TRUE;
    STACK = SHARED; 
    ACTIVATION = 1;

  };
  
  COUNTER SystemTimer {
    MINCYCLE = 1;					/* Minimum value given to cycle parameter of an alarm */
    MAXALLOWEDVALUE = 65535;
    TICKSPERBASE = 1;
    TYPE = HARDWARE {
      SYSTEM_TIMER = TRUE;
      PRIORITY     = 1;
      DEVICE       = "TIMER1_COMPA";
    };
    SECONDSPERTICK = 0.001;
  };
  

 ALARM AlarmTask1 {				/* Defined AlarmTask1 */
    COUNTER = SystemTimer;		/* Tick input from SystemTimer */
    ACTION = ACTIVATETASK {		/* Action to ActivateTask 1 */
      TASK = DetectLight;
    };
    AUTOSTART = TRUE {
    	ALARMTIME = 0;			/* in ms */
    	CYCLETIME = 500;
    };
  };   
   

};
