
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00001fca  0000205e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fca  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bd  008001f0  008001f0  0000214e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000214e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e8  00000000  00000000  000021a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013792  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033c6  00000000  00000000  00015f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f3f  00000000  00000000  000192e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd0  00000000  00000000  0001d220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e35  00000000  00000000  0001dff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005c6b  00000000  00000000  00021e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006f0  00000000  00000000  00027a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__ctors_end>
       4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
       8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
       c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      10:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      14:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      18:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      1c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      20:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      24:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      28:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      2c:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_11>
      30:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      34:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      38:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      3c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      40:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_16>
      44:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      48:	0c 94 81 04 	jmp	0x902	; 0x902 <__vector_18>
      4c:	0c 94 b3 04 	jmp	0x966	; 0x966 <__vector_19>
      50:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      54:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      58:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      5c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      60:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      64:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <_ZN14HardwareSerial5beginEmh+0xa6>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	00 00       	nop
      ec:	00 08       	sbc	r0, r0
      ee:	00 02       	muls	r16, r16
      f0:	01 00       	.word	0x0001	; ????
      f2:	00 03       	mulsu	r16, r16
      f4:	04 07       	cpc	r16, r20
	...

000000fe <digital_pin_to_bit_mask_PGM>:
      fe:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     10e:	04 08 10 20                                         ... 

00000112 <digital_pin_to_port_PGM>:
     112:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     122:	03 03 03 03                                         ....

00000126 <port_to_output_PGM>:
     126:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000130 <port_to_mode_PGM>:
     130:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000013a <__ctors_start>:
     13a:	e3 04       	cpc	r14, r3

0000013c <__ctors_end>:
     13c:	11 24       	eor	r1, r1
     13e:	1f be       	out	0x3f, r1	; 63
     140:	cf ef       	ldi	r28, 0xFF	; 255
     142:	d8 e0       	ldi	r29, 0x08	; 8
     144:	de bf       	out	0x3e, r29	; 62
     146:	cd bf       	out	0x3d, r28	; 61

00000148 <__do_copy_data>:
     148:	11 e0       	ldi	r17, 0x01	; 1
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b1 e0       	ldi	r27, 0x01	; 1
     14e:	ea ec       	ldi	r30, 0xCA	; 202
     150:	ff e1       	ldi	r31, 0x1F	; 31
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x10>
     154:	05 90       	lpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a0 3f       	cpi	r26, 0xF0	; 240
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0xc>

0000015e <__do_clear_bss>:
     15e:	22 e0       	ldi	r18, 0x02	; 2
     160:	a0 ef       	ldi	r26, 0xF0	; 240
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ad 3a       	cpi	r26, 0xAD	; 173
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>

0000016e <__do_global_ctors>:
     16e:	10 e0       	ldi	r17, 0x00	; 0
     170:	ce e9       	ldi	r28, 0x9E	; 158
     172:	d0 e0       	ldi	r29, 0x00	; 0
     174:	04 c0       	rjmp	.+8      	; 0x17e <__do_global_ctors+0x10>
     176:	21 97       	sbiw	r28, 0x01	; 1
     178:	fe 01       	movw	r30, r28
     17a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__tablejump2__>
     17e:	cd 39       	cpi	r28, 0x9D	; 157
     180:	d1 07       	cpc	r29, r17
     182:	c9 f7       	brne	.-14     	; 0x176 <__do_global_ctors+0x8>
     184:	0e 94 91 01 	call	0x322	; 0x322 <main>
     188:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <_exit>

0000018c <__bad_interrupt>:
     18c:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__vector_default>

00000190 <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     190:	2f 92       	push	r2
     192:	3f 92       	push	r3
     194:	4f 92       	push	r4
     196:	5f 92       	push	r5
     198:	6f 92       	push	r6
     19a:	7f 92       	push	r7
     19c:	8f 92       	push	r8
     19e:	9f 92       	push	r9
     1a0:	af 92       	push	r10
     1a2:	bf 92       	push	r11
     1a4:	cf 92       	push	r12
     1a6:	df 92       	push	r13
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	e4 2f       	mov	r30, r20
     1b6:	f5 2f       	mov	r31, r21
     1b8:	41 90       	ld	r4, Z+
     1ba:	50 80       	ld	r5, Z
     1bc:	4f 92       	push	r4
     1be:	5f 92       	push	r5
     1c0:	e4 2f       	mov	r30, r20
     1c2:	f5 2f       	mov	r31, r21
     1c4:	4d b6       	in	r4, 0x3d	; 61
     1c6:	5e b6       	in	r5, 0x3e	; 62
     1c8:	41 92       	st	Z+, r4
     1ca:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     1cc:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <osEE_hal_restore_ctx>

000001d0 <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     1d0:	e6 2f       	mov	r30, r22
     1d2:	f7 2f       	mov	r31, r23
     1d4:	41 90       	ld	r4, Z+
     1d6:	50 80       	ld	r5, Z
     1d8:	4d be       	out	0x3d, r4	; 61
     1da:	5e be       	out	0x3e, r5	; 62
     1dc:	5f 90       	pop	r5
     1de:	4f 90       	pop	r4
     1e0:	e6 2f       	mov	r30, r22
     1e2:	f7 2f       	mov	r31, r23
     1e4:	41 92       	st	Z+, r4
     1e6:	50 82       	st	Z, r5
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
     1ee:	0f 91       	pop	r16
     1f0:	ff 90       	pop	r15
     1f2:	ef 90       	pop	r14
     1f4:	df 90       	pop	r13
     1f6:	cf 90       	pop	r12
     1f8:	bf 90       	pop	r11
     1fa:	af 90       	pop	r10
     1fc:	9f 90       	pop	r9
     1fe:	8f 90       	pop	r8
     200:	7f 90       	pop	r7
     202:	6f 90       	pop	r6
     204:	5f 90       	pop	r5
     206:	4f 90       	pop	r4
     208:	3f 90       	pop	r3
     20a:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     20c:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <osEE_scheduler_task_wrapper_restore>

00000210 <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     210:	e6 2f       	mov	r30, r22
    mov r31, r23
     212:	f7 2f       	mov	r31, r23
    ld  r20, z+
     214:	41 91       	ld	r20, Z+
    ld  r21, z
     216:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     218:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     21a:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     21c:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <osEE_scheduler_task_wrapper_run>

00000220 <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     220:	2f 92       	push	r2
     222:	3f 92       	push	r3
     224:	4f 92       	push	r4
     226:	5f 92       	push	r5
     228:	6f 92       	push	r6
     22a:	7f 92       	push	r7
     22c:	8f 92       	push	r8
     22e:	9f 92       	push	r9
     230:	af 92       	push	r10
     232:	bf 92       	push	r11
     234:	cf 92       	push	r12
     236:	df 92       	push	r13
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	e4 2f       	mov	r30, r20
     246:	f5 2f       	mov	r31, r21
     248:	41 90       	ld	r4, Z+
     24a:	50 80       	ld	r5, Z
     24c:	4f 92       	push	r4
     24e:	5f 92       	push	r5
     250:	e4 2f       	mov	r30, r20
     252:	f5 2f       	mov	r31, r21
     254:	4d b6       	in	r4, 0x3d	; 61
     256:	5e b6       	in	r5, 0x3e	; 62
     258:	41 92       	st	Z+, r4
     25a:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     25c:	0c 94 08 01 	jmp	0x210	; 0x210 <osEE_hal_ready2stacked>

00000260 <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     260:	e8 2f       	mov	r30, r24
    mov r31, r25
     262:	f9 2f       	mov	r31, r25
    ld  r20, z+
     264:	41 91       	ld	r20, Z+
    ld  r21, z
     266:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     268:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     26a:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     26c:	e6 2f       	mov	r30, r22
    mov r31, r23
     26e:	f7 2f       	mov	r31, r23

    ijmp
     270:	09 94       	ijmp
	...

00000274 <idle_hook>:
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	00 d0       	rcall	.+0      	; 0x27e <idle_hook+0xa>
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	8d b7       	in	r24, 0x3d	; 61
     284:	9e b7       	in	r25, 0x3e	; 62
     286:	9a 83       	std	Y+2, r25	; 0x02
     288:	89 83       	std	Y+1, r24	; 0x01
     28a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <__data_end>
     28e:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <__data_end+0x1>
     292:	89 2b       	or	r24, r25
     294:	a9 f4       	brne	.+42     	; 0x2c0 <idle_hook+0x4c>
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <__data_end+0x1>
     29e:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <__data_end>
     2a2:	f8 94       	cli
     2a4:	82 e8       	ldi	r24, 0x82	; 130
     2a6:	93 e0       	ldi	r25, 0x03	; 3
     2a8:	89 2b       	or	r24, r25
     2aa:	11 f0       	breq	.+4      	; 0x2b0 <idle_hook+0x3c>
     2ac:	0e 94 82 03 	call	0x704	; 0x704 <_Z14serialEventRunv>
     2b0:	78 94       	sei
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	08 95       	ret
     2c0:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <__data_end>
     2c4:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <__data_end+0x1>
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	28 17       	cp	r18, r24
     2ce:	39 07       	cpc	r19, r25
     2d0:	41 f3       	breq	.-48     	; 0x2a2 <idle_hook+0x2e>
     2d2:	f8 94       	cli
     2d4:	87 e2       	ldi	r24, 0x27	; 39
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	0e 94 9b 01 	call	0x336	; 0x336 <serial_print>
     2dc:	02 e8       	ldi	r16, 0x82	; 130
     2de:	13 e0       	ldi	r17, 0x03	; 3
     2e0:	01 15       	cp	r16, r1
     2e2:	11 05       	cpc	r17, r1
     2e4:	e9 f3       	breq	.-6      	; 0x2e0 <idle_hook+0x6c>
     2e6:	0e 94 82 03 	call	0x704	; 0x704 <_Z14serialEventRunv>
     2ea:	fa cf       	rjmp	.-12     	; 0x2e0 <idle_hook+0x6c>

000002ec <setup>:
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	83 e1       	ldi	r24, 0x13	; 19
     2f0:	0e 94 c0 02 	call	0x580	; 0x580 <pinMode>
     2f4:	61 e0       	ldi	r22, 0x01	; 1
     2f6:	87 e0       	ldi	r24, 0x07	; 7
     2f8:	0e 94 c0 02 	call	0x580	; 0x580 <pinMode>
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	87 e0       	ldi	r24, 0x07	; 7
     300:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <digitalWrite>
     304:	26 e0       	ldi	r18, 0x06	; 6
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	52 ec       	ldi	r21, 0xC2	; 194
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	92 e0       	ldi	r25, 0x02	; 2
     312:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN14HardwareSerial5beginEmh>
     316:	62 e4       	ldi	r22, 0x42	; 66
     318:	71 e0       	ldi	r23, 0x01	; 1
     31a:	83 e0       	ldi	r24, 0x03	; 3
     31c:	92 e0       	ldi	r25, 0x02	; 2
     31e:	0c 94 57 05 	jmp	0xaae	; 0xaae <_ZN5Print7printlnEPKc>

00000322 <main>:
     322:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <init>
     326:	0e 94 76 01 	call	0x2ec	; 0x2ec <setup>
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 c3 06 	call	0xd86	; 0xd86 <StartOS>
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	08 95       	ret

00000336 <serial_print>:
     336:	f8 94       	cli
     338:	fc 01       	movw	r30, r24
     33a:	01 90       	ld	r0, Z+
     33c:	00 20       	and	r0, r0
     33e:	e9 f7       	brne	.-6      	; 0x33a <serial_print+0x4>
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	af 01       	movw	r20, r30
     344:	48 1b       	sub	r20, r24
     346:	59 0b       	sbc	r21, r25
     348:	bc 01       	movw	r22, r24
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN5Print5writeEPKhj>
     352:	78 94       	sei
     354:	08 95       	ret

00000356 <FuncDetectLight>:
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	83 e1       	ldi	r24, 0x13	; 19
     360:	0e 94 2a 03 	call	0x654	; 0x654 <analogRead>
     364:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <dataRaw+0x1>
     368:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <dataRaw>
     36c:	bc 01       	movw	r22, r24
     36e:	99 0f       	add	r25, r25
     370:	88 0b       	sbc	r24, r24
     372:	99 0b       	sbc	r25, r25
     374:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__floatsisf>
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 ec       	ldi	r19, 0xC0	; 192
     37c:	4f e7       	ldi	r20, 0x7F	; 127
     37e:	54 e4       	ldi	r21, 0x44	; 68
     380:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__divsf3>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	40 ea       	ldi	r20, 0xA0	; 160
     38a:	50 e4       	ldi	r21, 0x40	; 64
     38c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__mulsf3>
     390:	6b 01       	movw	r12, r22
     392:	7c 01       	movw	r14, r24
     394:	ac 01       	movw	r20, r24
     396:	9b 01       	movw	r18, r22
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	80 ea       	ldi	r24, 0xA0	; 160
     39e:	90 e4       	ldi	r25, 0x40	; 64
     3a0:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__subsf3>
     3a4:	a7 01       	movw	r20, r14
     3a6:	96 01       	movw	r18, r12
     3a8:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__divsf3>
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e4       	ldi	r19, 0x40	; 64
     3b0:	4c e9       	ldi	r20, 0x9C	; 156
     3b2:	55 e4       	ldi	r21, 0x45	; 69
     3b4:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__mulsf3>
     3b8:	22 ec       	ldi	r18, 0xC2	; 194
     3ba:	3f e2       	ldi	r19, 0x2F	; 47
     3bc:	45 e9       	ldi	r20, 0x95	; 149
     3be:	5f eb       	ldi	r21, 0xBF	; 191
     3c0:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <pow>
     3c4:	2e e1       	ldi	r18, 0x1E	; 30
     3c6:	38 e4       	ldi	r19, 0x48	; 72
     3c8:	49 e5       	ldi	r20, 0x59	; 89
     3ca:	59 e4       	ldi	r21, 0x49	; 73
     3cc:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__mulsf3>
     3d0:	ab 01       	movw	r20, r22
     3d2:	bc 01       	movw	r22, r24
     3d4:	40 93 f4 01 	sts	0x01F4, r20	; 0x8001f4 <dataLux>
     3d8:	50 93 f5 01 	sts	0x01F5, r21	; 0x8001f5 <dataLux+0x1>
     3dc:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <dataLux+0x2>
     3e0:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <dataLux+0x3>
     3e4:	22 e0       	ldi	r18, 0x02	; 2
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN5Print7printlnEdi>
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	48 e4       	ldi	r20, 0x48	; 72
     3f6:	53 e4       	ldi	r21, 0x43	; 67
     3f8:	60 91 f4 01 	lds	r22, 0x01F4	; 0x8001f4 <dataLux>
     3fc:	70 91 f5 01 	lds	r23, 0x01F5	; 0x8001f5 <dataLux+0x1>
     400:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <dataLux+0x2>
     404:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <dataLux+0x3>
     408:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__cmpsf2>
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	87 ff       	sbrs	r24, 7
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	87 e0       	ldi	r24, 0x07	; 7
     414:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <digitalWrite>
     418:	ff 90       	pop	r15
     41a:	ef 90       	pop	r14
     41c:	df 90       	pop	r13
     41e:	cf 90       	pop	r12
     420:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <TerminateTask>

00000424 <__vector_16>:
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
     424:	1f 92       	push	r1
     426:	0f 92       	push	r0
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	8f 93       	push	r24
     434:	9f 93       	push	r25
     436:	af 93       	push	r26
     438:	bf 93       	push	r27
     43a:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <timer0_millis>
     43e:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <timer0_millis+0x1>
     442:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <timer0_millis+0x2>
     446:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <timer0_millis+0x3>
     44a:	30 91 fa 01 	lds	r19, 0x01FA	; 0x8001fa <timer0_fract>
     44e:	23 e0       	ldi	r18, 0x03	; 3
     450:	23 0f       	add	r18, r19
     452:	2d 37       	cpi	r18, 0x7D	; 125
     454:	58 f5       	brcc	.+86     	; 0x4ac <__vector_16+0x88>
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	a1 1d       	adc	r26, r1
     45a:	b1 1d       	adc	r27, r1
     45c:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <timer0_fract>
     460:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <timer0_millis>
     464:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <timer0_millis+0x1>
     468:	a0 93 fd 01 	sts	0x01FD, r26	; 0x8001fd <timer0_millis+0x2>
     46c:	b0 93 fe 01 	sts	0x01FE, r27	; 0x8001fe <timer0_millis+0x3>
     470:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <timer0_overflow_count>
     474:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <timer0_overflow_count+0x1>
     478:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <timer0_overflow_count+0x2>
     47c:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <timer0_overflow_count+0x3>
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	a1 1d       	adc	r26, r1
     484:	b1 1d       	adc	r27, r1
     486:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <timer0_overflow_count>
     48a:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <timer0_overflow_count+0x1>
     48e:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <timer0_overflow_count+0x2>
     492:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <timer0_overflow_count+0x3>
     496:	bf 91       	pop	r27
     498:	af 91       	pop	r26
     49a:	9f 91       	pop	r25
     49c:	8f 91       	pop	r24
     49e:	3f 91       	pop	r19
     4a0:	2f 91       	pop	r18
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti
     4ac:	26 e8       	ldi	r18, 0x86	; 134
     4ae:	23 0f       	add	r18, r19
     4b0:	02 96       	adiw	r24, 0x02	; 2
     4b2:	a1 1d       	adc	r26, r1
     4b4:	b1 1d       	adc	r27, r1
     4b6:	d2 cf       	rjmp	.-92     	; 0x45c <__vector_16+0x38>

000004b8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     4b8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     4ba:	84 b5       	in	r24, 0x24	; 36
     4bc:	82 60       	ori	r24, 0x02	; 2
     4be:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     4c0:	84 b5       	in	r24, 0x24	; 36
     4c2:	81 60       	ori	r24, 0x01	; 1
     4c4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     4c6:	85 b5       	in	r24, 0x25	; 37
     4c8:	82 60       	ori	r24, 0x02	; 2
     4ca:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     4cc:	85 b5       	in	r24, 0x25	; 37
     4ce:	81 60       	ori	r24, 0x01	; 1
     4d0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     4d2:	ee e6       	ldi	r30, 0x6E	; 110
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	81 60       	ori	r24, 0x01	; 1
     4da:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     4dc:	e1 e8       	ldi	r30, 0x81	; 129
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     4e2:	80 81       	ld	r24, Z
     4e4:	82 60       	ori	r24, 0x02	; 2
     4e6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     4e8:	80 81       	ld	r24, Z
     4ea:	81 60       	ori	r24, 0x01	; 1
     4ec:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     4ee:	e0 e8       	ldi	r30, 0x80	; 128
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	81 60       	ori	r24, 0x01	; 1
     4f6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     4f8:	e1 eb       	ldi	r30, 0xB1	; 177
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	84 60       	ori	r24, 0x04	; 4
     500:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     502:	e0 eb       	ldi	r30, 0xB0	; 176
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	80 81       	ld	r24, Z
     508:	81 60       	ori	r24, 0x01	; 1
     50a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     50c:	ea e7       	ldi	r30, 0x7A	; 122
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	84 60       	ori	r24, 0x04	; 4
     514:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     516:	80 81       	ld	r24, Z
     518:	82 60       	ori	r24, 0x02	; 2
     51a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     51c:	80 81       	ld	r24, Z
     51e:	81 60       	ori	r24, 0x01	; 1
     520:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     522:	80 81       	ld	r24, Z
     524:	80 68       	ori	r24, 0x80	; 128
     526:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     528:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
#endif
}
     52c:	08 95       	ret

0000052e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     52e:	83 30       	cpi	r24, 0x03	; 3
     530:	81 f0       	breq	.+32     	; 0x552 <turnOffPWM+0x24>
     532:	28 f4       	brcc	.+10     	; 0x53e <turnOffPWM+0x10>
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	99 f0       	breq	.+38     	; 0x55e <turnOffPWM+0x30>
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	a9 f0       	breq	.+42     	; 0x566 <turnOffPWM+0x38>
     53c:	08 95       	ret
     53e:	87 30       	cpi	r24, 0x07	; 7
     540:	a9 f0       	breq	.+42     	; 0x56c <turnOffPWM+0x3e>
     542:	88 30       	cpi	r24, 0x08	; 8
     544:	c9 f0       	breq	.+50     	; 0x578 <turnOffPWM+0x4a>
     546:	84 30       	cpi	r24, 0x04	; 4
     548:	b1 f4       	brne	.+44     	; 0x576 <turnOffPWM+0x48>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     54a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     54e:	8f 7d       	andi	r24, 0xDF	; 223
     550:	03 c0       	rjmp	.+6      	; 0x558 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     552:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     556:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     558:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     55c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     55e:	84 b5       	in	r24, 0x24	; 36
     560:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     562:	84 bd       	out	0x24, r24	; 36
     564:	08 95       	ret
     566:	84 b5       	in	r24, 0x24	; 36
     568:	8f 7d       	andi	r24, 0xDF	; 223
     56a:	fb cf       	rjmp	.-10     	; 0x562 <turnOffPWM+0x34>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     56c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     570:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     572:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
     576:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     578:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     57c:	8f 7d       	andi	r24, 0xDF	; 223
     57e:	f9 cf       	rjmp	.-14     	; 0x572 <turnOffPWM+0x44>

00000580 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	fc 01       	movw	r30, r24
     588:	e2 50       	subi	r30, 0x02	; 2
     58a:	ff 4f       	sbci	r31, 0xFF	; 255
     58c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     58e:	8e 5e       	subi	r24, 0xEE	; 238
     590:	9e 4f       	sbci	r25, 0xFE	; 254
     592:	fc 01       	movw	r30, r24
     594:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     596:	88 23       	and	r24, r24
     598:	c9 f0       	breq	.+50     	; 0x5cc <pinMode+0x4c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	fc 01       	movw	r30, r24
     5a2:	e0 5d       	subi	r30, 0xD0	; 208
     5a4:	fe 4f       	sbci	r31, 0xFE	; 254
     5a6:	a5 91       	lpm	r26, Z+
     5a8:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     5aa:	fc 01       	movw	r30, r24
     5ac:	ea 5d       	subi	r30, 0xDA	; 218
     5ae:	fe 4f       	sbci	r31, 0xFE	; 254
     5b0:	c5 91       	lpm	r28, Z+
     5b2:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     5b4:	61 11       	cpse	r22, r1
     5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <pinMode+0x52>
		uint8_t oldSREG = SREG;
     5b8:	9f b7       	in	r25, 0x3f	; 63
                cli();
     5ba:	f8 94       	cli
		*reg &= ~bit;
     5bc:	8c 91       	ld	r24, X
     5be:	20 95       	com	r18
     5c0:	82 23       	and	r24, r18
     5c2:	8c 93       	st	X, r24
		*out &= ~bit;
     5c4:	88 81       	ld	r24, Y
     5c6:	28 23       	and	r18, r24
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out |= bit;
     5c8:	28 83       	st	Y, r18
		SREG = oldSREG;
     5ca:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     5d2:	62 30       	cpi	r22, 0x02	; 2
     5d4:	51 f4       	brne	.+20     	; 0x5ea <pinMode+0x6a>
		uint8_t oldSREG = SREG;
     5d6:	9f b7       	in	r25, 0x3f	; 63
                cli();
     5d8:	f8 94       	cli
		*reg &= ~bit;
     5da:	3c 91       	ld	r19, X
     5dc:	82 2f       	mov	r24, r18
     5de:	80 95       	com	r24
     5e0:	83 23       	and	r24, r19
     5e2:	8c 93       	st	X, r24
		*out |= bit;
     5e4:	e8 81       	ld	r30, Y
     5e6:	2e 2b       	or	r18, r30
     5e8:	ef cf       	rjmp	.-34     	; 0x5c8 <pinMode+0x48>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     5ea:	8f b7       	in	r24, 0x3f	; 63
                cli();
     5ec:	f8 94       	cli
		*reg |= bit;
     5ee:	ec 91       	ld	r30, X
     5f0:	2e 2b       	or	r18, r30
     5f2:	2c 93       	st	X, r18
		SREG = oldSREG;
     5f4:	8f bf       	out	0x3f, r24	; 63
     5f6:	ea cf       	rjmp	.-44     	; 0x5cc <pinMode+0x4c>

000005f8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     5fe:	28 2f       	mov	r18, r24
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	f9 01       	movw	r30, r18
     604:	e6 51       	subi	r30, 0x16	; 22
     606:	ff 4f       	sbci	r31, 0xFF	; 255
     608:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     60a:	f9 01       	movw	r30, r18
     60c:	e2 50       	subi	r30, 0x02	; 2
     60e:	ff 4f       	sbci	r31, 0xFF	; 255
     610:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     612:	f9 01       	movw	r30, r18
     614:	ee 5e       	subi	r30, 0xEE	; 238
     616:	fe 4f       	sbci	r31, 0xFE	; 254
     618:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     61a:	cc 23       	and	r28, r28
     61c:	a9 f0       	breq	.+42     	; 0x648 <digitalWrite+0x50>
     61e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     620:	81 11       	cpse	r24, r1
     622:	0e 94 97 02 	call	0x52e	; 0x52e <turnOffPWM>

	out = portOutputRegister(port);
     626:	ec 2f       	mov	r30, r28
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	ea 5d       	subi	r30, 0xDA	; 218
     630:	fe 4f       	sbci	r31, 0xFE	; 254
     632:	a5 91       	lpm	r26, Z+
     634:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     636:	8f b7       	in	r24, 0x3f	; 63
	cli();
     638:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     63a:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     63c:	11 11       	cpse	r17, r1
     63e:	08 c0       	rjmp	.+16     	; 0x650 <digitalWrite+0x58>
		*out &= ~bit;
     640:	d0 95       	com	r29
     642:	de 23       	and	r29, r30
	} else {
		*out |= bit;
     644:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     646:	8f bf       	out	0x3f, r24	; 63
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	08 95       	ret
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
     650:	de 2b       	or	r29, r30
     652:	f8 cf       	rjmp	.-16     	; 0x644 <digitalWrite+0x4c>

00000654 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     654:	8e 30       	cpi	r24, 0x0E	; 14
     656:	08 f0       	brcs	.+2      	; 0x65a <analogRead+0x6>
     658:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     65a:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <analog_reference>
     65e:	90 e4       	ldi	r25, 0x40	; 64
     660:	29 9f       	mul	r18, r25
     662:	90 01       	movw	r18, r0
     664:	11 24       	eor	r1, r1
     666:	87 70       	andi	r24, 0x07	; 7
     668:	82 2b       	or	r24, r18
     66a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     66e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     672:	80 64       	ori	r24, 0x40	; 64
     674:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     678:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     67c:	86 fd       	sbrc	r24, 6
     67e:	fc cf       	rjmp	.-8      	; 0x678 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     680:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
     684:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
     688:	08 95       	ret

0000068a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     68a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     68c:	91 8d       	ldd	r25, Z+25	; 0x19
     68e:	22 8d       	ldd	r18, Z+26	; 0x1a
     690:	89 2f       	mov	r24, r25
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	80 5c       	subi	r24, 0xC0	; 192
     696:	9f 4f       	sbci	r25, 0xFF	; 255
     698:	82 1b       	sub	r24, r18
     69a:	91 09       	sbc	r25, r1
}
     69c:	8f 73       	andi	r24, 0x3F	; 63
     69e:	99 27       	eor	r25, r25
     6a0:	08 95       	ret

000006a2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     6a2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     6a4:	91 8d       	ldd	r25, Z+25	; 0x19
     6a6:	82 8d       	ldd	r24, Z+26	; 0x1a
     6a8:	98 17       	cp	r25, r24
     6aa:	31 f0       	breq	.+12     	; 0x6b8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     6ac:	82 8d       	ldd	r24, Z+26	; 0x1a
     6ae:	e8 0f       	add	r30, r24
     6b0:	f1 1d       	adc	r31, r1
     6b2:	85 8d       	ldd	r24, Z+29	; 0x1d
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     6b8:	8f ef       	ldi	r24, 0xFF	; 255
     6ba:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     6bc:	08 95       	ret

000006be <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     6be:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     6c0:	91 8d       	ldd	r25, Z+25	; 0x19
     6c2:	82 8d       	ldd	r24, Z+26	; 0x1a
     6c4:	98 17       	cp	r25, r24
     6c6:	61 f0       	breq	.+24     	; 0x6e0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     6c8:	a2 8d       	ldd	r26, Z+26	; 0x1a
     6ca:	ae 0f       	add	r26, r30
     6cc:	bf 2f       	mov	r27, r31
     6ce:	b1 1d       	adc	r27, r1
     6d0:	5d 96       	adiw	r26, 0x1d	; 29
     6d2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     6d4:	92 8d       	ldd	r25, Z+26	; 0x1a
     6d6:	9f 5f       	subi	r25, 0xFF	; 255
     6d8:	9f 73       	andi	r25, 0x3F	; 63
     6da:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     6e4:	08 95       	ret

000006e6 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     6e6:	fc 01       	movw	r30, r24
     6e8:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     6ea:	44 8d       	ldd	r20, Z+28	; 0x1c
     6ec:	25 2f       	mov	r18, r21
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	84 2f       	mov	r24, r20
     6f2:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     6f4:	82 1b       	sub	r24, r18
     6f6:	93 0b       	sbc	r25, r19
     6f8:	54 17       	cp	r21, r20
     6fa:	10 f0       	brcs	.+4      	; 0x700 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     6fc:	cf 96       	adiw	r24, 0x3f	; 63
     6fe:	08 95       	ret
  return tail - head - 1;
     700:	01 97       	sbiw	r24, 0x01	; 1
}
     702:	08 95       	ret

00000704 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     704:	89 ed       	ldi	r24, 0xD9	; 217
     706:	94 e0       	ldi	r25, 0x04	; 4
     708:	89 2b       	or	r24, r25
     70a:	49 f0       	breq	.+18     	; 0x71e <_Z14serialEventRunv+0x1a>
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	89 2b       	or	r24, r25
     712:	29 f0       	breq	.+10     	; 0x71e <_Z14serialEventRunv+0x1a>
     714:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z17Serial0_availablev>
     718:	81 11       	cpse	r24, r1
     71a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     71e:	08 95       	ret

00000720 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     720:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     722:	a4 8d       	ldd	r26, Z+28	; 0x1c
     724:	a8 0f       	add	r26, r24
     726:	b9 2f       	mov	r27, r25
     728:	b1 1d       	adc	r27, r1
     72a:	a3 5a       	subi	r26, 0xA3	; 163
     72c:	bf 4f       	sbci	r27, 0xFF	; 255
     72e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     730:	84 8d       	ldd	r24, Z+28	; 0x1c
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	8f 73       	andi	r24, 0x3F	; 63
     738:	99 27       	eor	r25, r25
     73a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     73c:	a6 89       	ldd	r26, Z+22	; 0x16
     73e:	b7 89       	ldd	r27, Z+23	; 0x17
     740:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     742:	a0 89       	ldd	r26, Z+16	; 0x10
     744:	b1 89       	ldd	r27, Z+17	; 0x11
     746:	8c 91       	ld	r24, X
     748:	83 70       	andi	r24, 0x03	; 3
     74a:	80 64       	ori	r24, 0x40	; 64
     74c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     74e:	93 8d       	ldd	r25, Z+27	; 0x1b
     750:	84 8d       	ldd	r24, Z+28	; 0x1c
     752:	98 13       	cpse	r25, r24
     754:	06 c0       	rjmp	.+12     	; 0x762 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     756:	02 88       	ldd	r0, Z+18	; 0x12
     758:	f3 89       	ldd	r31, Z+19	; 0x13
     75a:	e0 2d       	mov	r30, r0
     75c:	80 81       	ld	r24, Z
     75e:	8f 7d       	andi	r24, 0xDF	; 223
     760:	80 83       	st	Z, r24
  }
}
     762:	08 95       	ret

00000764 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     76a:	88 8d       	ldd	r24, Y+24	; 0x18
     76c:	88 23       	and	r24, r24
     76e:	b9 f0       	breq	.+46     	; 0x79e <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     770:	aa 89       	ldd	r26, Y+18	; 0x12
     772:	bb 89       	ldd	r27, Y+19	; 0x13
     774:	e8 89       	ldd	r30, Y+16	; 0x10
     776:	f9 89       	ldd	r31, Y+17	; 0x11
     778:	8c 91       	ld	r24, X
     77a:	85 fd       	sbrc	r24, 5
     77c:	03 c0       	rjmp	.+6      	; 0x784 <_ZN14HardwareSerial5flushEv+0x20>
     77e:	80 81       	ld	r24, Z
     780:	86 fd       	sbrc	r24, 6
     782:	0d c0       	rjmp	.+26     	; 0x79e <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	07 fc       	sbrc	r0, 7
     788:	f7 cf       	rjmp	.-18     	; 0x778 <_ZN14HardwareSerial5flushEv+0x14>
     78a:	8c 91       	ld	r24, X
     78c:	85 ff       	sbrs	r24, 5
     78e:	f2 cf       	rjmp	.-28     	; 0x774 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     790:	80 81       	ld	r24, Z
     792:	85 ff       	sbrs	r24, 5
     794:	ed cf       	rjmp	.-38     	; 0x770 <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
     796:	ce 01       	movw	r24, r28
     798:	0e 94 90 03 	call	0x720	; 0x720 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     79c:	e9 cf       	rjmp	.-46     	; 0x770 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	ec 01       	movw	r28, r24
  _written = true;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     7b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     7b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7ba:	98 13       	cpse	r25, r24
     7bc:	1a c0       	rjmp	.+52     	; 0x7f2 <_ZN14HardwareSerial5writeEh+0x4e>
     7be:	e8 89       	ldd	r30, Y+16	; 0x10
     7c0:	f9 89       	ldd	r31, Y+17	; 0x11
     7c2:	80 81       	ld	r24, Z
     7c4:	85 ff       	sbrs	r24, 5
     7c6:	15 c0       	rjmp	.+42     	; 0x7f2 <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7c8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7ca:	f8 94       	cli
      *_udr = c;
     7cc:	ee 89       	ldd	r30, Y+22	; 0x16
     7ce:	ff 89       	ldd	r31, Y+23	; 0x17
     7d0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     7d2:	e8 89       	ldd	r30, Y+16	; 0x10
     7d4:	f9 89       	ldd	r31, Y+17	; 0x11
     7d6:	80 81       	ld	r24, Z
     7d8:	83 70       	andi	r24, 0x03	; 3
     7da:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     7dc:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7de:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	08 95       	ret
     7f2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     7f4:	0b 8d       	ldd	r16, Y+27	; 0x1b
     7f6:	10 e0       	ldi	r17, 0x00	; 0
     7f8:	0f 5f       	subi	r16, 0xFF	; 255
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	0f 73       	andi	r16, 0x3F	; 63
     7fe:	11 27       	eor	r17, r17
     800:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     802:	8c 8d       	ldd	r24, Y+28	; 0x1c
     804:	8e 11       	cpse	r24, r14
     806:	0c c0       	rjmp	.+24     	; 0x820 <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	07 fc       	sbrc	r0, 7
     80c:	fa cf       	rjmp	.-12     	; 0x802 <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     80e:	e8 89       	ldd	r30, Y+16	; 0x10
     810:	f9 89       	ldd	r31, Y+17	; 0x11
     812:	80 81       	ld	r24, Z
     814:	85 ff       	sbrs	r24, 5
     816:	f5 cf       	rjmp	.-22     	; 0x802 <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
     818:	ce 01       	movw	r24, r28
     81a:	0e 94 90 03 	call	0x720	; 0x720 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     81e:	f1 cf       	rjmp	.-30     	; 0x802 <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     820:	eb 8d       	ldd	r30, Y+27	; 0x1b
     822:	ec 0f       	add	r30, r28
     824:	fd 2f       	mov	r31, r29
     826:	f1 1d       	adc	r31, r1
     828:	e3 5a       	subi	r30, 0xA3	; 163
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     82e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     830:	f8 94       	cli
    _tx_buffer_head = i;
     832:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     834:	ea 89       	ldd	r30, Y+18	; 0x12
     836:	fb 89       	ldd	r31, Y+19	; 0x13
     838:	80 81       	ld	r24, Z
     83a:	80 62       	ori	r24, 0x20	; 32
     83c:	cf cf       	rjmp	.-98     	; 0x7dc <_ZN14HardwareSerial5writeEh+0x38>

0000083e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     83e:	cf 92       	push	r12
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
     84e:	6a 01       	movw	r12, r20
     850:	7b 01       	movw	r14, r22
     852:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     854:	e8 89       	ldd	r30, Y+16	; 0x10
     856:	f9 89       	ldd	r31, Y+17	; 0x11
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     85c:	c1 14       	cp	r12, r1
     85e:	81 ee       	ldi	r24, 0xE1	; 225
     860:	d8 06       	cpc	r13, r24
     862:	e1 04       	cpc	r14, r1
     864:	f1 04       	cpc	r15, r1
     866:	a1 f0       	breq	.+40     	; 0x890 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	79 e0       	ldi	r23, 0x09	; 9
     86c:	8d e3       	ldi	r24, 0x3D	; 61
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a7 01       	movw	r20, r14
     872:	96 01       	movw	r18, r12
     874:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__udivmodsi4>
     878:	21 50       	subi	r18, 0x01	; 1
     87a:	31 09       	sbc	r19, r1
     87c:	41 09       	sbc	r20, r1
     87e:	51 09       	sbc	r21, r1
     880:	56 95       	lsr	r21
     882:	47 95       	ror	r20
     884:	37 95       	ror	r19
     886:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     888:	21 15       	cp	r18, r1
     88a:	80 e1       	ldi	r24, 0x10	; 16
     88c:	38 07       	cpc	r19, r24
     88e:	98 f0       	brcs	.+38     	; 0x8b6 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
     890:	e8 89       	ldd	r30, Y+16	; 0x10
     892:	f9 89       	ldd	r31, Y+17	; 0x11
     894:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     896:	60 e8       	ldi	r22, 0x80	; 128
     898:	74 e8       	ldi	r23, 0x84	; 132
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	a7 01       	movw	r20, r14
     8a0:	96 01       	movw	r18, r12
     8a2:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__udivmodsi4>
     8a6:	21 50       	subi	r18, 0x01	; 1
     8a8:	31 09       	sbc	r19, r1
     8aa:	41 09       	sbc	r20, r1
     8ac:	51 09       	sbc	r21, r1
     8ae:	56 95       	lsr	r21
     8b0:	47 95       	ror	r20
     8b2:	37 95       	ror	r19
     8b4:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     8b6:	ec 85       	ldd	r30, Y+12	; 0x0c
     8b8:	fd 85       	ldd	r31, Y+13	; 0x0d
     8ba:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     8bc:	ee 85       	ldd	r30, Y+14	; 0x0e
     8be:	ff 85       	ldd	r31, Y+15	; 0x0f
     8c0:	20 83       	st	Z, r18

  _written = false;
     8c2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     8c4:	ec 89       	ldd	r30, Y+20	; 0x14
     8c6:	fd 89       	ldd	r31, Y+21	; 0x15
     8c8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     8ca:	ea 89       	ldd	r30, Y+18	; 0x12
     8cc:	fb 89       	ldd	r31, Y+19	; 0x13
     8ce:	80 81       	ld	r24, Z
     8d0:	80 61       	ori	r24, 0x10	; 16
     8d2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     8d4:	ea 89       	ldd	r30, Y+18	; 0x12
     8d6:	fb 89       	ldd	r31, Y+19	; 0x13
     8d8:	80 81       	ld	r24, Z
     8da:	88 60       	ori	r24, 0x08	; 8
     8dc:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     8de:	ea 89       	ldd	r30, Y+18	; 0x12
     8e0:	fb 89       	ldd	r31, Y+19	; 0x13
     8e2:	80 81       	ld	r24, Z
     8e4:	80 68       	ori	r24, 0x80	; 128
     8e6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     8e8:	ea 89       	ldd	r30, Y+18	; 0x12
     8ea:	fb 89       	ldd	r31, Y+19	; 0x13
     8ec:	80 81       	ld	r24, Z
     8ee:	8f 7d       	andi	r24, 0xDF	; 223
     8f0:	80 83       	st	Z, r24
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	08 95       	ret

00000902 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     902:	1f 92       	push	r1
     904:	0f 92       	push	r0
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	0f 92       	push	r0
     90a:	11 24       	eor	r1, r1
     90c:	2f 93       	push	r18
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	ef 93       	push	r30
     914:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     916:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <Serial+0x10>
     91a:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <Serial+0x11>
     91e:	80 81       	ld	r24, Z
     920:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <Serial+0x16>
     924:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <Serial+0x17>
     928:	82 fd       	sbrc	r24, 2
     92a:	1b c0       	rjmp	.+54     	; 0x962 <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     92c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     92e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Serial+0x19>
     932:	8f 5f       	subi	r24, 0xFF	; 255
     934:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     936:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <Serial+0x1a>
     93a:	82 17       	cp	r24, r18
     93c:	41 f0       	breq	.+16     	; 0x94e <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
     93e:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <Serial+0x19>
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	ed 5f       	subi	r30, 0xFD	; 253
     946:	fd 4f       	sbci	r31, 0xFD	; 253
     948:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     94a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <Serial+0x19>
    Serial._rx_complete_irq();
  }
     94e:	ff 91       	pop	r31
     950:	ef 91       	pop	r30
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     962:	80 81       	ld	r24, Z
     964:	f4 cf       	rjmp	.-24     	; 0x94e <__vector_18+0x4c>

00000966 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     966:	1f 92       	push	r1
     968:	0f 92       	push	r0
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	0f 92       	push	r0
     96e:	11 24       	eor	r1, r1
     970:	2f 93       	push	r18
     972:	3f 93       	push	r19
     974:	4f 93       	push	r20
     976:	5f 93       	push	r21
     978:	6f 93       	push	r22
     97a:	7f 93       	push	r23
     97c:	8f 93       	push	r24
     97e:	9f 93       	push	r25
     980:	af 93       	push	r26
     982:	bf 93       	push	r27
     984:	ef 93       	push	r30
     986:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	0e 94 90 03 	call	0x720	; 0x720 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     990:	ff 91       	pop	r31
     992:	ef 91       	pop	r30
     994:	bf 91       	pop	r27
     996:	af 91       	pop	r26
     998:	9f 91       	pop	r25
     99a:	8f 91       	pop	r24
     99c:	7f 91       	pop	r23
     99e:	6f 91       	pop	r22
     9a0:	5f 91       	pop	r21
     9a2:	4f 91       	pop	r20
     9a4:	3f 91       	pop	r19
     9a6:	2f 91       	pop	r18
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	0e 94 45 03 	call	0x68a	; 0x68a <_ZN14HardwareSerial9availableEv>
     9ba:	21 e0       	ldi	r18, 0x01	; 1
     9bc:	89 2b       	or	r24, r25
     9be:	09 f4       	brne	.+2      	; 0x9c2 <_Z17Serial0_availablev+0x10>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
}
     9c2:	82 2f       	mov	r24, r18
     9c4:	08 95       	ret

000009c6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     9c6:	e3 e0       	ldi	r30, 0x03	; 3
     9c8:	f2 e0       	ldi	r31, 0x02	; 2
     9ca:	13 82       	std	Z+3, r1	; 0x03
     9cc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     9ce:	88 ee       	ldi	r24, 0xE8	; 232
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	84 83       	std	Z+4, r24	; 0x04
     9d8:	95 83       	std	Z+5, r25	; 0x05
     9da:	a6 83       	std	Z+6, r26	; 0x06
     9dc:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     9de:	86 ed       	ldi	r24, 0xD6	; 214
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	91 83       	std	Z+1, r25	; 0x01
     9e4:	80 83       	st	Z, r24
     9e6:	85 ec       	ldi	r24, 0xC5	; 197
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	95 87       	std	Z+13, r25	; 0x0d
     9ec:	84 87       	std	Z+12, r24	; 0x0c
     9ee:	84 ec       	ldi	r24, 0xC4	; 196
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	97 87       	std	Z+15, r25	; 0x0f
     9f4:	86 87       	std	Z+14, r24	; 0x0e
     9f6:	80 ec       	ldi	r24, 0xC0	; 192
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	91 8b       	std	Z+17, r25	; 0x11
     9fc:	80 8b       	std	Z+16, r24	; 0x10
     9fe:	81 ec       	ldi	r24, 0xC1	; 193
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	93 8b       	std	Z+19, r25	; 0x13
     a04:	82 8b       	std	Z+18, r24	; 0x12
     a06:	82 ec       	ldi	r24, 0xC2	; 194
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	95 8b       	std	Z+21, r25	; 0x15
     a0c:	84 8b       	std	Z+20, r24	; 0x14
     a0e:	86 ec       	ldi	r24, 0xC6	; 198
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	97 8b       	std	Z+23, r25	; 0x17
     a14:	86 8b       	std	Z+22, r24	; 0x16
     a16:	11 8e       	std	Z+25, r1	; 0x19
     a18:	12 8e       	std	Z+26, r1	; 0x1a
     a1a:	13 8e       	std	Z+27, r1	; 0x1b
     a1c:	14 8e       	std	Z+28, r1	; 0x1c
     a1e:	08 95       	ret

00000a20 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     a20:	af 92       	push	r10
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	6c 01       	movw	r12, r24
     a36:	7b 01       	movw	r14, r22
     a38:	8b 01       	movw	r16, r22
     a3a:	04 0f       	add	r16, r20
     a3c:	15 1f       	adc	r17, r21
     a3e:	eb 01       	movw	r28, r22
     a40:	5e 01       	movw	r10, r28
     a42:	ae 18       	sub	r10, r14
     a44:	bf 08       	sbc	r11, r15
     a46:	c0 17       	cp	r28, r16
     a48:	d1 07       	cpc	r29, r17
     a4a:	59 f0       	breq	.+22     	; 0xa62 <_ZN5Print5writeEPKhj+0x42>
     a4c:	69 91       	ld	r22, Y+
     a4e:	d6 01       	movw	r26, r12
     a50:	ed 91       	ld	r30, X+
     a52:	fc 91       	ld	r31, X
     a54:	01 90       	ld	r0, Z+
     a56:	f0 81       	ld	r31, Z
     a58:	e0 2d       	mov	r30, r0
     a5a:	c6 01       	movw	r24, r12
     a5c:	09 95       	icall
     a5e:	89 2b       	or	r24, r25
     a60:	79 f7       	brne	.-34     	; 0xa40 <_ZN5Print5writeEPKhj+0x20>
     a62:	c5 01       	movw	r24, r10
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	bf 90       	pop	r11
     a76:	af 90       	pop	r10
     a78:	08 95       	ret

00000a7a <_ZN5Print5writeEPKc.part.2>:
     a7a:	fb 01       	movw	r30, r22
     a7c:	01 90       	ld	r0, Z+
     a7e:	00 20       	and	r0, r0
     a80:	e9 f7       	brne	.-6      	; 0xa7c <_ZN5Print5writeEPKc.part.2+0x2>
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	af 01       	movw	r20, r30
     a86:	46 1b       	sub	r20, r22
     a88:	57 0b       	sbc	r21, r23
     a8a:	dc 01       	movw	r26, r24
     a8c:	ed 91       	ld	r30, X+
     a8e:	fc 91       	ld	r31, X
     a90:	02 80       	ldd	r0, Z+2	; 0x02
     a92:	f3 81       	ldd	r31, Z+3	; 0x03
     a94:	e0 2d       	mov	r30, r0
     a96:	09 94       	ijmp

00000a98 <_ZN5Print5printEc>:
     a98:	dc 01       	movw	r26, r24
     a9a:	ed 91       	ld	r30, X+
     a9c:	fc 91       	ld	r31, X
     a9e:	01 90       	ld	r0, Z+
     aa0:	f0 81       	ld	r31, Z
     aa2:	e0 2d       	mov	r30, r0
     aa4:	09 94       	ijmp

00000aa6 <_ZN5Print7printlnEv>:
     aa6:	6f e3       	ldi	r22, 0x3F	; 63
     aa8:	71 e0       	ldi	r23, 0x01	; 1
     aaa:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <_ZN5Print5writeEPKc.part.2>

00000aae <_ZN5Print7printlnEPKc>:
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	8c 01       	movw	r16, r24
     ab8:	d0 e0       	ldi	r29, 0x00	; 0
     aba:	c0 e0       	ldi	r28, 0x00	; 0
     abc:	61 15       	cp	r22, r1
     abe:	71 05       	cpc	r23, r1
     ac0:	19 f0       	breq	.+6      	; 0xac8 <_ZN5Print7printlnEPKc+0x1a>
     ac2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN5Print5writeEPKc.part.2>
     ac6:	ec 01       	movw	r28, r24
     ac8:	c8 01       	movw	r24, r16
     aca:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN5Print7printlnEv>
     ace:	8c 0f       	add	r24, r28
     ad0:	9d 1f       	adc	r25, r29
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	08 95       	ret

00000adc <_ZN5Print11printNumberEmh>:
     adc:	8f 92       	push	r8
     ade:	9f 92       	push	r9
     ae0:	af 92       	push	r10
     ae2:	bf 92       	push	r11
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	a1 97       	sbiw	r28, 0x21	; 33
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	7c 01       	movw	r14, r24
     b02:	fa 01       	movw	r30, r20
     b04:	cb 01       	movw	r24, r22
     b06:	19 a2       	std	Y+33, r1	; 0x21
     b08:	22 30       	cpi	r18, 0x02	; 2
     b0a:	08 f4       	brcc	.+2      	; 0xb0e <_ZN5Print11printNumberEmh+0x32>
     b0c:	2a e0       	ldi	r18, 0x0A	; 10
     b0e:	8e 01       	movw	r16, r28
     b10:	0f 5d       	subi	r16, 0xDF	; 223
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
     b14:	82 2e       	mov	r8, r18
     b16:	91 2c       	mov	r9, r1
     b18:	b1 2c       	mov	r11, r1
     b1a:	a1 2c       	mov	r10, r1
     b1c:	bf 01       	movw	r22, r30
     b1e:	a5 01       	movw	r20, r10
     b20:	94 01       	movw	r18, r8
     b22:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__udivmodsi4>
     b26:	f9 01       	movw	r30, r18
     b28:	ca 01       	movw	r24, r20
     b2a:	6a 30       	cpi	r22, 0x0A	; 10
     b2c:	0c f5       	brge	.+66     	; 0xb70 <_ZN5Print11printNumberEmh+0x94>
     b2e:	60 5d       	subi	r22, 0xD0	; 208
     b30:	d8 01       	movw	r26, r16
     b32:	6e 93       	st	-X, r22
     b34:	8d 01       	movw	r16, r26
     b36:	23 2b       	or	r18, r19
     b38:	24 2b       	or	r18, r20
     b3a:	25 2b       	or	r18, r21
     b3c:	79 f7       	brne	.-34     	; 0xb1c <_ZN5Print11printNumberEmh+0x40>
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	10 97       	sbiw	r26, 0x00	; 0
     b44:	21 f0       	breq	.+8      	; 0xb4e <_ZN5Print11printNumberEmh+0x72>
     b46:	bd 01       	movw	r22, r26
     b48:	c7 01       	movw	r24, r14
     b4a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN5Print5writeEPKc.part.2>
     b4e:	a1 96       	adiw	r28, 0x21	; 33
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	bf 90       	pop	r11
     b68:	af 90       	pop	r10
     b6a:	9f 90       	pop	r9
     b6c:	8f 90       	pop	r8
     b6e:	08 95       	ret
     b70:	69 5c       	subi	r22, 0xC9	; 201
     b72:	de cf       	rjmp	.-68     	; 0xb30 <_ZN5Print11printNumberEmh+0x54>

00000b74 <_ZN5Print5printEmi>:
     b74:	21 15       	cp	r18, r1
     b76:	31 05       	cpc	r19, r1
     b78:	41 f4       	brne	.+16     	; 0xb8a <_ZN5Print5printEmi+0x16>
     b7a:	dc 01       	movw	r26, r24
     b7c:	ed 91       	ld	r30, X+
     b7e:	fc 91       	ld	r31, X
     b80:	01 90       	ld	r0, Z+
     b82:	f0 81       	ld	r31, Z
     b84:	e0 2d       	mov	r30, r0
     b86:	64 2f       	mov	r22, r20
     b88:	09 94       	ijmp
     b8a:	0c 94 6e 05 	jmp	0xadc	; 0xadc <_ZN5Print11printNumberEmh>

00000b8e <_ZN5Print5printEji>:
     b8e:	9a 01       	movw	r18, r20
     b90:	ab 01       	movw	r20, r22
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <_ZN5Print5printEmi>

00000b9a <_ZN5Print10printFloatEdh>:
     b9a:	2f 92       	push	r2
     b9c:	3f 92       	push	r3
     b9e:	4f 92       	push	r4
     ba0:	5f 92       	push	r5
     ba2:	6f 92       	push	r6
     ba4:	7f 92       	push	r7
     ba6:	8f 92       	push	r8
     ba8:	9f 92       	push	r9
     baa:	af 92       	push	r10
     bac:	bf 92       	push	r11
     bae:	cf 92       	push	r12
     bb0:	df 92       	push	r13
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	ec 01       	movw	r28, r24
     bbe:	6a 01       	movw	r12, r20
     bc0:	7b 01       	movw	r14, r22
     bc2:	72 2e       	mov	r7, r18
     bc4:	ab 01       	movw	r20, r22
     bc6:	96 01       	movw	r18, r12
     bc8:	cb 01       	movw	r24, r22
     bca:	b6 01       	movw	r22, r12
     bcc:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__unordsf2>
     bd0:	64 ee       	ldi	r22, 0xE4	; 228
     bd2:	71 e0       	ldi	r23, 0x01	; 1
     bd4:	81 11       	cpse	r24, r1
     bd6:	26 c0       	rjmp	.+76     	; 0xc24 <_ZN5Print10printFloatEdh+0x8a>
     bd8:	46 01       	movw	r8, r12
     bda:	57 01       	movw	r10, r14
     bdc:	e8 94       	clt
     bde:	b7 f8       	bld	r11, 7
     be0:	2f ef       	ldi	r18, 0xFF	; 255
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	4f e7       	ldi	r20, 0x7F	; 127
     be6:	5f e7       	ldi	r21, 0x7F	; 127
     be8:	c5 01       	movw	r24, r10
     bea:	b4 01       	movw	r22, r8
     bec:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__unordsf2>
     bf0:	81 11       	cpse	r24, r1
     bf2:	0c c0       	rjmp	.+24     	; 0xc0c <_ZN5Print10printFloatEdh+0x72>
     bf4:	2f ef       	ldi	r18, 0xFF	; 255
     bf6:	3f ef       	ldi	r19, 0xFF	; 255
     bf8:	4f e7       	ldi	r20, 0x7F	; 127
     bfa:	5f e7       	ldi	r21, 0x7F	; 127
     bfc:	c5 01       	movw	r24, r10
     bfe:	b4 01       	movw	r22, r8
     c00:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__cmpsf2>
     c04:	68 ee       	ldi	r22, 0xE8	; 232
     c06:	71 e0       	ldi	r23, 0x01	; 1
     c08:	18 16       	cp	r1, r24
     c0a:	64 f0       	brlt	.+24     	; 0xc24 <_ZN5Print10printFloatEdh+0x8a>
     c0c:	2f ef       	ldi	r18, 0xFF	; 255
     c0e:	3f ef       	ldi	r19, 0xFF	; 255
     c10:	4f e7       	ldi	r20, 0x7F	; 127
     c12:	5f e4       	ldi	r21, 0x4F	; 79
     c14:	c7 01       	movw	r24, r14
     c16:	b6 01       	movw	r22, r12
     c18:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__gesf2>
     c1c:	18 16       	cp	r1, r24
     c1e:	b4 f4       	brge	.+44     	; 0xc4c <_ZN5Print10printFloatEdh+0xb2>
     c20:	6c ee       	ldi	r22, 0xEC	; 236
     c22:	71 e0       	ldi	r23, 0x01	; 1
     c24:	ce 01       	movw	r24, r28
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	cf 90       	pop	r12
     c34:	bf 90       	pop	r11
     c36:	af 90       	pop	r10
     c38:	9f 90       	pop	r9
     c3a:	8f 90       	pop	r8
     c3c:	7f 90       	pop	r7
     c3e:	6f 90       	pop	r6
     c40:	5f 90       	pop	r5
     c42:	4f 90       	pop	r4
     c44:	3f 90       	pop	r3
     c46:	2f 90       	pop	r2
     c48:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <_ZN5Print5writeEPKc.part.2>
     c4c:	2f ef       	ldi	r18, 0xFF	; 255
     c4e:	3f ef       	ldi	r19, 0xFF	; 255
     c50:	4f e7       	ldi	r20, 0x7F	; 127
     c52:	5f ec       	ldi	r21, 0xCF	; 207
     c54:	c7 01       	movw	r24, r14
     c56:	b6 01       	movw	r22, r12
     c58:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__cmpsf2>
     c5c:	87 fd       	sbrc	r24, 7
     c5e:	e0 cf       	rjmp	.-64     	; 0xc20 <_ZN5Print10printFloatEdh+0x86>
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	a9 01       	movw	r20, r18
     c66:	c7 01       	movw	r24, r14
     c68:	b6 01       	movw	r22, r12
     c6a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__cmpsf2>
     c6e:	31 2c       	mov	r3, r1
     c70:	21 2c       	mov	r2, r1
     c72:	87 ff       	sbrs	r24, 7
     c74:	09 c0       	rjmp	.+18     	; 0xc88 <_ZN5Print10printFloatEdh+0xee>
     c76:	6d e2       	ldi	r22, 0x2D	; 45
     c78:	ce 01       	movw	r24, r28
     c7a:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN5Print5printEc>
     c7e:	1c 01       	movw	r2, r24
     c80:	f7 fa       	bst	r15, 7
     c82:	f0 94       	com	r15
     c84:	f7 f8       	bld	r15, 7
     c86:	f0 94       	com	r15
     c88:	10 e0       	ldi	r17, 0x00	; 0
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	9f e3       	ldi	r25, 0x3F	; 63
     c92:	71 16       	cp	r7, r17
     c94:	41 f0       	breq	.+16     	; 0xca6 <_ZN5Print10printFloatEdh+0x10c>
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e2       	ldi	r20, 0x20	; 32
     c9c:	51 e4       	ldi	r21, 0x41	; 65
     c9e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__divsf3>
     ca2:	1f 5f       	subi	r17, 0xFF	; 255
     ca4:	f6 cf       	rjmp	.-20     	; 0xc92 <_ZN5Print10printFloatEdh+0xf8>
     ca6:	a7 01       	movw	r20, r14
     ca8:	96 01       	movw	r18, r12
     caa:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
     cae:	2b 01       	movw	r4, r22
     cb0:	3c 01       	movw	r6, r24
     cb2:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fixunssfsi>
     cb6:	4b 01       	movw	r8, r22
     cb8:	5c 01       	movw	r10, r24
     cba:	2a e0       	ldi	r18, 0x0A	; 10
     cbc:	bc 01       	movw	r22, r24
     cbe:	a4 01       	movw	r20, r8
     cc0:	ce 01       	movw	r24, r28
     cc2:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN5Print11printNumberEmh>
     cc6:	7c 01       	movw	r14, r24
     cc8:	e2 0c       	add	r14, r2
     cca:	f3 1c       	adc	r15, r3
     ccc:	11 23       	and	r17, r17
     cce:	b1 f1       	breq	.+108    	; 0xd3c <_ZN5Print10printFloatEdh+0x1a2>
     cd0:	c5 01       	movw	r24, r10
     cd2:	b4 01       	movw	r22, r8
     cd4:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__floatunsisf>
     cd8:	9b 01       	movw	r18, r22
     cda:	ac 01       	movw	r20, r24
     cdc:	c3 01       	movw	r24, r6
     cde:	b2 01       	movw	r22, r4
     ce0:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__subsf3>
     ce4:	4b 01       	movw	r8, r22
     ce6:	5c 01       	movw	r10, r24
     ce8:	6e e2       	ldi	r22, 0x2E	; 46
     cea:	ce 01       	movw	r24, r28
     cec:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN5Print5printEc>
     cf0:	e8 0e       	add	r14, r24
     cf2:	f9 1e       	adc	r15, r25
     cf4:	11 50       	subi	r17, 0x01	; 1
     cf6:	10 f1       	brcs	.+68     	; 0xd3c <_ZN5Print10printFloatEdh+0x1a2>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e2       	ldi	r20, 0x20	; 32
     cfe:	51 e4       	ldi	r21, 0x41	; 65
     d00:	c5 01       	movw	r24, r10
     d02:	b4 01       	movw	r22, r8
     d04:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__mulsf3>
     d08:	2b 01       	movw	r4, r22
     d0a:	3c 01       	movw	r6, r24
     d0c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fixunssfsi>
     d10:	4b 01       	movw	r8, r22
     d12:	4a e0       	ldi	r20, 0x0A	; 10
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	ce 01       	movw	r24, r28
     d18:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN5Print5printEji>
     d1c:	e8 0e       	add	r14, r24
     d1e:	f9 1e       	adc	r15, r25
     d20:	b4 01       	movw	r22, r8
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__floatunsisf>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	c3 01       	movw	r24, r6
     d30:	b2 01       	movw	r22, r4
     d32:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__subsf3>
     d36:	4b 01       	movw	r8, r22
     d38:	5c 01       	movw	r10, r24
     d3a:	dc cf       	rjmp	.-72     	; 0xcf4 <_ZN5Print10printFloatEdh+0x15a>
     d3c:	c7 01       	movw	r24, r14
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	bf 90       	pop	r11
     d4e:	af 90       	pop	r10
     d50:	9f 90       	pop	r9
     d52:	8f 90       	pop	r8
     d54:	7f 90       	pop	r7
     d56:	6f 90       	pop	r6
     d58:	5f 90       	pop	r5
     d5a:	4f 90       	pop	r4
     d5c:	3f 90       	pop	r3
     d5e:	2f 90       	pop	r2
     d60:	08 95       	ret

00000d62 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     d6c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_ZN5Print10printFloatEdh>
     d70:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
     d72:	ce 01       	movw	r24, r28
     d74:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN5Print7printlnEv>
  return n;
}
     d78:	80 0f       	add	r24, r16
     d7a:	91 1f       	adc	r25, r17
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	08 95       	ret

00000d86 <StartOS>:
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
     d86:	4f 92       	push	r4
     d88:	5f 92       	push	r5
     d8a:	6f 92       	push	r6
     d8c:	7f 92       	push	r7
     d8e:	8f 92       	push	r8
     d90:	9f 92       	push	r9
     d92:	af 92       	push	r10
     d94:	bf 92       	push	r11
     d96:	cf 92       	push	r12
     d98:	df 92       	push	r13
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	00 d0       	rcall	.+0      	; 0xda8 <StartOS+0x22>
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <CDB>
     db0:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <CDB+0x1>
     db4:	9f b7       	in	r25, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	d8 01       	movw	r26, r16
     dba:	18 96       	adiw	r26, 0x08	; 8
     dbc:	2d 91       	ld	r18, X+
     dbe:	3c 91       	ld	r19, X
     dc0:	23 2b       	or	r18, r19
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <StartOS+0x40>
     dc4:	a4 c0       	rjmp	.+328    	; 0xf0e <StartOS+0x188>
     dc6:	88 2e       	mov	r8, r24
     dc8:	80 e1       	ldi	r24, 0x10	; 16
     dca:	9a e0       	ldi	r25, 0x0A	; 10
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <osEE_avr8_system_timer_init>
     dd4:	a0 90 6c 01 	lds	r10, 0x016C	; 0x80016c <CDB+0x4>
     dd8:	b0 90 6d 01 	lds	r11, 0x016D	; 0x80016d <CDB+0x5>
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	f8 01       	movw	r30, r16
     de2:	91 87       	std	Z+9, r25	; 0x09
     de4:	80 87       	std	Z+8, r24	; 0x08
     de6:	82 86       	std	Z+10, r8	; 0x0a
     de8:	e0 90 74 01 	lds	r14, 0x0174	; 0x800174 <CDB+0xc>
     dec:	f0 90 75 01 	lds	r15, 0x0175	; 0x800175 <CDB+0xd>
     df0:	d1 2c       	mov	r13, r1
     df2:	c1 2c       	mov	r12, r1
     df4:	f4 e0       	ldi	r31, 0x04	; 4
     df6:	8f 9e       	mul	r8, r31
     df8:	40 01       	movw	r8, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	e8 0c       	add	r14, r8
     dfe:	f9 1c       	adc	r15, r9
     e00:	37 01       	movw	r6, r14
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	68 0e       	add	r6, r24
     e06:	71 1c       	adc	r7, r1
     e08:	46 e0       	ldi	r20, 0x06	; 6
     e0a:	54 2e       	mov	r5, r20
     e0c:	f3 01       	movw	r30, r6
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	c8 16       	cp	r12, r24
     e14:	d9 06       	cpc	r13, r25
     e16:	e0 f1       	brcs	.+120    	; 0xe90 <StartOS+0x10a>
     e18:	e0 90 70 01 	lds	r14, 0x0170	; 0x800170 <CDB+0x8>
     e1c:	f0 90 71 01 	lds	r15, 0x0171	; 0x800171 <CDB+0x9>
     e20:	38 01       	movw	r6, r16
     e22:	f2 e0       	ldi	r31, 0x02	; 2
     e24:	6f 0e       	add	r6, r31
     e26:	71 1c       	adc	r7, r1
     e28:	d1 2c       	mov	r13, r1
     e2a:	c1 2c       	mov	r12, r1
     e2c:	e8 0c       	add	r14, r8
     e2e:	f9 1c       	adc	r15, r9
     e30:	27 01       	movw	r4, r14
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	48 0e       	add	r4, r24
     e36:	51 1c       	adc	r5, r1
     e38:	88 24       	eor	r8, r8
     e3a:	83 94       	inc	r8
     e3c:	91 2c       	mov	r9, r1
     e3e:	f2 01       	movw	r30, r4
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	c8 16       	cp	r12, r24
     e46:	d9 06       	cpc	r13, r25
     e48:	e8 f1       	brcs	.+122    	; 0xec4 <StartOS+0x13e>
     e4a:	d8 01       	movw	r26, r16
     e4c:	18 96       	adiw	r26, 0x08	; 8
     e4e:	8d 91       	ld	r24, X+
     e50:	9c 91       	ld	r25, X
     e52:	19 97       	sbiw	r26, 0x09	; 9
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	31 f4       	brne	.+12     	; 0xe64 <StartOS+0xde>
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	19 96       	adiw	r26, 0x09	; 9
     e5e:	9c 93       	st	X, r25
     e60:	8e 93       	st	-X, r24
     e62:	18 97       	sbiw	r26, 0x08	; 8
     e64:	f8 01       	movw	r30, r16
     e66:	80 85       	ldd	r24, Z+8	; 0x08
     e68:	91 85       	ldd	r25, Z+9	; 0x09
     e6a:	02 97       	sbiw	r24, 0x02	; 2
     e6c:	41 f4       	brne	.+16     	; 0xe7e <StartOS+0xf8>
     e6e:	d5 01       	movw	r26, r10
     e70:	12 96       	adiw	r26, 0x02	; 2
     e72:	6d 91       	ld	r22, X+
     e74:	7c 91       	ld	r23, X
     e76:	ab 01       	movw	r20, r22
     e78:	c5 01       	movw	r24, r10
     e7a:	0e 94 10 01 	call	0x220	; 0x220 <osEE_hal_save_ctx_and_ready2stacked>
     e7e:	f8 01       	movw	r30, r16
     e80:	80 85       	ldd	r24, Z+8	; 0x08
     e82:	91 85       	ldd	r25, Z+9	; 0x09
     e84:	02 97       	sbiw	r24, 0x02	; 2
     e86:	09 f4       	brne	.+2      	; 0xe8a <StartOS+0x104>
     e88:	78 94       	sei
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	42 c0       	rjmp	.+132    	; 0xf14 <StartOS+0x18e>
     e90:	d7 01       	movw	r26, r14
     e92:	ed 91       	ld	r30, X+
     e94:	fc 91       	ld	r31, X
     e96:	5c 9c       	mul	r5, r12
     e98:	c0 01       	movw	r24, r0
     e9a:	5d 9c       	mul	r5, r13
     e9c:	90 0d       	add	r25, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	e8 0f       	add	r30, r24
     ea2:	f9 1f       	adc	r31, r25
     ea4:	a0 81       	ld	r26, Z
     ea6:	b1 81       	ldd	r27, Z+1	; 0x01
     ea8:	24 81       	ldd	r18, Z+4	; 0x04
     eaa:	35 81       	ldd	r19, Z+5	; 0x05
     eac:	42 81       	ldd	r20, Z+2	; 0x02
     eae:	53 81       	ldd	r21, Z+3	; 0x03
     eb0:	bd 01       	movw	r22, r26
     eb2:	12 96       	adiw	r26, 0x02	; 2
     eb4:	8d 91       	ld	r24, X+
     eb6:	9c 91       	ld	r25, X
     eb8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <osEE_alarm_set_rel>
     ebc:	bf ef       	ldi	r27, 0xFF	; 255
     ebe:	cb 1a       	sub	r12, r27
     ec0:	db 0a       	sbc	r13, r27
     ec2:	a4 cf       	rjmp	.-184    	; 0xe0c <StartOS+0x86>
     ec4:	d7 01       	movw	r26, r14
     ec6:	ed 91       	ld	r30, X+
     ec8:	fc 91       	ld	r31, X
     eca:	c6 01       	movw	r24, r12
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	e8 0f       	add	r30, r24
     ed2:	f9 1f       	adc	r31, r25
     ed4:	40 81       	ld	r20, Z
     ed6:	51 81       	ldd	r21, Z+1	; 0x01
     ed8:	da 01       	movw	r26, r20
     eda:	14 96       	adiw	r26, 0x04	; 4
     edc:	ed 91       	ld	r30, X+
     ede:	fc 91       	ld	r31, X
     ee0:	80 81       	ld	r24, Z
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	80 83       	st	Z, r24
     ee6:	93 82       	std	Z+3, r9	; 0x03
     ee8:	82 82       	std	Z+2, r8	; 0x02
     eea:	f8 01       	movw	r30, r16
     eec:	64 81       	ldd	r22, Z+4	; 0x04
     eee:	75 81       	ldd	r23, Z+5	; 0x05
     ef0:	db 01       	movw	r26, r22
     ef2:	8d 91       	ld	r24, X+
     ef4:	9c 91       	ld	r25, X
     ef6:	11 97       	sbiw	r26, 0x01	; 1
     ef8:	95 83       	std	Z+5, r25	; 0x05
     efa:	84 83       	std	Z+4, r24	; 0x04
     efc:	1d 92       	st	X+, r1
     efe:	1c 92       	st	X, r1
     f00:	c3 01       	movw	r24, r6
     f02:	0e 94 ad 08 	call	0x115a	; 0x115a <osEE_scheduler_rq_insert>
     f06:	bf ef       	ldi	r27, 0xFF	; 255
     f08:	cb 1a       	sub	r12, r27
     f0a:	db 0a       	sbc	r13, r27
     f0c:	98 cf       	rjmp	.-208    	; 0xe3e <StartOS+0xb8>
     f0e:	9f bf       	out	0x3f, r25	; 63
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	df 90       	pop	r13
     f26:	cf 90       	pop	r12
     f28:	bf 90       	pop	r11
     f2a:	af 90       	pop	r10
     f2c:	9f 90       	pop	r9
     f2e:	8f 90       	pop	r8
     f30:	7f 90       	pop	r7
     f32:	6f 90       	pop	r6
     f34:	5f 90       	pop	r5
     f36:	4f 90       	pop	r4
     f38:	08 95       	ret

00000f3a <TerminateTask>:
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
     f3a:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <CDB>
     f3e:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <CDB+0x1>
     f42:	01 90       	ld	r0, Z+
     f44:	f0 81       	ld	r31, Z
     f46:	e0 2d       	mov	r30, r0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     f48:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     f4a:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
     f4c:	6c ea       	ldi	r22, 0xAC	; 172
     f4e:	77 e0       	ldi	r23, 0x07	; 7
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	0e 94 30 01 	call	0x260	; 0x260 <osEE_hal_terminate_ctx>

00000f58 <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <osEE_scheduler_task_end+0x6>
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
     f62:	ae 01       	movw	r20, r28
     f64:	4f 5f       	subi	r20, 0xFF	; 255
     f66:	5f 4f       	sbci	r21, 0xFF	; 255
     f68:	68 e6       	ldi	r22, 0x68	; 104
     f6a:	71 e0       	ldi	r23, 0x01	; 1
     f6c:	86 e5       	ldi	r24, 0x56	; 86
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	0e 94 44 09 	call	0x1288	; 0x1288 <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
     f74:	bc 01       	movw	r22, r24
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <osEE_scheduler_task_wrapper_restore>:
    p_ccb->p_lock_to_be_released = NULL;
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
     f88:	08 95       	ret

00000f8a <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
     f8a:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
     f8c:	ec 81       	ldd	r30, Y+4	; 0x04
     f8e:	fd 81       	ldd	r31, Y+5	; 0x05
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_prio < OSEE_ISR_ALL_PRIO) {
     f90:	81 81       	ldd	r24, Z+1	; 0x01
     f92:	8f 3f       	cpi	r24, 0xFF	; 255
     f94:	09 f0       	breq	.+2      	; 0xf98 <osEE_scheduler_task_wrapper_run+0xe>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
     f96:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
     f98:	e9 85       	ldd	r30, Y+9	; 0x09
     f9a:	fa 85       	ldd	r31, Y+10	; 0x0a
     f9c:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     f9e:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     fa0:	f8 94       	cli
     fa2:	6c ea       	ldi	r22, 0xAC	; 172
     fa4:	77 e0       	ldi	r23, 0x07	; 7
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	0e 94 30 01 	call	0x260	; 0x260 <osEE_hal_terminate_ctx>

00000fae <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     fb6:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     fb8:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
     fba:	68 e6       	ldi	r22, 0x68	; 104
     fbc:	71 e0       	ldi	r23, 0x01	; 1
     fbe:	86 e5       	ldi	r24, 0x56	; 86
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	0e 94 bc 09 	call	0x1378	; 0x1378 <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
     fc6:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
     fc8:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <CDB>
     fcc:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <CDB+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
     fd0:	c0 91 6a 01 	lds	r28, 0x016A	; 0x80016a <CDB+0x2>
     fd4:	d0 91 6b 01 	lds	r29, 0x016B	; 0x80016b <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
     fd8:	f8 01       	movw	r30, r16
     fda:	80 85       	ldd	r24, Z+8	; 0x08
     fdc:	91 85       	ldd	r25, Z+9	; 0x09
     fde:	82 30       	cpi	r24, 0x02	; 2
     fe0:	91 05       	cpc	r25, r1
     fe2:	51 f0       	breq	.+20     	; 0xff8 <osEE_idle_hook_wrapper+0x4a>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
     fe4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <CDB+0x4>
     fe8:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <CDB+0x5>
}
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
     ff4:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
     ff8:	20 97       	sbiw	r28, 0x00	; 0
     ffa:	89 f3       	breq	.-30     	; 0xfde <osEE_idle_hook_wrapper+0x30>
      p_idle_hook();
     ffc:	fe 01       	movw	r30, r28
     ffe:	09 95       	icall
    1000:	eb cf       	rjmp	.-42     	; 0xfd8 <osEE_idle_hook_wrapper+0x2a>

00001002 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    100a:	ec 01       	movw	r28, r24
    100c:	a8 81       	ld	r26, Y
    100e:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    1010:	eb 01       	movw	r28, r22
    1012:	e8 81       	ld	r30, Y
    1014:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    1016:	16 96       	adiw	r26, 0x06	; 6
    1018:	cd 91       	ld	r28, X+
    101a:	dc 91       	ld	r29, X
    101c:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    101e:	20 97       	sbiw	r28, 0x00	; 0
    1020:	c1 f1       	breq	.+112    	; 0x1092 <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    1026:	30 97       	sbiw	r30, 0x00	; 0
    1028:	09 f4       	brne	.+2      	; 0x102c <osEE_scheduler_core_rq_preempt_stk+0x2a>
    102a:	3f c0       	rjmp	.+126    	; 0x10aa <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    102c:	ec 01       	movw	r28, r24
    102e:	0c 81       	ldd	r16, Y+4	; 0x04
    1030:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    1032:	22 81       	ldd	r18, Z+2	; 0x02
    1034:	33 81       	ldd	r19, Z+3	; 0x03
    1036:	e9 01       	movw	r28, r18
    1038:	4c 81       	ldd	r20, Y+4	; 0x04
    103a:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    103c:	e8 01       	movw	r28, r16
    103e:	39 81       	ldd	r19, Y+1	; 0x01
    1040:	ea 01       	movw	r28, r20
    1042:	29 81       	ldd	r18, Y+1	; 0x01
    1044:	32 17       	cp	r19, r18
    1046:	88 f5       	brcc	.+98     	; 0x10aa <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    1048:	22 e0       	ldi	r18, 0x02	; 2
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	e8 01       	movw	r28, r16
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    104e:	3b 83       	std	Y+3, r19	; 0x03
    1050:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    1052:	20 81       	ld	r18, Z
    1054:	31 81       	ldd	r19, Z+1	; 0x01
    1056:	eb 01       	movw	r28, r22
    1058:	39 83       	std	Y+1, r19	; 0x01
    105a:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    105c:	c2 81       	ldd	r28, Z+2	; 0x02
    105e:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    1060:	2c 81       	ldd	r18, Y+4	; 0x04
    1062:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    1064:	16 96       	adiw	r26, 0x06	; 6
    1066:	4d 91       	ld	r20, X+
    1068:	5c 91       	ld	r21, X
    106a:	17 97       	sbiw	r26, 0x07	; 7
    106c:	51 83       	std	Z+1, r21	; 0x01
    106e:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    1070:	17 96       	adiw	r26, 0x07	; 7
    1072:	fc 93       	st	X, r31
    1074:	ee 93       	st	-X, r30
    1076:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    1078:	cd 93       	st	X+, r28
    107a:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    107c:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    107e:	f9 01       	movw	r30, r18
    1080:	51 81       	ldd	r21, Z+1	; 0x01
    1082:	54 17       	cp	r21, r20
    1084:	08 f4       	brcc	.+2      	; 0x1088 <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
    1086:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    1092:	30 97       	sbiw	r30, 0x00	; 0
    1094:	51 f0       	breq	.+20     	; 0x10aa <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    1096:	ec 01       	movw	r28, r24
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    109c:	ec 01       	movw	r28, r24
    109e:	4c 81       	ldd	r20, Y+4	; 0x04
    10a0:	5d 81       	ldd	r21, Y+5	; 0x05
    10a2:	22 e0       	ldi	r18, 0x02	; 2
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	ea 01       	movw	r28, r20
    10a8:	d2 cf       	rjmp	.-92     	; 0x104e <osEE_scheduler_core_rq_preempt_stk+0x4c>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    p_ret_sn  = NULL;
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
    10ae:	ec cf       	rjmp	.-40     	; 0x1088 <osEE_scheduler_core_rq_preempt_stk+0x86>

000010b0 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    10b0:	cf 92       	push	r12
    10b2:	df 92       	push	r13
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    10c0:	eb 01       	movw	r28, r22
    10c2:	aa 81       	ldd	r26, Y+2	; 0x02
    10c4:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    10c6:	14 96       	adiw	r26, 0x04	; 4
    10c8:	ed 91       	ld	r30, X+
    10ca:	fc 91       	ld	r31, X
    10cc:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    10ce:	41 15       	cp	r20, r1
    10d0:	51 05       	cpc	r21, r1
    10d2:	01 f1       	breq	.+64     	; 0x1114 <osEE_sn_priority_insert+0x64>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    10d4:	22 81       	ldd	r18, Z+2	; 0x02
    10d6:	33 81       	ldd	r19, Z+3	; 0x03
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	d8 f0       	brcs	.+54     	; 0x1114 <osEE_sn_priority_insert+0x64>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    10de:	1b 96       	adiw	r26, 0x0b	; 11
    10e0:	2c 91       	ld	r18, X
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    10e2:	dc 01       	movw	r26, r24
    10e4:	ed 91       	ld	r30, X+
    10e6:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    10ec:	30 97       	sbiw	r30, 0x00	; 0
    10ee:	a1 f4       	brne	.+40     	; 0x1118 <osEE_sn_priority_insert+0x68>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    10f0:	10 97       	sbiw	r26, 0x00	; 0
    10f2:	69 f1       	breq	.+90     	; 0x114e <osEE_sn_priority_insert+0x9e>
    p_prev->p_next = p_sn_new;
    10f4:	6d 93       	st	X+, r22
    10f6:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
    10fc:	eb 01       	movw	r28, r22
    10fe:	f9 83       	std	Y+1, r31	; 0x01
    1100:	e8 83       	st	Y, r30

  return head_changed;
}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1114:	21 81       	ldd	r18, Z+1	; 0x01
    1116:	e5 cf       	rjmp	.-54     	; 0x10e2 <osEE_sn_priority_insert+0x32>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    1118:	02 81       	ldd	r16, Z+2	; 0x02
    111a:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    111c:	e8 01       	movw	r28, r16
    111e:	cc 80       	ldd	r12, Y+4	; 0x04
    1120:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	81 f0       	breq	.+32     	; 0x1148 <osEE_sn_priority_insert+0x98>
    1128:	e6 01       	movw	r28, r12
    112a:	ea 80       	ldd	r14, Y+2	; 0x02
    112c:	fb 80       	ldd	r15, Y+3	; 0x03
    112e:	d2 e0       	ldi	r29, 0x02	; 2
    1130:	ed 16       	cp	r14, r29
    1132:	f1 04       	cpc	r15, r1
    1134:	48 f0       	brcs	.+18     	; 0x1148 <osEE_sn_priority_insert+0x98>
      prio_to_check = p_cur_tdb->ready_prio;
    1136:	e8 01       	movw	r28, r16
    1138:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
    113a:	32 17       	cp	r19, r18
    113c:	c8 f2       	brcs	.-78     	; 0x10f0 <osEE_sn_priority_insert+0x40>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    113e:	df 01       	movw	r26, r30
    1140:	01 90       	ld	r0, Z+
    1142:	f0 81       	ld	r31, Z
    1144:	e0 2d       	mov	r30, r0
    1146:	d2 cf       	rjmp	.-92     	; 0x10ec <osEE_sn_priority_insert+0x3c>
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    1148:	e6 01       	movw	r28, r12
    114a:	39 81       	ldd	r19, Y+1	; 0x01
    114c:	f6 cf       	rjmp	.-20     	; 0x113a <osEE_sn_priority_insert+0x8a>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    114e:	dc 01       	movw	r26, r24
    1150:	6d 93       	st	X+, r22
    1152:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	d1 cf       	rjmp	.-94     	; 0x10fc <osEE_sn_priority_insert+0x4c>

0000115a <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    115a:	fb 01       	movw	r30, r22
    115c:	53 83       	std	Z+3, r21	; 0x03
    115e:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <osEE_sn_priority_insert>

00001168 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    1176:	fc 01       	movw	r30, r24
    1178:	c0 81       	ld	r28, Z
    117a:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    117c:	ee 80       	ldd	r14, Y+6	; 0x06
    117e:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    1180:	f7 01       	movw	r30, r14
    1182:	80 81       	ld	r24, Z
    1184:	91 81       	ldd	r25, Z+1	; 0x01
    1186:	9f 83       	std	Y+7, r25	; 0x07
    1188:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    118a:	c8 01       	movw	r24, r16
    118c:	0e 94 01 08 	call	0x1002	; 0x1002 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    1190:	89 2b       	or	r24, r25
    1192:	41 f4       	brne	.+16     	; 0x11a4 <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    1194:	ee 81       	ldd	r30, Y+6	; 0x06
    1196:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    1198:	30 97       	sbiw	r30, 0x00	; 0
    119a:	61 f0       	breq	.+24     	; 0x11b4 <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
    11a0:	99 83       	std	Y+1, r25	; 0x01
    11a2:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    11a4:	c7 01       	movw	r24, r14
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	08 95       	ret
      if ( p_curr_stk_sn != NULL ) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    11b4:	f8 01       	movw	r30, r16
    11b6:	84 81       	ldd	r24, Z+4	; 0x04
    11b8:	95 81       	ldd	r25, Z+5	; 0x05
    11ba:	f2 cf       	rjmp	.-28     	; 0x11a0 <osEE_scheduler_core_pop_running+0x38>

000011bc <osEE_scheduler_task_activated>:
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
    11bc:	cf 92       	push	r12
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	da 01       	movw	r26, r20
    11ce:	14 96       	adiw	r26, 0x04	; 4
    11d0:	cd 90       	ld	r12, X+
    11d2:	dc 90       	ld	r13, X
    11d4:	15 97       	sbiw	r26, 0x05	; 5
    11d6:	e6 01       	movw	r28, r12
    11d8:	98 81       	ld	r25, Y
    11da:	1d 96       	adiw	r26, 0x0d	; 13
    11dc:	8c 91       	ld	r24, X
    11de:	98 17       	cp	r25, r24
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <osEE_scheduler_task_activated+0x28>
    11e2:	4f c0       	rjmp	.+158    	; 0x1282 <osEE_scheduler_task_activated+0xc6>
    11e4:	db 01       	movw	r26, r22
    11e6:	ed 91       	ld	r30, X+
    11e8:	fc 91       	ld	r31, X
    11ea:	00 81       	ld	r16, Z
    11ec:	11 81       	ldd	r17, Z+1	; 0x01
    11ee:	e8 01       	movw	r28, r16
    11f0:	ec 80       	ldd	r14, Y+4	; 0x04
    11f2:	fd 80       	ldd	r15, Y+5	; 0x05
    11f4:	9f 5f       	subi	r25, 0xFF	; 255
    11f6:	d6 01       	movw	r26, r12
    11f8:	9c 93       	st	X, r25
    11fa:	a4 81       	ldd	r26, Z+4	; 0x04
    11fc:	b5 81       	ldd	r27, Z+5	; 0x05
    11fe:	6d 91       	ld	r22, X+
    1200:	7c 91       	ld	r23, X
    1202:	11 97       	sbiw	r26, 0x01	; 1
    1204:	23 2b       	or	r18, r19
    1206:	49 f1       	breq	.+82     	; 0x125a <osEE_scheduler_task_activated+0x9e>
    1208:	e7 01       	movw	r28, r14
    120a:	99 81       	ldd	r25, Y+1	; 0x01
    120c:	e6 01       	movw	r28, r12
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	98 17       	cp	r25, r24
    1212:	18 f5       	brcc	.+70     	; 0x125a <osEE_scheduler_task_activated+0x9e>
    1214:	75 83       	std	Z+5, r23	; 0x05
    1216:	64 83       	std	Z+4, r22	; 0x04
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	e7 01       	movw	r28, r14
    121e:	9b 83       	std	Y+3, r25	; 0x03
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	13 96       	adiw	r26, 0x03	; 3
    1224:	5c 93       	st	X, r21
    1226:	4e 93       	st	-X, r20
    1228:	12 97       	sbiw	r26, 0x02	; 2
    122a:	86 81       	ldd	r24, Z+6	; 0x06
    122c:	97 81       	ldd	r25, Z+7	; 0x07
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	9c 93       	st	X, r25
    1232:	8e 93       	st	-X, r24
    1234:	b7 83       	std	Z+7, r27	; 0x07
    1236:	a6 83       	std	Z+6, r26	; 0x06
    1238:	51 83       	std	Z+1, r21	; 0x01
    123a:	40 83       	st	Z, r20
    123c:	ba 01       	movw	r22, r20
    123e:	c8 01       	movw	r24, r16
    1240:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <osEE_change_context_from_running>
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
    1258:	08 95       	ret
    125a:	e6 01       	movw	r28, r12
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	9b 81       	ldd	r25, Y+3	; 0x03
    1260:	89 2b       	or	r24, r25
    1262:	21 f4       	brne	.+8      	; 0x126c <osEE_scheduler_task_activated+0xb0>
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	9b 83       	std	Y+3, r25	; 0x03
    126a:	8a 83       	std	Y+2, r24	; 0x02
    126c:	75 83       	std	Z+5, r23	; 0x05
    126e:	64 83       	std	Z+4, r22	; 0x04
    1270:	11 96       	adiw	r26, 0x01	; 1
    1272:	1c 92       	st	X, r1
    1274:	1e 92       	st	-X, r1
    1276:	bd 01       	movw	r22, r26
    1278:	cf 01       	movw	r24, r30
    127a:	02 96       	adiw	r24, 0x02	; 2
    127c:	0e 94 ad 08 	call	0x115a	; 0x115a <osEE_scheduler_rq_insert>
    1280:	e1 cf       	rjmp	.-62     	; 0x1244 <osEE_scheduler_task_activated+0x88>
    1282:	84 e0       	ldi	r24, 0x04	; 4
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	e0 cf       	rjmp	.-64     	; 0x1248 <osEE_scheduler_task_activated+0x8c>

00001288 <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    1288:	af 92       	push	r10
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    129e:	db 01       	movw	r26, r22
    12a0:	cd 91       	ld	r28, X+
    12a2:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    12a4:	fe 01       	movw	r30, r28
    12a6:	01 91       	ld	r16, Z+
    12a8:	11 91       	ld	r17, Z+
    12aa:	7f 01       	movw	r14, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    12ac:	d8 01       	movw	r26, r16
    12ae:	14 96       	adiw	r26, 0x04	; 4
    12b0:	cd 90       	ld	r12, X+
    12b2:	dc 90       	ld	r13, X

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    12b4:	fa 01       	movw	r30, r20
    12b6:	11 83       	std	Z+1, r17	; 0x01
    12b8:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    12ba:	d6 01       	movw	r26, r12
    12bc:	12 96       	adiw	r26, 0x02	; 2
    12be:	8d 91       	ld	r24, X+
    12c0:	9c 91       	ld	r25, X
    12c2:	04 97       	sbiw	r24, 0x04	; 4
    12c4:	a9 f5       	brne	.+106    	; 0x1330 <osEE_scheduler_task_terminated+0xa8>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    12c6:	b7 01       	movw	r22, r14
    12c8:	c5 01       	movw	r24, r10
    12ca:	0e 94 b4 08 	call	0x1168	; 0x1168 <osEE_scheduler_core_pop_running>
    12ce:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    12d0:	88 81       	ld	r24, Y
    12d2:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    12d4:	08 17       	cp	r16, r24
    12d6:	19 07       	cpc	r17, r25
    12d8:	31 f1       	breq	.+76     	; 0x1326 <osEE_scheduler_task_terminated+0x9e>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    12da:	d8 01       	movw	r26, r16
    12dc:	14 96       	adiw	r26, 0x04	; 4
    12de:	ed 91       	ld	r30, X+
    12e0:	fc 91       	ld	r31, X
    12e2:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    12e4:	1b 96       	adiw	r26, 0x0b	; 11
    12e6:	2c 91       	ld	r18, X
    12e8:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    12ea:	20 81       	ld	r18, Z
    12ec:	21 50       	subi	r18, 0x01	; 1
    12ee:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    12f0:	21 11       	cpse	r18, r1
    12f2:	14 c0       	rjmp	.+40     	; 0x131c <osEE_scheduler_task_terminated+0x94>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    12f4:	13 82       	std	Z+3, r1	; 0x03
    12f6:	12 82       	std	Z+2, r1	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	da 01       	movw	r26, r20
    12fe:	2d 93       	st	X+, r18
    1300:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    1302:	5d 83       	std	Y+5, r21	; 0x05
    1304:	4c 83       	std	Y+4, r20	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	bf 90       	pop	r11
    1318:	af 90       	pop	r10
    131a:	08 95       	ret
  } else {
    p_tcb->status = OSEE_TASK_READY;
    131c:	21 e0       	ldi	r18, 0x01	; 1
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	33 83       	std	Z+3, r19	; 0x03
    1322:	22 83       	std	Z+2, r18	; 0x02
    1324:	e9 cf       	rjmp	.-46     	; 0x12f8 <osEE_scheduler_task_terminated+0x70>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    1326:	f6 01       	movw	r30, r12
    1328:	20 81       	ld	r18, Z
    132a:	21 50       	subi	r18, 0x01	; 1
    132c:	20 83       	st	Z, r18
    132e:	e4 cf       	rjmp	.-56     	; 0x12f8 <osEE_scheduler_task_terminated+0x70>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    1330:	6e 81       	ldd	r22, Y+6	; 0x06
    1332:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    1334:	fb 01       	movw	r30, r22
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	9f 83       	std	Y+7, r25	; 0x07
    133c:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    133e:	d8 01       	movw	r26, r16
    1340:	1b 96       	adiw	r26, 0x0b	; 11
    1342:	8c 91       	ld	r24, X
    1344:	f6 01       	movw	r30, r12
    1346:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	93 83       	std	Z+3, r25	; 0x03
    134e:	82 83       	std	Z+2, r24	; 0x02
      if (p_tcb_term->current_num_of_act == 1U) {
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    1350:	a8 01       	movw	r20, r16
    1352:	c7 01       	movw	r24, r14
    1354:	0e 94 ad 08 	call	0x115a	; 0x115a <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    1358:	b7 01       	movw	r22, r14
    135a:	c5 01       	movw	r24, r10
    135c:	0e 94 01 08 	call	0x1002	; 0x1002 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    1360:	89 2b       	or	r24, r25
    1362:	39 f4       	brne	.+14     	; 0x1372 <osEE_scheduler_task_terminated+0xea>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    1364:	ee 81       	ldd	r30, Y+6	; 0x06
    1366:	ff 81       	ldd	r31, Y+7	; 0x07
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    136c:	99 83       	std	Y+1, r25	; 0x01
    136e:	88 83       	st	Y, r24
    1370:	ca cf       	rjmp	.-108    	; 0x1306 <osEE_scheduler_task_terminated+0x7e>
        } else {
          p_tdb_to = p_ccb->p_curr;
    1372:	88 81       	ld	r24, Y
    1374:	99 81       	ldd	r25, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    1376:	c7 cf       	rjmp	.-114    	; 0x1306 <osEE_scheduler_task_terminated+0x7e>

00001378 <osEE_scheduler_task_preemption_point>:
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb
)
{
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	cb 01       	movw	r24, r22
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    137e:	fb 01       	movw	r30, r22
    1380:	c0 81       	ld	r28, Z
    1382:	d1 81       	ldd	r29, Z+1	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    1384:	be 01       	movw	r22, r28
    1386:	6e 5f       	subi	r22, 0xFE	; 254
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	0e 94 01 08 	call	0x1002	; 0x1002 <osEE_scheduler_core_rq_preempt_stk>

  if (p_prev != NULL) {
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	49 f0       	breq	.+18     	; 0x13a4 <osEE_scheduler_task_preemption_point+0x2c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_prev, p_curr);
    1392:	68 81       	ld	r22, Y
    1394:	79 81       	ldd	r23, Y+1	; 0x01
    1396:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
  }
  return is_preemption;
}
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	08 95       	ret
    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	80 e0       	ldi	r24, 0x00	; 0
  }
  return is_preemption;
    13a8:	fa cf       	rjmp	.-12     	; 0x139e <osEE_scheduler_task_preemption_point+0x26>

000013aa <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb
)
{
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb  = p_cdb->p_ccb;
    13ae:	db 01       	movw	r26, r22
    13b0:	ed 91       	ld	r30, X+
    13b2:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
    13b8:	26 81       	ldd	r18, Z+6	; 0x06
    13ba:	37 81       	ldd	r19, Z+7	; 0x07

  p_preempted->p_tcb->status    = OSEE_TASK_READY_STACKED;
    13bc:	ec 01       	movw	r28, r24
    13be:	ac 81       	ldd	r26, Y+4	; 0x04
    13c0:	bd 81       	ldd	r27, Y+5	; 0x05
    13c2:	62 e0       	ldi	r22, 0x02	; 2
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	13 96       	adiw	r26, 0x03	; 3
    13c8:	7c 93       	st	X, r23
    13ca:	6e 93       	st	-X, r22
    13cc:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_curr                 = p_tdb;
    13ce:	51 83       	std	Z+1, r21	; 0x01
    13d0:	40 83       	st	Z, r20
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    13d2:	a4 81       	ldd	r26, Z+4	; 0x04
    13d4:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    13d6:	6d 91       	ld	r22, X+
    13d8:	7c 91       	ld	r23, X
    13da:	11 97       	sbiw	r26, 0x01	; 1
    13dc:	75 83       	std	Z+5, r23	; 0x05
    13de:	64 83       	std	Z+4, r22	; 0x04

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  /* Alloc the SN for the new Running TASK */
  p_ccb->p_stk_sn               = osEE_sn_alloc(&p_ccb->p_free_sn);
    13e0:	b7 83       	std	Z+7, r27	; 0x07
    13e2:	a6 83       	std	Z+6, r26	; 0x06
  osEE_unlock_core(p_cdb);

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
    13e4:	13 96       	adiw	r26, 0x03	; 3
    13e6:	5c 93       	st	X, r21
    13e8:	4e 93       	st	-X, r20
    13ea:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
    13ec:	2d 93       	st	X+, r18
    13ee:	3c 93       	st	X, r19

  osEE_change_context_from_running(p_preempted, p_tdb);
    13f0:	ba 01       	movw	r22, r20
}
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;

  osEE_change_context_from_running(p_preempted, p_tdb);
    13f6:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <osEE_change_context_from_running>

000013fa <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
    13fa:	db 01       	movw	r26, r22
    13fc:	ed 91       	ld	r30, X+
    13fe:	fc 91       	ld	r31, X
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    1400:	a4 81       	ldd	r26, Z+4	; 0x04
    1402:	b5 81       	ldd	r27, Z+5	; 0x05
    1404:	ab 2b       	or	r26, r27
    1406:	39 f4       	brne	.+14     	; 0x1416 <osEE_alarm_set_rel+0x1c>
    ev = E_OS_STATE;
  } else {
    p_alarm_cb->cycle = cycle;
    1408:	37 83       	std	Z+7, r19	; 0x07
    140a:	26 83       	std	Z+6, r18	; 0x06

    osEE_counter_insert_rel_trigger(
    140c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <osEE_counter_insert_rel_trigger>
      p_counter_db, p_trigger_db, increment
    );
    ev = E_OK;
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	08 95       	ret
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    ev = E_OS_STATE;
    1416:	87 e0       	ldi	r24, 0x07	; 7
    1418:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
    141a:	08 95       	ret

0000141c <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    141c:	f8 94       	cli
    141e:	ff cf       	rjmp	.-2      	; 0x141e <__vector_default+0x2>

00001420 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    1420:	ec e1       	ldi	r30, 0x1C	; 28
}
    1422:	08 95       	ret

00001424 <__vector_11>:
OSEE_AVR8_ISR_NOT_DEFINED(TIMER1_CAPT_vect)
#endif /* OSEE_AVR8_TIMER1_CAPT_ISR */

/* TIMER1_COMPA interrupt vector */
#if (defined(OSEE_AVR8_TIMER1_COMPA_ISR_TID)) && (OSEE_AVR8_TIMER1_COMPA_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(TIMER1_COMPA_vect, OSEE_AVR8_TIMER1_COMPA_ISR_TID)
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <osEE_avr8_isr2_stub>
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	18 95       	reti

00001434 <osEE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void OSEE_COMPILER_KEEP OSEE_NAKED osEE_avr8_isr2_stub(TaskType t)
{

  OSEE_AVR8_ISR_PREINSTUB();
    1434:	1f 92       	push	r1
    1436:	0f 92       	push	r0
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	0f 92       	push	r0
    143c:	11 24       	eor	r1, r1
    143e:	2f 93       	push	r18
    1440:	3f 93       	push	r19
    1442:	4f 93       	push	r20
    1444:	5f 93       	push	r21
    1446:	6f 93       	push	r22
    1448:	7f 93       	push	r23
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
{
  VAR(StatusType, AUTOMATIC) ret_val  = E_OK;
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
    1452:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <KDB+0x2>
    1456:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <KDB+0x3>
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	e8 0f       	add	r30, r24
    1462:	f9 1f       	adc	r31, r25
    1464:	40 81       	ld	r20, Z
    1466:	51 81       	ldd	r21, Z+1	; 0x01

  /* Mark the TASK as Activated */
  ++p_act_tdb->p_tcb->current_num_of_act;
    1468:	da 01       	movw	r26, r20
    146a:	14 96       	adiw	r26, 0x04	; 4
    146c:	ed 91       	ld	r30, X+
    146e:	fc 91       	ld	r31, X
    1470:	80 81       	ld	r24, Z
    1472:	8f 5f       	subi	r24, 0xFF	; 255
    1474:	80 83       	st	Z, r24

  osEE_scheduler_task_set_running(p_kdb, p_cdb, p_act_tdb);
    1476:	68 e6       	ldi	r22, 0x68	; 104
    1478:	71 e0       	ldi	r23, 0x01	; 1
    147a:	86 e5       	ldi	r24, 0x56	; 86
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <osEE_scheduler_task_set_running>
#endif /* __ATXMEGA__ */

  /* Activate ISR2 */
  osEE_activate_isr2(t);

  OSEE_AVR8_ISR_POSTINSTUB();
    1482:	ff 91       	pop	r31
    1484:	ef 91       	pop	r30
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	7f 91       	pop	r23
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1

  OSEE_RETURN();
    149e:	08 95       	ret

000014a0 <osEE_avr8_system_timer_init>:

#if (defined(OSEE_SYSTEM_TIMER_DEVICE))
#if (OSEE_SYSTEM_TIMER_DEVICE == OSEE_AVR8_TIMER1_COMPA)

void osEE_avr8_system_timer_init(void) {
  OsEE_atmega_startTimer1(OSTICKDURATION / OSEE_KILO);
    14a0:	68 ee       	ldi	r22, 0xE8	; 232
    14a2:	73 e0       	ldi	r23, 0x03	; 3
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <OsEE_atmega_startTimer1>

000014ac <osEE_avr8_system_timer_handler>:
}

ISR2(osEE_avr8_system_timer_handler) {
  OsEE_CDB * p_cdb = osEE_get_curr_core();
  osEE_counter_increment(p_cdb->p_sys_counter_db);
    14ac:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <CDB+0x6>
    14b0:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <CDB+0x7>
    14b4:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <osEE_counter_increment>

000014b8 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    14b8:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    14ba:	a4 81       	ldd	r26, Z+4	; 0x04
    14bc:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    14be:	12 96       	adiw	r26, 0x02	; 2
    14c0:	2d 91       	ld	r18, X+
    14c2:	3c 91       	ld	r19, X
    14c4:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    14c6:	44 e0       	ldi	r20, 0x04	; 4
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	13 96       	adiw	r26, 0x03	; 3
    14cc:	5c 93       	st	X, r21
    14ce:	4e 93       	st	-X, r20
    14d0:	12 97       	sbiw	r26, 0x02	; 2
    14d2:	dc 01       	movw	r26, r24
    14d4:	12 96       	adiw	r26, 0x02	; 2
    14d6:	4d 91       	ld	r20, X+
    14d8:	5c 91       	ld	r21, X
    14da:	62 81       	ldd	r22, Z+2	; 0x02
    14dc:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    14de:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	11 f4       	brne	.+4      	; 0x14ea <osEE_change_context_from_running+0x32>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    14e6:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    14ea:	0c 94 10 01 	jmp	0x220	; 0x220 <osEE_hal_save_ctx_and_ready2stacked>

000014ee <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    14ee:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    14f0:	db 01       	movw	r26, r22
    14f2:	14 96       	adiw	r26, 0x04	; 4
    14f4:	ed 91       	ld	r30, X+
    14f6:	fc 91       	ld	r31, X
    14f8:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    14fa:	22 81       	ldd	r18, Z+2	; 0x02
    14fc:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    14fe:	44 e0       	ldi	r20, 0x04	; 4
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	53 83       	std	Z+3, r21	; 0x03
    1504:	42 83       	std	Z+2, r20	; 0x02
    1506:	12 96       	adiw	r26, 0x02	; 2
    1508:	6d 91       	ld	r22, X+
    150a:	7c 91       	ld	r23, X

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	11 f4       	brne	.+4      	; 0x1516 <osEE_change_context_from_task_end+0x28>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    1512:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    1516:	0c 94 08 01 	jmp	0x210	; 0x210 <osEE_hal_ready2stacked>

0000151a <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    151a:	dc 01       	movw	r26, r24
    151c:	12 96       	adiw	r26, 0x02	; 2
    151e:	6d 91       	ld	r22, X+
    1520:	7c 91       	ld	r23, X
    1522:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    1524:	ed 91       	ld	r30, X+
    1526:	fc 91       	ld	r31, X
    1528:	40 81       	ld	r20, Z
    152a:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    152c:	db 01       	movw	r26, r22
    152e:	ed 91       	ld	r30, X+
    1530:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    1532:	22 89       	ldd	r18, Z+18	; 0x12
    1534:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    1536:	21 15       	cp	r18, r1
    1538:	31 05       	cpc	r19, r1
    153a:	19 f0       	breq	.+6      	; 0x1542 <osEE_idle_task_terminate+0x28>
    153c:	42 17       	cp	r20, r18
    153e:	53 07       	cpc	r21, r19
    1540:	29 f4       	brne	.+10     	; 0x154c <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    1542:	db 01       	movw	r26, r22
    1544:	ed 93       	st	X+, r30
    1546:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    1548:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <osEE_hal_restore_ctx>
    154c:	f9 01       	movw	r30, r18
    154e:	f1 cf       	rjmp	.-30     	; 0x1532 <osEE_idle_task_terminate+0x18>

00001550 <osEE_counter_insert_abs_trigger>:
    }
  }

  /* Turn Off the Trigger */
  p_trigger_cb->active = OSEE_FALSE;
}
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	dc 01       	movw	r26, r24
    155e:	8d 91       	ld	r24, X+
    1560:	9c 91       	ld	r25, X
    1562:	dc 01       	movw	r26, r24
    1564:	ed 91       	ld	r30, X+
    1566:	fc 91       	ld	r31, X
    1568:	11 97       	sbiw	r26, 0x01	; 1
    156a:	12 96       	adiw	r26, 0x02	; 2
    156c:	0d 91       	ld	r16, X+
    156e:	1c 91       	ld	r17, X
    1570:	db 01       	movw	r26, r22
    1572:	cd 91       	ld	r28, X+
    1574:	dc 91       	ld	r29, X
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3d 83       	std	Y+5, r19	; 0x05
    157c:	2c 83       	std	Y+4, r18	; 0x04
    157e:	5b 83       	std	Y+3, r21	; 0x03
    1580:	4a 83       	std	Y+2, r20	; 0x02
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	e1 f0       	breq	.+56     	; 0x15c2 <osEE_counter_insert_abs_trigger+0x72>
    158a:	a0 81       	ld	r26, Z
    158c:	b1 81       	ldd	r27, Z+1	; 0x01
    158e:	12 96       	adiw	r26, 0x02	; 2
    1590:	ed 90       	ld	r14, X+
    1592:	fc 90       	ld	r15, X
    1594:	13 97       	sbiw	r26, 0x03	; 3
    1596:	0e 15       	cp	r16, r14
    1598:	1f 05       	cpc	r17, r15
    159a:	68 f4       	brcc	.+26     	; 0x15b6 <osEE_counter_insert_abs_trigger+0x66>
    159c:	4e 15       	cp	r20, r14
    159e:	5f 05       	cpc	r21, r15
    15a0:	18 f4       	brcc	.+6      	; 0x15a8 <osEE_counter_insert_abs_trigger+0x58>
    15a2:	04 17       	cp	r16, r20
    15a4:	15 07       	cpc	r17, r21
    15a6:	68 f0       	brcs	.+26     	; 0x15c2 <osEE_counter_insert_abs_trigger+0x72>
    15a8:	fc 90       	ld	r15, X
    15aa:	11 96       	adiw	r26, 0x01	; 1
    15ac:	ac 91       	ld	r26, X
    15ae:	9f 01       	movw	r18, r30
    15b0:	ef 2d       	mov	r30, r15
    15b2:	fa 2f       	mov	r31, r26
    15b4:	e8 cf       	rjmp	.-48     	; 0x1586 <osEE_counter_insert_abs_trigger+0x36>
    15b6:	04 17       	cp	r16, r20
    15b8:	15 07       	cpc	r17, r21
    15ba:	18 f0       	brcs	.+6      	; 0x15c2 <osEE_counter_insert_abs_trigger+0x72>
    15bc:	4e 15       	cp	r20, r14
    15be:	5f 05       	cpc	r21, r15
    15c0:	98 f7       	brcc	.-26     	; 0x15a8 <osEE_counter_insert_abs_trigger+0x58>
    15c2:	21 15       	cp	r18, r1
    15c4:	31 05       	cpc	r19, r1
    15c6:	19 f0       	breq	.+6      	; 0x15ce <osEE_counter_insert_abs_trigger+0x7e>
    15c8:	d9 01       	movw	r26, r18
    15ca:	8d 91       	ld	r24, X+
    15cc:	9c 91       	ld	r25, X
    15ce:	dc 01       	movw	r26, r24
    15d0:	6d 93       	st	X+, r22
    15d2:	7c 93       	st	X, r23
    15d4:	f9 83       	std	Y+1, r31	; 0x01
    15d6:	e8 83       	st	Y, r30
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	08 95       	ret

000015e6 <osEE_counter_insert_rel_trigger>:
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	dc 01       	movw	r26, r24
    15ec:	12 96       	adiw	r26, 0x02	; 2
    15ee:	ed 91       	ld	r30, X+
    15f0:	fc 91       	ld	r31, X
    15f2:	13 97       	sbiw	r26, 0x03	; 3
    15f4:	0d 90       	ld	r0, X+
    15f6:	bc 91       	ld	r27, X
    15f8:	a0 2d       	mov	r26, r0
    15fa:	12 96       	adiw	r26, 0x02	; 2
    15fc:	2d 91       	ld	r18, X+
    15fe:	3c 91       	ld	r19, X
    1600:	df 01       	movw	r26, r30
    1602:	a4 1b       	sub	r26, r20
    1604:	b5 0b       	sbc	r27, r21
    1606:	a2 17       	cp	r26, r18
    1608:	b3 07       	cpc	r27, r19
    160a:	30 f0       	brcs	.+12     	; 0x1618 <osEE_counter_insert_rel_trigger+0x32>
    160c:	42 0f       	add	r20, r18
    160e:	53 1f       	adc	r21, r19
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <osEE_counter_insert_abs_trigger>
    1618:	41 50       	subi	r20, 0x01	; 1
    161a:	51 09       	sbc	r21, r1
    161c:	42 0f       	add	r20, r18
    161e:	53 1f       	adc	r21, r19
    1620:	4e 1b       	sub	r20, r30
    1622:	5f 0b       	sbc	r21, r31
    1624:	f5 cf       	rjmp	.-22     	; 0x1610 <osEE_counter_insert_rel_trigger+0x2a>

00001626 <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
    1626:	af 92       	push	r10
    1628:	bf 92       	push	r11
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
    163a:	dc 01       	movw	r26, r24
    163c:	0d 91       	ld	r16, X+
    163e:	1c 91       	ld	r17, X
    1640:	11 97       	sbiw	r26, 0x01	; 1
       This because is more efficient to read SFR than mamory. */
    CONST(CoreIdType, AUTOMATIC) counter_core_id = osEE_get_curr_core_id();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
    1642:	f8 01       	movw	r30, r16
    1644:	22 81       	ldd	r18, Z+2	; 0x02
    1646:	33 81       	ldd	r19, Z+3	; 0x03
    1648:	12 96       	adiw	r26, 0x02	; 2
    164a:	4d 91       	ld	r20, X+
    164c:	5c 91       	ld	r21, X
    164e:	24 17       	cp	r18, r20
    1650:	35 07       	cpc	r19, r21
    1652:	08 f4       	brcc	.+2      	; 0x1656 <osEE_counter_increment+0x30>
    1654:	5f c0       	rjmp	.+190    	; 0x1714 <osEE_counter_increment+0xee>
      counter_value = (p_counter_cb->value = 0U);
    1656:	13 82       	std	Z+3, r1	; 0x03
    1658:	12 82       	std	Z+2, r1	; 0x02
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	20 e0       	ldi	r18, 0x00	; 0
            the counters, whenever the locks are not limited resources for the
            HW and falling back to use core locks only for those architectures
            where this is not true. TBD. */
    osEE_lock_core_id(counter_core_id);

    p_triggered_db = p_counter_cb->trigger_queue;
    165e:	f8 01       	movw	r30, r16
    1660:	c0 81       	ld	r28, Z
    1662:	d1 81       	ldd	r29, Z+1	; 0x01

    if (p_triggered_db != NULL) {
    1664:	20 97       	sbiw	r28, 0x00	; 0
    1666:	09 f4       	brne	.+2      	; 0x166a <osEE_counter_increment+0x44>
    1668:	4a c0       	rjmp	.+148    	; 0x16fe <osEE_counter_increment+0xd8>
      P2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
    166a:	a8 81       	ld	r26, Y
    166c:	b9 81       	ldd	r27, Y+1	; 0x01
    166e:	12 96       	adiw	r26, 0x02	; 2
    1670:	4d 91       	ld	r20, X+
    1672:	5c 91       	ld	r21, X
    1674:	42 17       	cp	r20, r18
    1676:	53 07       	cpc	r21, r19
    1678:	09 f0       	breq	.+2      	; 0x167c <osEE_counter_increment+0x56>
    167a:	41 c0       	rjmp	.+130    	; 0x16fe <osEE_counter_increment+0xd8>
    167c:	de 01       	movw	r26, r28
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
    167e:	2d 91       	ld	r18, X+
    1680:	3c 91       	ld	r19, X
    1682:	f9 01       	movw	r30, r18
    1684:	a0 81       	ld	r26, Z
    1686:	b1 81       	ldd	r27, Z+1	; 0x01
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
    1688:	10 97       	sbiw	r26, 0x00	; 0
    168a:	49 f0       	breq	.+18     	; 0x169e <osEE_counter_increment+0x78>
    168c:	6d 91       	ld	r22, X+
    168e:	7c 91       	ld	r23, X
    1690:	11 97       	sbiw	r26, 0x01	; 1

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
        } while ((p_current != NULL) &&
    1692:	fb 01       	movw	r30, r22
    1694:	62 81       	ldd	r22, Z+2	; 0x02
    1696:	73 81       	ldd	r23, Z+3	; 0x03
    1698:	46 17       	cp	r20, r22
    169a:	57 07       	cpc	r21, r23
    169c:	81 f3       	breq	.-32     	; 0x167e <osEE_counter_increment+0x58>
    169e:	7c 01       	movw	r14, r24
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
    16a0:	f9 01       	movw	r30, r18
    16a2:	11 82       	std	Z+1, r1	; 0x01
    16a4:	10 82       	st	Z, r1
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
    16a6:	f8 01       	movw	r30, r16
    16a8:	b1 83       	std	Z+1, r27	; 0x01
    16aa:	a0 83       	st	Z, r26
            p_trigger_to_be_handled = p_triggered_db;

          /* Prepare next trigger to be handled here, before actually handle the
           * current one, otherwise cycling triggers will mess with the list of
           * triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
    16ac:	08 81       	ld	r16, Y
    16ae:	19 81       	ldd	r17, Y+1	; 0x01
    16b0:	d8 01       	movw	r26, r16
    16b2:	ac 90       	ld	r10, X
    16b4:	11 96       	adiw	r26, 0x01	; 1
    16b6:	bc 90       	ld	r11, X
    16b8:	11 97       	sbiw	r26, 0x01	; 1
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
  CONST(TickType, AUTOMATIC)
    cycle = p_trigger_cb->cycle;
    16ba:	16 96       	adiw	r26, 0x06	; 6
    16bc:	cd 90       	ld	r12, X+
    16be:	dc 90       	ld	r13, X
(
  P2CONST(OsEE_action, AUTOMATIC, OS_APPL_DATA) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev;
  switch (p_action->type) {
    16c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    16c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	51 f1       	breq	.+84     	; 0x171e <osEE_counter_increment+0xf8>
    16ca:	23 30       	cpi	r18, 0x03	; 3
    16cc:	31 05       	cpc	r19, r1
    16ce:	61 f1       	breq	.+88     	; 0x1728 <osEE_counter_increment+0x102>
    16d0:	23 2b       	or	r18, r19
    16d2:	51 f4       	brne	.+20     	; 0x16e8 <osEE_counter_increment+0xc2>
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;

      ev = osEE_scheduler_task_activated(
    16d4:	4e 81       	ldd	r20, Y+6	; 0x06
    16d6:	5f 81       	ldd	r21, Y+7	; 0x07
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	68 e6       	ldi	r22, 0x68	; 104
    16de:	71 e0       	ldi	r23, 0x01	; 1
    16e0:	86 e5       	ldi	r24, 0x56	; 86
    16e2:	91 e0       	ldi	r25, 0x01	; 1
    16e4:	0e 94 de 08 	call	0x11bc	; 0x11bc <osEE_scheduler_task_activated>
    cycle = p_trigger_cb->cycle;

  ev = osEE_handle_action(&p_alarm_db->action);

  /* TODO: Add active check to let call CancelAlarm from callback... */
  if (cycle > 0U) {
    16e8:	c1 14       	cp	r12, r1
    16ea:	d1 04       	cpc	r13, r1
    16ec:	09 f1       	breq	.+66     	; 0x1730 <osEE_counter_increment+0x10a>
    osEE_counter_insert_rel_trigger(
    16ee:	a6 01       	movw	r20, r12
    16f0:	be 01       	movw	r22, r28
    16f2:	c7 01       	movw	r24, r14
    16f4:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <osEE_counter_insert_rel_trigger>
    16f8:	e5 01       	movw	r28, r10
            osEE_end_primitive(flags);
          }
#else
          (void)ev; /* TODO: Handle ErrorHook */
#endif /* OSEE_HAS_ERRORHOOK */
        } while (p_triggered_db != NULL);
    16fa:	20 97       	sbiw	r28, 0x00	; 0
    16fc:	b9 f6       	brne	.-82     	; 0x16ac <osEE_counter_increment+0x86>
    }
    /* XXX: Unlock the core only at the End of The Service, to not incur in
            races when handling cycling triggers. */
    osEE_unlock_core_id(counter_core_id);
  }
}
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	df 90       	pop	r13
    170c:	cf 90       	pop	r12
    170e:	bf 90       	pop	r11
    1710:	af 90       	pop	r10
    1712:	08 95       	ret
    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value = (p_counter_cb->value = 0U);
    } else {
      counter_value = ++p_counter_cb->value;
    1714:	2f 5f       	subi	r18, 0xFF	; 255
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	33 83       	std	Z+3, r19	; 0x03
    171a:	22 83       	std	Z+2, r18	; 0x02
    171c:	a0 cf       	rjmp	.-192    	; 0x165e <osEE_counter_increment+0x38>
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
      osEE_counter_increment(p_action->param.p_counter_db);
    171e:	88 85       	ldd	r24, Y+8	; 0x08
    1720:	99 85       	ldd	r25, Y+9	; 0x09
    1722:	0e 94 13 0b 	call	0x1626	; 0x1626 <osEE_counter_increment>
    1726:	e0 cf       	rjmp	.-64     	; 0x16e8 <osEE_counter_increment+0xc2>
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
    1728:	ec 81       	ldd	r30, Y+4	; 0x04
    172a:	fd 81       	ldd	r31, Y+5	; 0x05
    172c:	09 95       	icall
    172e:	dc cf       	rjmp	.-72     	; 0x16e8 <osEE_counter_increment+0xc2>
  if (cycle > 0U) {
    osEE_counter_insert_rel_trigger(
      p_counter_db, p_trigger_db, cycle
    );
  } else {
    p_trigger_cb->active = OSEE_FALSE;
    1730:	f8 01       	movw	r30, r16
    1732:	15 82       	std	Z+5, r1	; 0x05
    1734:	14 82       	std	Z+4, r1	; 0x04
    1736:	e0 cf       	rjmp	.-64     	; 0x16f8 <osEE_counter_increment+0xd2>

00001738 <OsEE_atmega_startTimer1>:
 * - x < TIMER_1_PRESCALER_1024_MAX_TICKS = 4194304:	64     us
 */
void OsEE_atmega_startTimer1(uint32_t microsecondsInterval) {
  uint8_t	timer1Prescaler;
  uint16_t	timer1CompareValue;
  TCCR1B = 0;	/* Pause Timer. */
    1738:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  TCCR1A = 0;
    173c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  TCCR1C = 0;
    1740:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
  TCNT1  = 0;
    1744:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1748:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
   * 0 1 1 clkIO/64 (From prescaler)
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    174c:	61 15       	cp	r22, r1
    174e:	20 e1       	ldi	r18, 0x10	; 16
    1750:	72 07       	cpc	r23, r18
    1752:	81 05       	cpc	r24, r1
    1754:	91 05       	cpc	r25, r1
    1756:	a0 f4       	brcc	.+40     	; 0x1780 <OsEE_atmega_startTimer1+0x48>
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
    1758:	e4 e0       	ldi	r30, 0x04	; 4
    175a:	66 0f       	add	r22, r22
    175c:	77 1f       	adc	r23, r23
    175e:	ea 95       	dec	r30
    1760:	e1 f7       	brne	.-8      	; 0x175a <OsEE_atmega_startTimer1+0x22>
    1762:	61 50       	subi	r22, 0x01	; 1
    1764:	71 09       	sbc	r23, r1
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    1766:	81 e0       	ldi	r24, 0x01	; 1
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
  }
#else
  #error("Unsupported CPU frequency")
#endif
  TIFR1  = (1 << OCIE1A);	/* Clear Output Compare A Match Flag. */
    1768:	92 e0       	ldi	r25, 0x02	; 2
    176a:	96 bb       	out	0x16, r25	; 22
  TIMSK1 = (1 << OCIE1A);	/* Output Compare A Match Interrupt Enable */
    176c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  OCR1A  = timer1CompareValue;	/* Set Compare A Match Value */
    1770:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1774:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  TCCR1B = (1 << WGM12) | timer1Prescaler;	/* Set CTC Mode and Prescaler. */
    1778:	88 60       	ori	r24, 0x08	; 8
    177a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
}	/* startTimer1() */
    177e:	08 95       	ret
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    1780:	61 15       	cp	r22, r1
    1782:	20 e8       	ldi	r18, 0x80	; 128
    1784:	72 07       	cpc	r23, r18
    1786:	81 05       	cpc	r24, r1
    1788:	91 05       	cpc	r25, r1
    178a:	30 f4       	brcc	.+12     	; 0x1798 <OsEE_atmega_startTimer1+0x60>
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
    178c:	66 0f       	add	r22, r22
    178e:	77 1f       	adc	r23, r23
    1790:	61 50       	subi	r22, 0x01	; 1
    1792:	71 09       	sbc	r23, r1
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	e8 cf       	rjmp	.-48     	; 0x1768 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    1798:	6c 3f       	cpi	r22, 0xFC	; 252
    179a:	2f ef       	ldi	r18, 0xFF	; 255
    179c:	72 07       	cpc	r23, r18
    179e:	23 e0       	ldi	r18, 0x03	; 3
    17a0:	82 07       	cpc	r24, r18
    17a2:	91 05       	cpc	r25, r1
    17a4:	58 f4       	brcc	.+22     	; 0x17bc <OsEE_atmega_startTimer1+0x84>
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
    17a6:	42 e0       	ldi	r20, 0x02	; 2
    17a8:	96 95       	lsr	r25
    17aa:	87 95       	ror	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	4a 95       	dec	r20
    17b2:	d1 f7       	brne	.-12     	; 0x17a8 <OsEE_atmega_startTimer1+0x70>
    17b4:	61 50       	subi	r22, 0x01	; 1
    17b6:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	d6 cf       	rjmp	.-84     	; 0x1768 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    17bc:	61 15       	cp	r22, r1
    17be:	71 05       	cpc	r23, r1
    17c0:	20 e1       	ldi	r18, 0x10	; 16
    17c2:	82 07       	cpc	r24, r18
    17c4:	91 05       	cpc	r25, r1
    17c6:	58 f4       	brcc	.+22     	; 0x17de <OsEE_atmega_startTimer1+0xa6>
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
    17c8:	34 e0       	ldi	r19, 0x04	; 4
    17ca:	96 95       	lsr	r25
    17cc:	87 95       	ror	r24
    17ce:	77 95       	ror	r23
    17d0:	67 95       	ror	r22
    17d2:	3a 95       	dec	r19
    17d4:	d1 f7       	brne	.-12     	; 0x17ca <OsEE_atmega_startTimer1+0x92>
    17d6:	61 50       	subi	r22, 0x01	; 1
    17d8:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    17da:	84 e0       	ldi	r24, 0x04	; 4
    17dc:	c5 cf       	rjmp	.-118    	; 0x1768 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
    17de:	26 e0       	ldi	r18, 0x06	; 6
    17e0:	96 95       	lsr	r25
    17e2:	87 95       	ror	r24
    17e4:	77 95       	ror	r23
    17e6:	67 95       	ror	r22
    17e8:	2a 95       	dec	r18
    17ea:	d1 f7       	brne	.-12     	; 0x17e0 <OsEE_atmega_startTimer1+0xa8>
    17ec:	61 50       	subi	r22, 0x01	; 1
    17ee:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    17f0:	85 e0       	ldi	r24, 0x05	; 5
    17f2:	ba cf       	rjmp	.-140    	; 0x1768 <OsEE_atmega_startTimer1+0x30>

000017f4 <__subsf3>:
    17f4:	50 58       	subi	r21, 0x80	; 128

000017f6 <__addsf3>:
    17f6:	bb 27       	eor	r27, r27
    17f8:	aa 27       	eor	r26, r26
    17fa:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3x>
    17fe:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__fp_round>
    1802:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fp_pscA>
    1806:	38 f0       	brcs	.+14     	; 0x1816 <__addsf3+0x20>
    1808:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__fp_pscB>
    180c:	20 f0       	brcs	.+8      	; 0x1816 <__addsf3+0x20>
    180e:	39 f4       	brne	.+14     	; 0x181e <__addsf3+0x28>
    1810:	9f 3f       	cpi	r25, 0xFF	; 255
    1812:	19 f4       	brne	.+6      	; 0x181a <__addsf3+0x24>
    1814:	26 f4       	brtc	.+8      	; 0x181e <__addsf3+0x28>
    1816:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_nan>
    181a:	0e f4       	brtc	.+2      	; 0x181e <__addsf3+0x28>
    181c:	e0 95       	com	r30
    181e:	e7 fb       	bst	r30, 7
    1820:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_inf>

00001824 <__addsf3x>:
    1824:	e9 2f       	mov	r30, r25
    1826:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fp_split3>
    182a:	58 f3       	brcs	.-42     	; 0x1802 <__addsf3+0xc>
    182c:	ba 17       	cp	r27, r26
    182e:	62 07       	cpc	r22, r18
    1830:	73 07       	cpc	r23, r19
    1832:	84 07       	cpc	r24, r20
    1834:	95 07       	cpc	r25, r21
    1836:	20 f0       	brcs	.+8      	; 0x1840 <__addsf3x+0x1c>
    1838:	79 f4       	brne	.+30     	; 0x1858 <__addsf3x+0x34>
    183a:	a6 f5       	brtc	.+104    	; 0x18a4 <__addsf3x+0x80>
    183c:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__fp_zero>
    1840:	0e f4       	brtc	.+2      	; 0x1844 <__addsf3x+0x20>
    1842:	e0 95       	com	r30
    1844:	0b 2e       	mov	r0, r27
    1846:	ba 2f       	mov	r27, r26
    1848:	a0 2d       	mov	r26, r0
    184a:	0b 01       	movw	r0, r22
    184c:	b9 01       	movw	r22, r18
    184e:	90 01       	movw	r18, r0
    1850:	0c 01       	movw	r0, r24
    1852:	ca 01       	movw	r24, r20
    1854:	a0 01       	movw	r20, r0
    1856:	11 24       	eor	r1, r1
    1858:	ff 27       	eor	r31, r31
    185a:	59 1b       	sub	r21, r25
    185c:	99 f0       	breq	.+38     	; 0x1884 <__addsf3x+0x60>
    185e:	59 3f       	cpi	r21, 0xF9	; 249
    1860:	50 f4       	brcc	.+20     	; 0x1876 <__addsf3x+0x52>
    1862:	50 3e       	cpi	r21, 0xE0	; 224
    1864:	68 f1       	brcs	.+90     	; 0x18c0 <__addsf3x+0x9c>
    1866:	1a 16       	cp	r1, r26
    1868:	f0 40       	sbci	r31, 0x00	; 0
    186a:	a2 2f       	mov	r26, r18
    186c:	23 2f       	mov	r18, r19
    186e:	34 2f       	mov	r19, r20
    1870:	44 27       	eor	r20, r20
    1872:	58 5f       	subi	r21, 0xF8	; 248
    1874:	f3 cf       	rjmp	.-26     	; 0x185c <__addsf3x+0x38>
    1876:	46 95       	lsr	r20
    1878:	37 95       	ror	r19
    187a:	27 95       	ror	r18
    187c:	a7 95       	ror	r26
    187e:	f0 40       	sbci	r31, 0x00	; 0
    1880:	53 95       	inc	r21
    1882:	c9 f7       	brne	.-14     	; 0x1876 <__addsf3x+0x52>
    1884:	7e f4       	brtc	.+30     	; 0x18a4 <__addsf3x+0x80>
    1886:	1f 16       	cp	r1, r31
    1888:	ba 0b       	sbc	r27, r26
    188a:	62 0b       	sbc	r22, r18
    188c:	73 0b       	sbc	r23, r19
    188e:	84 0b       	sbc	r24, r20
    1890:	ba f0       	brmi	.+46     	; 0x18c0 <__addsf3x+0x9c>
    1892:	91 50       	subi	r25, 0x01	; 1
    1894:	a1 f0       	breq	.+40     	; 0x18be <__addsf3x+0x9a>
    1896:	ff 0f       	add	r31, r31
    1898:	bb 1f       	adc	r27, r27
    189a:	66 1f       	adc	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	88 1f       	adc	r24, r24
    18a0:	c2 f7       	brpl	.-16     	; 0x1892 <__addsf3x+0x6e>
    18a2:	0e c0       	rjmp	.+28     	; 0x18c0 <__addsf3x+0x9c>
    18a4:	ba 0f       	add	r27, r26
    18a6:	62 1f       	adc	r22, r18
    18a8:	73 1f       	adc	r23, r19
    18aa:	84 1f       	adc	r24, r20
    18ac:	48 f4       	brcc	.+18     	; 0x18c0 <__addsf3x+0x9c>
    18ae:	87 95       	ror	r24
    18b0:	77 95       	ror	r23
    18b2:	67 95       	ror	r22
    18b4:	b7 95       	ror	r27
    18b6:	f7 95       	ror	r31
    18b8:	9e 3f       	cpi	r25, 0xFE	; 254
    18ba:	08 f0       	brcs	.+2      	; 0x18be <__addsf3x+0x9a>
    18bc:	b0 cf       	rjmp	.-160    	; 0x181e <__addsf3+0x28>
    18be:	93 95       	inc	r25
    18c0:	88 0f       	add	r24, r24
    18c2:	08 f0       	brcs	.+2      	; 0x18c6 <__addsf3x+0xa2>
    18c4:	99 27       	eor	r25, r25
    18c6:	ee 0f       	add	r30, r30
    18c8:	97 95       	ror	r25
    18ca:	87 95       	ror	r24
    18cc:	08 95       	ret

000018ce <__cmpsf2>:
    18ce:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fp_cmp>
    18d2:	08 f4       	brcc	.+2      	; 0x18d6 <__cmpsf2+0x8>
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	08 95       	ret

000018d8 <__divsf3>:
    18d8:	0e 94 80 0c 	call	0x1900	; 0x1900 <__divsf3x>
    18dc:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__fp_round>
    18e0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__fp_pscB>
    18e4:	58 f0       	brcs	.+22     	; 0x18fc <__divsf3+0x24>
    18e6:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fp_pscA>
    18ea:	40 f0       	brcs	.+16     	; 0x18fc <__divsf3+0x24>
    18ec:	29 f4       	brne	.+10     	; 0x18f8 <__divsf3+0x20>
    18ee:	5f 3f       	cpi	r21, 0xFF	; 255
    18f0:	29 f0       	breq	.+10     	; 0x18fc <__divsf3+0x24>
    18f2:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_inf>
    18f6:	51 11       	cpse	r21, r1
    18f8:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__fp_szero>
    18fc:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_nan>

00001900 <__divsf3x>:
    1900:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fp_split3>
    1904:	68 f3       	brcs	.-38     	; 0x18e0 <__divsf3+0x8>

00001906 <__divsf3_pse>:
    1906:	99 23       	and	r25, r25
    1908:	b1 f3       	breq	.-20     	; 0x18f6 <__divsf3+0x1e>
    190a:	55 23       	and	r21, r21
    190c:	91 f3       	breq	.-28     	; 0x18f2 <__divsf3+0x1a>
    190e:	95 1b       	sub	r25, r21
    1910:	55 0b       	sbc	r21, r21
    1912:	bb 27       	eor	r27, r27
    1914:	aa 27       	eor	r26, r26
    1916:	62 17       	cp	r22, r18
    1918:	73 07       	cpc	r23, r19
    191a:	84 07       	cpc	r24, r20
    191c:	38 f0       	brcs	.+14     	; 0x192c <__divsf3_pse+0x26>
    191e:	9f 5f       	subi	r25, 0xFF	; 255
    1920:	5f 4f       	sbci	r21, 0xFF	; 255
    1922:	22 0f       	add	r18, r18
    1924:	33 1f       	adc	r19, r19
    1926:	44 1f       	adc	r20, r20
    1928:	aa 1f       	adc	r26, r26
    192a:	a9 f3       	breq	.-22     	; 0x1916 <__divsf3_pse+0x10>
    192c:	35 d0       	rcall	.+106    	; 0x1998 <__divsf3_pse+0x92>
    192e:	0e 2e       	mov	r0, r30
    1930:	3a f0       	brmi	.+14     	; 0x1940 <__divsf3_pse+0x3a>
    1932:	e0 e8       	ldi	r30, 0x80	; 128
    1934:	32 d0       	rcall	.+100    	; 0x199a <__divsf3_pse+0x94>
    1936:	91 50       	subi	r25, 0x01	; 1
    1938:	50 40       	sbci	r21, 0x00	; 0
    193a:	e6 95       	lsr	r30
    193c:	00 1c       	adc	r0, r0
    193e:	ca f7       	brpl	.-14     	; 0x1932 <__divsf3_pse+0x2c>
    1940:	2b d0       	rcall	.+86     	; 0x1998 <__divsf3_pse+0x92>
    1942:	fe 2f       	mov	r31, r30
    1944:	29 d0       	rcall	.+82     	; 0x1998 <__divsf3_pse+0x92>
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	88 1f       	adc	r24, r24
    194c:	bb 1f       	adc	r27, r27
    194e:	26 17       	cp	r18, r22
    1950:	37 07       	cpc	r19, r23
    1952:	48 07       	cpc	r20, r24
    1954:	ab 07       	cpc	r26, r27
    1956:	b0 e8       	ldi	r27, 0x80	; 128
    1958:	09 f0       	breq	.+2      	; 0x195c <__divsf3_pse+0x56>
    195a:	bb 0b       	sbc	r27, r27
    195c:	80 2d       	mov	r24, r0
    195e:	bf 01       	movw	r22, r30
    1960:	ff 27       	eor	r31, r31
    1962:	93 58       	subi	r25, 0x83	; 131
    1964:	5f 4f       	sbci	r21, 0xFF	; 255
    1966:	3a f0       	brmi	.+14     	; 0x1976 <__divsf3_pse+0x70>
    1968:	9e 3f       	cpi	r25, 0xFE	; 254
    196a:	51 05       	cpc	r21, r1
    196c:	78 f0       	brcs	.+30     	; 0x198c <__divsf3_pse+0x86>
    196e:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_inf>
    1972:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__fp_szero>
    1976:	5f 3f       	cpi	r21, 0xFF	; 255
    1978:	e4 f3       	brlt	.-8      	; 0x1972 <__divsf3_pse+0x6c>
    197a:	98 3e       	cpi	r25, 0xE8	; 232
    197c:	d4 f3       	brlt	.-12     	; 0x1972 <__divsf3_pse+0x6c>
    197e:	86 95       	lsr	r24
    1980:	77 95       	ror	r23
    1982:	67 95       	ror	r22
    1984:	b7 95       	ror	r27
    1986:	f7 95       	ror	r31
    1988:	9f 5f       	subi	r25, 0xFF	; 255
    198a:	c9 f7       	brne	.-14     	; 0x197e <__divsf3_pse+0x78>
    198c:	88 0f       	add	r24, r24
    198e:	91 1d       	adc	r25, r1
    1990:	96 95       	lsr	r25
    1992:	87 95       	ror	r24
    1994:	97 f9       	bld	r25, 7
    1996:	08 95       	ret
    1998:	e1 e0       	ldi	r30, 0x01	; 1
    199a:	66 0f       	add	r22, r22
    199c:	77 1f       	adc	r23, r23
    199e:	88 1f       	adc	r24, r24
    19a0:	bb 1f       	adc	r27, r27
    19a2:	62 17       	cp	r22, r18
    19a4:	73 07       	cpc	r23, r19
    19a6:	84 07       	cpc	r24, r20
    19a8:	ba 07       	cpc	r27, r26
    19aa:	20 f0       	brcs	.+8      	; 0x19b4 <__divsf3_pse+0xae>
    19ac:	62 1b       	sub	r22, r18
    19ae:	73 0b       	sbc	r23, r19
    19b0:	84 0b       	sbc	r24, r20
    19b2:	ba 0b       	sbc	r27, r26
    19b4:	ee 1f       	adc	r30, r30
    19b6:	88 f7       	brcc	.-30     	; 0x199a <__divsf3_pse+0x94>
    19b8:	e0 95       	com	r30
    19ba:	08 95       	ret

000019bc <__fixunssfsi>:
    19bc:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__fp_splitA>
    19c0:	88 f0       	brcs	.+34     	; 0x19e4 <__fixunssfsi+0x28>
    19c2:	9f 57       	subi	r25, 0x7F	; 127
    19c4:	98 f0       	brcs	.+38     	; 0x19ec <__fixunssfsi+0x30>
    19c6:	b9 2f       	mov	r27, r25
    19c8:	99 27       	eor	r25, r25
    19ca:	b7 51       	subi	r27, 0x17	; 23
    19cc:	b0 f0       	brcs	.+44     	; 0x19fa <__fixunssfsi+0x3e>
    19ce:	e1 f0       	breq	.+56     	; 0x1a08 <__fixunssfsi+0x4c>
    19d0:	66 0f       	add	r22, r22
    19d2:	77 1f       	adc	r23, r23
    19d4:	88 1f       	adc	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	1a f0       	brmi	.+6      	; 0x19e0 <__fixunssfsi+0x24>
    19da:	ba 95       	dec	r27
    19dc:	c9 f7       	brne	.-14     	; 0x19d0 <__fixunssfsi+0x14>
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <__fixunssfsi+0x4c>
    19e0:	b1 30       	cpi	r27, 0x01	; 1
    19e2:	91 f0       	breq	.+36     	; 0x1a08 <__fixunssfsi+0x4c>
    19e4:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__fp_zero>
    19e8:	b1 e0       	ldi	r27, 0x01	; 1
    19ea:	08 95       	ret
    19ec:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__fp_zero>
    19f0:	67 2f       	mov	r22, r23
    19f2:	78 2f       	mov	r23, r24
    19f4:	88 27       	eor	r24, r24
    19f6:	b8 5f       	subi	r27, 0xF8	; 248
    19f8:	39 f0       	breq	.+14     	; 0x1a08 <__fixunssfsi+0x4c>
    19fa:	b9 3f       	cpi	r27, 0xF9	; 249
    19fc:	cc f3       	brlt	.-14     	; 0x19f0 <__fixunssfsi+0x34>
    19fe:	86 95       	lsr	r24
    1a00:	77 95       	ror	r23
    1a02:	67 95       	ror	r22
    1a04:	b3 95       	inc	r27
    1a06:	d9 f7       	brne	.-10     	; 0x19fe <__fixunssfsi+0x42>
    1a08:	3e f4       	brtc	.+14     	; 0x1a18 <__fixunssfsi+0x5c>
    1a0a:	90 95       	com	r25
    1a0c:	80 95       	com	r24
    1a0e:	70 95       	com	r23
    1a10:	61 95       	neg	r22
    1a12:	7f 4f       	sbci	r23, 0xFF	; 255
    1a14:	8f 4f       	sbci	r24, 0xFF	; 255
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	08 95       	ret

00001a1a <__floatunsisf>:
    1a1a:	e8 94       	clt
    1a1c:	09 c0       	rjmp	.+18     	; 0x1a30 <__floatsisf+0x12>

00001a1e <__floatsisf>:
    1a1e:	97 fb       	bst	r25, 7
    1a20:	3e f4       	brtc	.+14     	; 0x1a30 <__floatsisf+0x12>
    1a22:	90 95       	com	r25
    1a24:	80 95       	com	r24
    1a26:	70 95       	com	r23
    1a28:	61 95       	neg	r22
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	99 23       	and	r25, r25
    1a32:	a9 f0       	breq	.+42     	; 0x1a5e <__floatsisf+0x40>
    1a34:	f9 2f       	mov	r31, r25
    1a36:	96 e9       	ldi	r25, 0x96	; 150
    1a38:	bb 27       	eor	r27, r27
    1a3a:	93 95       	inc	r25
    1a3c:	f6 95       	lsr	r31
    1a3e:	87 95       	ror	r24
    1a40:	77 95       	ror	r23
    1a42:	67 95       	ror	r22
    1a44:	b7 95       	ror	r27
    1a46:	f1 11       	cpse	r31, r1
    1a48:	f8 cf       	rjmp	.-16     	; 0x1a3a <__floatsisf+0x1c>
    1a4a:	fa f4       	brpl	.+62     	; 0x1a8a <__floatsisf+0x6c>
    1a4c:	bb 0f       	add	r27, r27
    1a4e:	11 f4       	brne	.+4      	; 0x1a54 <__floatsisf+0x36>
    1a50:	60 ff       	sbrs	r22, 0
    1a52:	1b c0       	rjmp	.+54     	; 0x1a8a <__floatsisf+0x6c>
    1a54:	6f 5f       	subi	r22, 0xFF	; 255
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	16 c0       	rjmp	.+44     	; 0x1a8a <__floatsisf+0x6c>
    1a5e:	88 23       	and	r24, r24
    1a60:	11 f0       	breq	.+4      	; 0x1a66 <__floatsisf+0x48>
    1a62:	96 e9       	ldi	r25, 0x96	; 150
    1a64:	11 c0       	rjmp	.+34     	; 0x1a88 <__floatsisf+0x6a>
    1a66:	77 23       	and	r23, r23
    1a68:	21 f0       	breq	.+8      	; 0x1a72 <__floatsisf+0x54>
    1a6a:	9e e8       	ldi	r25, 0x8E	; 142
    1a6c:	87 2f       	mov	r24, r23
    1a6e:	76 2f       	mov	r23, r22
    1a70:	05 c0       	rjmp	.+10     	; 0x1a7c <__floatsisf+0x5e>
    1a72:	66 23       	and	r22, r22
    1a74:	71 f0       	breq	.+28     	; 0x1a92 <__floatsisf+0x74>
    1a76:	96 e8       	ldi	r25, 0x86	; 134
    1a78:	86 2f       	mov	r24, r22
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	2a f0       	brmi	.+10     	; 0x1a8a <__floatsisf+0x6c>
    1a80:	9a 95       	dec	r25
    1a82:	66 0f       	add	r22, r22
    1a84:	77 1f       	adc	r23, r23
    1a86:	88 1f       	adc	r24, r24
    1a88:	da f7       	brpl	.-10     	; 0x1a80 <__floatsisf+0x62>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	96 95       	lsr	r25
    1a8e:	87 95       	ror	r24
    1a90:	97 f9       	bld	r25, 7
    1a92:	08 95       	ret

00001a94 <__fp_cmp>:
    1a94:	99 0f       	add	r25, r25
    1a96:	00 08       	sbc	r0, r0
    1a98:	55 0f       	add	r21, r21
    1a9a:	aa 0b       	sbc	r26, r26
    1a9c:	e0 e8       	ldi	r30, 0x80	; 128
    1a9e:	fe ef       	ldi	r31, 0xFE	; 254
    1aa0:	16 16       	cp	r1, r22
    1aa2:	17 06       	cpc	r1, r23
    1aa4:	e8 07       	cpc	r30, r24
    1aa6:	f9 07       	cpc	r31, r25
    1aa8:	c0 f0       	brcs	.+48     	; 0x1ada <__fp_cmp+0x46>
    1aaa:	12 16       	cp	r1, r18
    1aac:	13 06       	cpc	r1, r19
    1aae:	e4 07       	cpc	r30, r20
    1ab0:	f5 07       	cpc	r31, r21
    1ab2:	98 f0       	brcs	.+38     	; 0x1ada <__fp_cmp+0x46>
    1ab4:	62 1b       	sub	r22, r18
    1ab6:	73 0b       	sbc	r23, r19
    1ab8:	84 0b       	sbc	r24, r20
    1aba:	95 0b       	sbc	r25, r21
    1abc:	39 f4       	brne	.+14     	; 0x1acc <__fp_cmp+0x38>
    1abe:	0a 26       	eor	r0, r26
    1ac0:	61 f0       	breq	.+24     	; 0x1ada <__fp_cmp+0x46>
    1ac2:	23 2b       	or	r18, r19
    1ac4:	24 2b       	or	r18, r20
    1ac6:	25 2b       	or	r18, r21
    1ac8:	21 f4       	brne	.+8      	; 0x1ad2 <__fp_cmp+0x3e>
    1aca:	08 95       	ret
    1acc:	0a 26       	eor	r0, r26
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <__fp_cmp+0x3e>
    1ad0:	a1 40       	sbci	r26, 0x01	; 1
    1ad2:	a6 95       	lsr	r26
    1ad4:	8f ef       	ldi	r24, 0xFF	; 255
    1ad6:	81 1d       	adc	r24, r1
    1ad8:	81 1d       	adc	r24, r1
    1ada:	08 95       	ret

00001adc <__fp_inf>:
    1adc:	97 f9       	bld	r25, 7
    1ade:	9f 67       	ori	r25, 0x7F	; 127
    1ae0:	80 e8       	ldi	r24, 0x80	; 128
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	08 95       	ret

00001ae8 <__fp_nan>:
    1ae8:	9f ef       	ldi	r25, 0xFF	; 255
    1aea:	80 ec       	ldi	r24, 0xC0	; 192
    1aec:	08 95       	ret

00001aee <__fp_pscA>:
    1aee:	00 24       	eor	r0, r0
    1af0:	0a 94       	dec	r0
    1af2:	16 16       	cp	r1, r22
    1af4:	17 06       	cpc	r1, r23
    1af6:	18 06       	cpc	r1, r24
    1af8:	09 06       	cpc	r0, r25
    1afa:	08 95       	ret

00001afc <__fp_pscB>:
    1afc:	00 24       	eor	r0, r0
    1afe:	0a 94       	dec	r0
    1b00:	12 16       	cp	r1, r18
    1b02:	13 06       	cpc	r1, r19
    1b04:	14 06       	cpc	r1, r20
    1b06:	05 06       	cpc	r0, r21
    1b08:	08 95       	ret

00001b0a <__fp_round>:
    1b0a:	09 2e       	mov	r0, r25
    1b0c:	03 94       	inc	r0
    1b0e:	00 0c       	add	r0, r0
    1b10:	11 f4       	brne	.+4      	; 0x1b16 <__fp_round+0xc>
    1b12:	88 23       	and	r24, r24
    1b14:	52 f0       	brmi	.+20     	; 0x1b2a <__fp_round+0x20>
    1b16:	bb 0f       	add	r27, r27
    1b18:	40 f4       	brcc	.+16     	; 0x1b2a <__fp_round+0x20>
    1b1a:	bf 2b       	or	r27, r31
    1b1c:	11 f4       	brne	.+4      	; 0x1b22 <__fp_round+0x18>
    1b1e:	60 ff       	sbrs	r22, 0
    1b20:	04 c0       	rjmp	.+8      	; 0x1b2a <__fp_round+0x20>
    1b22:	6f 5f       	subi	r22, 0xFF	; 255
    1b24:	7f 4f       	sbci	r23, 0xFF	; 255
    1b26:	8f 4f       	sbci	r24, 0xFF	; 255
    1b28:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2a:	08 95       	ret

00001b2c <__fp_split3>:
    1b2c:	57 fd       	sbrc	r21, 7
    1b2e:	90 58       	subi	r25, 0x80	; 128
    1b30:	44 0f       	add	r20, r20
    1b32:	55 1f       	adc	r21, r21
    1b34:	59 f0       	breq	.+22     	; 0x1b4c <__fp_splitA+0x10>
    1b36:	5f 3f       	cpi	r21, 0xFF	; 255
    1b38:	71 f0       	breq	.+28     	; 0x1b56 <__fp_splitA+0x1a>
    1b3a:	47 95       	ror	r20

00001b3c <__fp_splitA>:
    1b3c:	88 0f       	add	r24, r24
    1b3e:	97 fb       	bst	r25, 7
    1b40:	99 1f       	adc	r25, r25
    1b42:	61 f0       	breq	.+24     	; 0x1b5c <__fp_splitA+0x20>
    1b44:	9f 3f       	cpi	r25, 0xFF	; 255
    1b46:	79 f0       	breq	.+30     	; 0x1b66 <__fp_splitA+0x2a>
    1b48:	87 95       	ror	r24
    1b4a:	08 95       	ret
    1b4c:	12 16       	cp	r1, r18
    1b4e:	13 06       	cpc	r1, r19
    1b50:	14 06       	cpc	r1, r20
    1b52:	55 1f       	adc	r21, r21
    1b54:	f2 cf       	rjmp	.-28     	; 0x1b3a <__fp_split3+0xe>
    1b56:	46 95       	lsr	r20
    1b58:	f1 df       	rcall	.-30     	; 0x1b3c <__fp_splitA>
    1b5a:	08 c0       	rjmp	.+16     	; 0x1b6c <__fp_splitA+0x30>
    1b5c:	16 16       	cp	r1, r22
    1b5e:	17 06       	cpc	r1, r23
    1b60:	18 06       	cpc	r1, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	f1 cf       	rjmp	.-30     	; 0x1b48 <__fp_splitA+0xc>
    1b66:	86 95       	lsr	r24
    1b68:	71 05       	cpc	r23, r1
    1b6a:	61 05       	cpc	r22, r1
    1b6c:	08 94       	sec
    1b6e:	08 95       	ret

00001b70 <__fp_zero>:
    1b70:	e8 94       	clt

00001b72 <__fp_szero>:
    1b72:	bb 27       	eor	r27, r27
    1b74:	66 27       	eor	r22, r22
    1b76:	77 27       	eor	r23, r23
    1b78:	cb 01       	movw	r24, r22
    1b7a:	97 f9       	bld	r25, 7
    1b7c:	08 95       	ret

00001b7e <__gesf2>:
    1b7e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fp_cmp>
    1b82:	08 f4       	brcc	.+2      	; 0x1b86 <__gesf2+0x8>
    1b84:	8f ef       	ldi	r24, 0xFF	; 255
    1b86:	08 95       	ret

00001b88 <__mulsf3>:
    1b88:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3x>
    1b8c:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__fp_round>
    1b90:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__fp_pscA>
    1b94:	38 f0       	brcs	.+14     	; 0x1ba4 <__mulsf3+0x1c>
    1b96:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__fp_pscB>
    1b9a:	20 f0       	brcs	.+8      	; 0x1ba4 <__mulsf3+0x1c>
    1b9c:	95 23       	and	r25, r21
    1b9e:	11 f0       	breq	.+4      	; 0x1ba4 <__mulsf3+0x1c>
    1ba0:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_inf>
    1ba4:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_nan>
    1ba8:	11 24       	eor	r1, r1
    1baa:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__fp_szero>

00001bae <__mulsf3x>:
    1bae:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__fp_split3>
    1bb2:	70 f3       	brcs	.-36     	; 0x1b90 <__mulsf3+0x8>

00001bb4 <__mulsf3_pse>:
    1bb4:	95 9f       	mul	r25, r21
    1bb6:	c1 f3       	breq	.-16     	; 0x1ba8 <__mulsf3+0x20>
    1bb8:	95 0f       	add	r25, r21
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	55 1f       	adc	r21, r21
    1bbe:	62 9f       	mul	r22, r18
    1bc0:	f0 01       	movw	r30, r0
    1bc2:	72 9f       	mul	r23, r18
    1bc4:	bb 27       	eor	r27, r27
    1bc6:	f0 0d       	add	r31, r0
    1bc8:	b1 1d       	adc	r27, r1
    1bca:	63 9f       	mul	r22, r19
    1bcc:	aa 27       	eor	r26, r26
    1bce:	f0 0d       	add	r31, r0
    1bd0:	b1 1d       	adc	r27, r1
    1bd2:	aa 1f       	adc	r26, r26
    1bd4:	64 9f       	mul	r22, r20
    1bd6:	66 27       	eor	r22, r22
    1bd8:	b0 0d       	add	r27, r0
    1bda:	a1 1d       	adc	r26, r1
    1bdc:	66 1f       	adc	r22, r22
    1bde:	82 9f       	mul	r24, r18
    1be0:	22 27       	eor	r18, r18
    1be2:	b0 0d       	add	r27, r0
    1be4:	a1 1d       	adc	r26, r1
    1be6:	62 1f       	adc	r22, r18
    1be8:	73 9f       	mul	r23, r19
    1bea:	b0 0d       	add	r27, r0
    1bec:	a1 1d       	adc	r26, r1
    1bee:	62 1f       	adc	r22, r18
    1bf0:	83 9f       	mul	r24, r19
    1bf2:	a0 0d       	add	r26, r0
    1bf4:	61 1d       	adc	r22, r1
    1bf6:	22 1f       	adc	r18, r18
    1bf8:	74 9f       	mul	r23, r20
    1bfa:	33 27       	eor	r19, r19
    1bfc:	a0 0d       	add	r26, r0
    1bfe:	61 1d       	adc	r22, r1
    1c00:	23 1f       	adc	r18, r19
    1c02:	84 9f       	mul	r24, r20
    1c04:	60 0d       	add	r22, r0
    1c06:	21 1d       	adc	r18, r1
    1c08:	82 2f       	mov	r24, r18
    1c0a:	76 2f       	mov	r23, r22
    1c0c:	6a 2f       	mov	r22, r26
    1c0e:	11 24       	eor	r1, r1
    1c10:	9f 57       	subi	r25, 0x7F	; 127
    1c12:	50 40       	sbci	r21, 0x00	; 0
    1c14:	9a f0       	brmi	.+38     	; 0x1c3c <__mulsf3_pse+0x88>
    1c16:	f1 f0       	breq	.+60     	; 0x1c54 <__mulsf3_pse+0xa0>
    1c18:	88 23       	and	r24, r24
    1c1a:	4a f0       	brmi	.+18     	; 0x1c2e <__mulsf3_pse+0x7a>
    1c1c:	ee 0f       	add	r30, r30
    1c1e:	ff 1f       	adc	r31, r31
    1c20:	bb 1f       	adc	r27, r27
    1c22:	66 1f       	adc	r22, r22
    1c24:	77 1f       	adc	r23, r23
    1c26:	88 1f       	adc	r24, r24
    1c28:	91 50       	subi	r25, 0x01	; 1
    1c2a:	50 40       	sbci	r21, 0x00	; 0
    1c2c:	a9 f7       	brne	.-22     	; 0x1c18 <__mulsf3_pse+0x64>
    1c2e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c30:	51 05       	cpc	r21, r1
    1c32:	80 f0       	brcs	.+32     	; 0x1c54 <__mulsf3_pse+0xa0>
    1c34:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_inf>
    1c38:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__fp_szero>
    1c3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c3e:	e4 f3       	brlt	.-8      	; 0x1c38 <__mulsf3_pse+0x84>
    1c40:	98 3e       	cpi	r25, 0xE8	; 232
    1c42:	d4 f3       	brlt	.-12     	; 0x1c38 <__mulsf3_pse+0x84>
    1c44:	86 95       	lsr	r24
    1c46:	77 95       	ror	r23
    1c48:	67 95       	ror	r22
    1c4a:	b7 95       	ror	r27
    1c4c:	f7 95       	ror	r31
    1c4e:	e7 95       	ror	r30
    1c50:	9f 5f       	subi	r25, 0xFF	; 255
    1c52:	c1 f7       	brne	.-16     	; 0x1c44 <__mulsf3_pse+0x90>
    1c54:	fe 2b       	or	r31, r30
    1c56:	88 0f       	add	r24, r24
    1c58:	91 1d       	adc	r25, r1
    1c5a:	96 95       	lsr	r25
    1c5c:	87 95       	ror	r24
    1c5e:	97 f9       	bld	r25, 7
    1c60:	08 95       	ret

00001c62 <pow>:
    1c62:	fa 01       	movw	r30, r20
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	30 96       	adiw	r30, 0x00	; 0
    1c6a:	21 05       	cpc	r18, r1
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	a1 f1       	breq	.+104    	; 0x1cd8 <pow+0x76>
    1c70:	61 15       	cp	r22, r1
    1c72:	71 05       	cpc	r23, r1
    1c74:	61 f4       	brne	.+24     	; 0x1c8e <pow+0x2c>
    1c76:	80 38       	cpi	r24, 0x80	; 128
    1c78:	bf e3       	ldi	r27, 0x3F	; 63
    1c7a:	9b 07       	cpc	r25, r27
    1c7c:	49 f1       	breq	.+82     	; 0x1cd0 <pow+0x6e>
    1c7e:	68 94       	set
    1c80:	90 38       	cpi	r25, 0x80	; 128
    1c82:	81 05       	cpc	r24, r1
    1c84:	61 f0       	breq	.+24     	; 0x1c9e <pow+0x3c>
    1c86:	80 38       	cpi	r24, 0x80	; 128
    1c88:	bf ef       	ldi	r27, 0xFF	; 255
    1c8a:	9b 07       	cpc	r25, r27
    1c8c:	41 f0       	breq	.+16     	; 0x1c9e <pow+0x3c>
    1c8e:	99 23       	and	r25, r25
    1c90:	4a f5       	brpl	.+82     	; 0x1ce4 <pow+0x82>
    1c92:	ff 3f       	cpi	r31, 0xFF	; 255
    1c94:	e1 05       	cpc	r30, r1
    1c96:	31 05       	cpc	r19, r1
    1c98:	21 05       	cpc	r18, r1
    1c9a:	19 f1       	breq	.+70     	; 0x1ce2 <pow+0x80>
    1c9c:	e8 94       	clt
    1c9e:	08 94       	sec
    1ca0:	e7 95       	ror	r30
    1ca2:	d9 01       	movw	r26, r18
    1ca4:	aa 23       	and	r26, r26
    1ca6:	29 f4       	brne	.+10     	; 0x1cb2 <pow+0x50>
    1ca8:	ab 2f       	mov	r26, r27
    1caa:	be 2f       	mov	r27, r30
    1cac:	f8 5f       	subi	r31, 0xF8	; 248
    1cae:	d0 f3       	brcs	.-12     	; 0x1ca4 <pow+0x42>
    1cb0:	10 c0       	rjmp	.+32     	; 0x1cd2 <pow+0x70>
    1cb2:	ff 5f       	subi	r31, 0xFF	; 255
    1cb4:	70 f4       	brcc	.+28     	; 0x1cd2 <pow+0x70>
    1cb6:	a6 95       	lsr	r26
    1cb8:	e0 f7       	brcc	.-8      	; 0x1cb2 <pow+0x50>
    1cba:	f7 39       	cpi	r31, 0x97	; 151
    1cbc:	50 f0       	brcs	.+20     	; 0x1cd2 <pow+0x70>
    1cbe:	19 f0       	breq	.+6      	; 0x1cc6 <pow+0x64>
    1cc0:	ff 3a       	cpi	r31, 0xAF	; 175
    1cc2:	38 f4       	brcc	.+14     	; 0x1cd2 <pow+0x70>
    1cc4:	9f 77       	andi	r25, 0x7F	; 127
    1cc6:	9f 93       	push	r25
    1cc8:	0d d0       	rcall	.+26     	; 0x1ce4 <pow+0x82>
    1cca:	0f 90       	pop	r0
    1ccc:	07 fc       	sbrc	r0, 7
    1cce:	90 58       	subi	r25, 0x80	; 128
    1cd0:	08 95       	ret
    1cd2:	46 f0       	brts	.+16     	; 0x1ce4 <pow+0x82>
    1cd4:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_nan>
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	80 e8       	ldi	r24, 0x80	; 128
    1cde:	9f e3       	ldi	r25, 0x3F	; 63
    1ce0:	08 95       	ret
    1ce2:	4f e7       	ldi	r20, 0x7F	; 127
    1ce4:	9f 77       	andi	r25, 0x7F	; 127
    1ce6:	5f 93       	push	r21
    1ce8:	4f 93       	push	r20
    1cea:	3f 93       	push	r19
    1cec:	2f 93       	push	r18
    1cee:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <log>
    1cf2:	2f 91       	pop	r18
    1cf4:	3f 91       	pop	r19
    1cf6:	4f 91       	pop	r20
    1cf8:	5f 91       	pop	r21
    1cfa:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__mulsf3>
    1cfe:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <exp>

00001d02 <__unordsf2>:
    1d02:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__fp_cmp>
    1d06:	88 0b       	sbc	r24, r24
    1d08:	99 0b       	sbc	r25, r25
    1d0a:	08 95       	ret
    1d0c:	29 f4       	brne	.+10     	; 0x1d18 <__unordsf2+0x16>
    1d0e:	16 f0       	brts	.+4      	; 0x1d14 <__unordsf2+0x12>
    1d10:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_inf>
    1d14:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__fp_zero>
    1d18:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_nan>

00001d1c <exp>:
    1d1c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__fp_splitA>
    1d20:	a8 f3       	brcs	.-22     	; 0x1d0c <__unordsf2+0xa>
    1d22:	96 38       	cpi	r25, 0x86	; 134
    1d24:	a0 f7       	brcc	.-24     	; 0x1d0e <__unordsf2+0xc>
    1d26:	07 f8       	bld	r0, 7
    1d28:	0f 92       	push	r0
    1d2a:	e8 94       	clt
    1d2c:	2b e3       	ldi	r18, 0x3B	; 59
    1d2e:	3a ea       	ldi	r19, 0xAA	; 170
    1d30:	48 eb       	ldi	r20, 0xB8	; 184
    1d32:	5f e7       	ldi	r21, 0x7F	; 127
    1d34:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__mulsf3_pse>
    1d38:	0f 92       	push	r0
    1d3a:	0f 92       	push	r0
    1d3c:	0f 92       	push	r0
    1d3e:	4d b7       	in	r20, 0x3d	; 61
    1d40:	5e b7       	in	r21, 0x3e	; 62
    1d42:	0f 92       	push	r0
    1d44:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <modf>
    1d48:	e8 e6       	ldi	r30, 0x68	; 104
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__fp_powser>
    1d50:	4f 91       	pop	r20
    1d52:	5f 91       	pop	r21
    1d54:	ef 91       	pop	r30
    1d56:	ff 91       	pop	r31
    1d58:	e5 95       	asr	r30
    1d5a:	ee 1f       	adc	r30, r30
    1d5c:	ff 1f       	adc	r31, r31
    1d5e:	49 f0       	breq	.+18     	; 0x1d72 <exp+0x56>
    1d60:	fe 57       	subi	r31, 0x7E	; 126
    1d62:	e0 68       	ori	r30, 0x80	; 128
    1d64:	44 27       	eor	r20, r20
    1d66:	ee 0f       	add	r30, r30
    1d68:	44 1f       	adc	r20, r20
    1d6a:	fa 95       	dec	r31
    1d6c:	e1 f7       	brne	.-8      	; 0x1d66 <exp+0x4a>
    1d6e:	41 95       	neg	r20
    1d70:	55 0b       	sbc	r21, r21
    1d72:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <ldexp>
    1d76:	0f 90       	pop	r0
    1d78:	07 fe       	sbrs	r0, 7
    1d7a:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <inverse>
    1d7e:	08 95       	ret

00001d80 <__fp_powser>:
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	1f 93       	push	r17
    1d86:	0f 93       	push	r16
    1d88:	ff 92       	push	r15
    1d8a:	ef 92       	push	r14
    1d8c:	df 92       	push	r13
    1d8e:	7b 01       	movw	r14, r22
    1d90:	8c 01       	movw	r16, r24
    1d92:	68 94       	set
    1d94:	06 c0       	rjmp	.+12     	; 0x1da2 <__fp_powser+0x22>
    1d96:	da 2e       	mov	r13, r26
    1d98:	ef 01       	movw	r28, r30
    1d9a:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3x>
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e8 94       	clt
    1da2:	a5 91       	lpm	r26, Z+
    1da4:	25 91       	lpm	r18, Z+
    1da6:	35 91       	lpm	r19, Z+
    1da8:	45 91       	lpm	r20, Z+
    1daa:	55 91       	lpm	r21, Z+
    1dac:	a6 f3       	brts	.-24     	; 0x1d96 <__fp_powser+0x16>
    1dae:	ef 01       	movw	r28, r30
    1db0:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3x>
    1db4:	fe 01       	movw	r30, r28
    1db6:	97 01       	movw	r18, r14
    1db8:	a8 01       	movw	r20, r16
    1dba:	da 94       	dec	r13
    1dbc:	69 f7       	brne	.-38     	; 0x1d98 <__fp_powser+0x18>
    1dbe:	df 90       	pop	r13
    1dc0:	ef 90       	pop	r14
    1dc2:	ff 90       	pop	r15
    1dc4:	0f 91       	pop	r16
    1dc6:	1f 91       	pop	r17
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <inverse>:
    1dce:	9b 01       	movw	r18, r22
    1dd0:	ac 01       	movw	r20, r24
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	80 e8       	ldi	r24, 0x80	; 128
    1dd8:	9f e3       	ldi	r25, 0x3F	; 63
    1dda:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <__divsf3>
    1dde:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_inf>
    1de2:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_mpack>

00001de6 <ldexp>:
    1de6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__fp_splitA>
    1dea:	d8 f3       	brcs	.-10     	; 0x1de2 <inverse+0x14>
    1dec:	99 23       	and	r25, r25
    1dee:	c9 f3       	breq	.-14     	; 0x1de2 <inverse+0x14>
    1df0:	94 0f       	add	r25, r20
    1df2:	51 1d       	adc	r21, r1
    1df4:	a3 f3       	brvs	.-24     	; 0x1dde <inverse+0x10>
    1df6:	91 50       	subi	r25, 0x01	; 1
    1df8:	50 40       	sbci	r21, 0x00	; 0
    1dfa:	94 f0       	brlt	.+36     	; 0x1e20 <ldexp+0x3a>
    1dfc:	59 f0       	breq	.+22     	; 0x1e14 <ldexp+0x2e>
    1dfe:	88 23       	and	r24, r24
    1e00:	32 f0       	brmi	.+12     	; 0x1e0e <ldexp+0x28>
    1e02:	66 0f       	add	r22, r22
    1e04:	77 1f       	adc	r23, r23
    1e06:	88 1f       	adc	r24, r24
    1e08:	91 50       	subi	r25, 0x01	; 1
    1e0a:	50 40       	sbci	r21, 0x00	; 0
    1e0c:	c1 f7       	brne	.-16     	; 0x1dfe <ldexp+0x18>
    1e0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e10:	51 05       	cpc	r21, r1
    1e12:	2c f7       	brge	.-54     	; 0x1dde <inverse+0x10>
    1e14:	88 0f       	add	r24, r24
    1e16:	91 1d       	adc	r25, r1
    1e18:	96 95       	lsr	r25
    1e1a:	87 95       	ror	r24
    1e1c:	97 f9       	bld	r25, 7
    1e1e:	08 95       	ret
    1e20:	5f 3f       	cpi	r21, 0xFF	; 255
    1e22:	ac f0       	brlt	.+42     	; 0x1e4e <ldexp+0x68>
    1e24:	98 3e       	cpi	r25, 0xE8	; 232
    1e26:	9c f0       	brlt	.+38     	; 0x1e4e <ldexp+0x68>
    1e28:	bb 27       	eor	r27, r27
    1e2a:	86 95       	lsr	r24
    1e2c:	77 95       	ror	r23
    1e2e:	67 95       	ror	r22
    1e30:	b7 95       	ror	r27
    1e32:	08 f4       	brcc	.+2      	; 0x1e36 <ldexp+0x50>
    1e34:	b1 60       	ori	r27, 0x01	; 1
    1e36:	93 95       	inc	r25
    1e38:	c1 f7       	brne	.-16     	; 0x1e2a <ldexp+0x44>
    1e3a:	bb 0f       	add	r27, r27
    1e3c:	58 f7       	brcc	.-42     	; 0x1e14 <ldexp+0x2e>
    1e3e:	11 f4       	brne	.+4      	; 0x1e44 <ldexp+0x5e>
    1e40:	60 ff       	sbrs	r22, 0
    1e42:	e8 cf       	rjmp	.-48     	; 0x1e14 <ldexp+0x2e>
    1e44:	6f 5f       	subi	r22, 0xFF	; 255
    1e46:	7f 4f       	sbci	r23, 0xFF	; 255
    1e48:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	e3 cf       	rjmp	.-58     	; 0x1e14 <ldexp+0x2e>
    1e4e:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__fp_szero>
    1e52:	16 f0       	brts	.+4      	; 0x1e58 <ldexp+0x72>
    1e54:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__fp_mpack>
    1e58:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_nan>
    1e5c:	68 94       	set
    1e5e:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__fp_inf>

00001e62 <log>:
    1e62:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__fp_splitA>
    1e66:	a8 f3       	brcs	.-22     	; 0x1e52 <ldexp+0x6c>
    1e68:	99 23       	and	r25, r25
    1e6a:	c1 f3       	breq	.-16     	; 0x1e5c <ldexp+0x76>
    1e6c:	ae f3       	brts	.-22     	; 0x1e58 <ldexp+0x72>
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	1f 93       	push	r17
    1e74:	0f 93       	push	r16
    1e76:	ff 92       	push	r15
    1e78:	c9 2f       	mov	r28, r25
    1e7a:	dd 27       	eor	r29, r29
    1e7c:	88 23       	and	r24, r24
    1e7e:	2a f0       	brmi	.+10     	; 0x1e8a <log+0x28>
    1e80:	21 97       	sbiw	r28, 0x01	; 1
    1e82:	66 0f       	add	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	88 1f       	adc	r24, r24
    1e88:	da f7       	brpl	.-10     	; 0x1e80 <log+0x1e>
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e8       	ldi	r20, 0x80	; 128
    1e90:	5f eb       	ldi	r21, 0xBF	; 191
    1e92:	9f e3       	ldi	r25, 0x3F	; 63
    1e94:	88 39       	cpi	r24, 0x98	; 152
    1e96:	20 f0       	brcs	.+8      	; 0x1ea0 <log+0x3e>
    1e98:	80 3e       	cpi	r24, 0xE0	; 224
    1e9a:	38 f0       	brcs	.+14     	; 0x1eaa <log+0x48>
    1e9c:	21 96       	adiw	r28, 0x01	; 1
    1e9e:	8f 77       	andi	r24, 0x7F	; 127
    1ea0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
    1ea4:	e0 e9       	ldi	r30, 0x90	; 144
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	04 c0       	rjmp	.+8      	; 0x1eb2 <log+0x50>
    1eaa:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__addsf3>
    1eae:	ed eb       	ldi	r30, 0xBD	; 189
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__fp_powser>
    1eb6:	8b 01       	movw	r16, r22
    1eb8:	be 01       	movw	r22, r28
    1eba:	ec 01       	movw	r28, r24
    1ebc:	fb 2e       	mov	r15, r27
    1ebe:	6f 57       	subi	r22, 0x7F	; 127
    1ec0:	71 09       	sbc	r23, r1
    1ec2:	75 95       	asr	r23
    1ec4:	77 1f       	adc	r23, r23
    1ec6:	88 0b       	sbc	r24, r24
    1ec8:	99 0b       	sbc	r25, r25
    1eca:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__floatsisf>
    1ece:	28 e1       	ldi	r18, 0x18	; 24
    1ed0:	32 e7       	ldi	r19, 0x72	; 114
    1ed2:	41 e3       	ldi	r20, 0x31	; 49
    1ed4:	5f e3       	ldi	r21, 0x3F	; 63
    1ed6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3x>
    1eda:	af 2d       	mov	r26, r15
    1edc:	98 01       	movw	r18, r16
    1ede:	ae 01       	movw	r20, r28
    1ee0:	ff 90       	pop	r15
    1ee2:	0f 91       	pop	r16
    1ee4:	1f 91       	pop	r17
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	0e 94 12 0c 	call	0x1824	; 0x1824 <__addsf3x>
    1eee:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__fp_round>

00001ef2 <modf>:
    1ef2:	fa 01       	movw	r30, r20
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	aa 0f       	add	r26, r26
    1ef8:	bb 1f       	adc	r27, r27
    1efa:	9b 01       	movw	r18, r22
    1efc:	ac 01       	movw	r20, r24
    1efe:	bf 57       	subi	r27, 0x7F	; 127
    1f00:	28 f4       	brcc	.+10     	; 0x1f0c <modf+0x1a>
    1f02:	22 27       	eor	r18, r18
    1f04:	33 27       	eor	r19, r19
    1f06:	44 27       	eor	r20, r20
    1f08:	50 78       	andi	r21, 0x80	; 128
    1f0a:	20 c0       	rjmp	.+64     	; 0x1f4c <modf+0x5a>
    1f0c:	b7 51       	subi	r27, 0x17	; 23
    1f0e:	90 f4       	brcc	.+36     	; 0x1f34 <modf+0x42>
    1f10:	ab 2f       	mov	r26, r27
    1f12:	00 24       	eor	r0, r0
    1f14:	46 95       	lsr	r20
    1f16:	37 95       	ror	r19
    1f18:	27 95       	ror	r18
    1f1a:	01 1c       	adc	r0, r1
    1f1c:	a3 95       	inc	r26
    1f1e:	d2 f3       	brmi	.-12     	; 0x1f14 <modf+0x22>
    1f20:	00 20       	and	r0, r0
    1f22:	71 f0       	breq	.+28     	; 0x1f40 <modf+0x4e>
    1f24:	22 0f       	add	r18, r18
    1f26:	33 1f       	adc	r19, r19
    1f28:	44 1f       	adc	r20, r20
    1f2a:	b3 95       	inc	r27
    1f2c:	da f3       	brmi	.-10     	; 0x1f24 <modf+0x32>
    1f2e:	0e d0       	rcall	.+28     	; 0x1f4c <modf+0x5a>
    1f30:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__subsf3>
    1f34:	61 30       	cpi	r22, 0x01	; 1
    1f36:	71 05       	cpc	r23, r1
    1f38:	a0 e8       	ldi	r26, 0x80	; 128
    1f3a:	8a 07       	cpc	r24, r26
    1f3c:	b9 46       	sbci	r27, 0x69	; 105
    1f3e:	30 f4       	brcc	.+12     	; 0x1f4c <modf+0x5a>
    1f40:	9b 01       	movw	r18, r22
    1f42:	ac 01       	movw	r20, r24
    1f44:	66 27       	eor	r22, r22
    1f46:	77 27       	eor	r23, r23
    1f48:	88 27       	eor	r24, r24
    1f4a:	90 78       	andi	r25, 0x80	; 128
    1f4c:	30 96       	adiw	r30, 0x00	; 0
    1f4e:	21 f0       	breq	.+8      	; 0x1f58 <modf+0x66>
    1f50:	20 83       	st	Z, r18
    1f52:	31 83       	std	Z+1, r19	; 0x01
    1f54:	42 83       	std	Z+2, r20	; 0x02
    1f56:	53 83       	std	Z+3, r21	; 0x03
    1f58:	08 95       	ret

00001f5a <__fp_mpack>:
    1f5a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f5c:	31 f0       	breq	.+12     	; 0x1f6a <__fp_mpack_finite+0xc>

00001f5e <__fp_mpack_finite>:
    1f5e:	91 50       	subi	r25, 0x01	; 1
    1f60:	20 f4       	brcc	.+8      	; 0x1f6a <__fp_mpack_finite+0xc>
    1f62:	87 95       	ror	r24
    1f64:	77 95       	ror	r23
    1f66:	67 95       	ror	r22
    1f68:	b7 95       	ror	r27
    1f6a:	88 0f       	add	r24, r24
    1f6c:	91 1d       	adc	r25, r1
    1f6e:	96 95       	lsr	r25
    1f70:	87 95       	ror	r24
    1f72:	97 f9       	bld	r25, 7
    1f74:	08 95       	ret

00001f76 <__udivmodsi4>:
    1f76:	a1 e2       	ldi	r26, 0x21	; 33
    1f78:	1a 2e       	mov	r1, r26
    1f7a:	aa 1b       	sub	r26, r26
    1f7c:	bb 1b       	sub	r27, r27
    1f7e:	fd 01       	movw	r30, r26
    1f80:	0d c0       	rjmp	.+26     	; 0x1f9c <__udivmodsi4_ep>

00001f82 <__udivmodsi4_loop>:
    1f82:	aa 1f       	adc	r26, r26
    1f84:	bb 1f       	adc	r27, r27
    1f86:	ee 1f       	adc	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	a2 17       	cp	r26, r18
    1f8c:	b3 07       	cpc	r27, r19
    1f8e:	e4 07       	cpc	r30, r20
    1f90:	f5 07       	cpc	r31, r21
    1f92:	20 f0       	brcs	.+8      	; 0x1f9c <__udivmodsi4_ep>
    1f94:	a2 1b       	sub	r26, r18
    1f96:	b3 0b       	sbc	r27, r19
    1f98:	e4 0b       	sbc	r30, r20
    1f9a:	f5 0b       	sbc	r31, r21

00001f9c <__udivmodsi4_ep>:
    1f9c:	66 1f       	adc	r22, r22
    1f9e:	77 1f       	adc	r23, r23
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	1a 94       	dec	r1
    1fa6:	69 f7       	brne	.-38     	; 0x1f82 <__udivmodsi4_loop>
    1fa8:	60 95       	com	r22
    1faa:	70 95       	com	r23
    1fac:	80 95       	com	r24
    1fae:	90 95       	com	r25
    1fb0:	9b 01       	movw	r18, r22
    1fb2:	ac 01       	movw	r20, r24
    1fb4:	bd 01       	movw	r22, r26
    1fb6:	cf 01       	movw	r24, r30
    1fb8:	08 95       	ret

00001fba <__tablejump2__>:
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	05 90       	lpm	r0, Z+
    1fc0:	f4 91       	lpm	r31, Z
    1fc2:	e0 2d       	mov	r30, r0
    1fc4:	09 94       	ijmp

00001fc6 <_exit>:
    1fc6:	f8 94       	cli

00001fc8 <__stop_program>:
    1fc8:	ff cf       	rjmp	.-2      	; 0x1fc8 <__stop_program>
