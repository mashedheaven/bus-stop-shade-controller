
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800100  00001e80  00001f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e80  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  00800250  00800250  00002064  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f8  00000000  00000000  000020b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013526  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003205  00000000  00000000  00015bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f33  00000000  00000000  00018ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d7c  00000000  00000000  0001cd10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e0b  00000000  00000000  0001da8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b52  00000000  00000000  00021897  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d0  00000000  00000000  000273e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_11>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__vector_18>
      4c:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	28 03       	fmul	r18, r16
      ba:	7b 06       	cpc	r7, r27

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	12 e0       	ldi	r17, 0x02	; 2
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e0 e8       	ldi	r30, 0x80	; 128
      d0:	fe e1       	ldi	r31, 0x1E	; 30
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a0 35       	cpi	r26, 0x50	; 80
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	23 e0       	ldi	r18, 0x03	; 3
      e0:	a0 e5       	ldi	r26, 0x50	; 80
      e2:	b2 e0       	ldi	r27, 0x02	; 2
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a2 32       	cpi	r26, 0x22	; 34
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	ce e5       	ldi	r28, 0x5E	; 94
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__tablejump2__>
      fe:	cc 35       	cpi	r28, 0x5C	; 92
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
     108:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_default>

00000110 <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     110:	2f 92       	push	r2
     112:	3f 92       	push	r3
     114:	4f 92       	push	r4
     116:	5f 92       	push	r5
     118:	6f 92       	push	r6
     11a:	7f 92       	push	r7
     11c:	8f 92       	push	r8
     11e:	9f 92       	push	r9
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	e4 2f       	mov	r30, r20
     136:	f5 2f       	mov	r31, r21
     138:	41 90       	ld	r4, Z+
     13a:	50 80       	ld	r5, Z
     13c:	4f 92       	push	r4
     13e:	5f 92       	push	r5
     140:	e4 2f       	mov	r30, r20
     142:	f5 2f       	mov	r31, r21
     144:	4d b6       	in	r4, 0x3d	; 61
     146:	5e b6       	in	r5, 0x3e	; 62
     148:	41 92       	st	Z+, r4
     14a:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     14c:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>

00000150 <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     150:	e6 2f       	mov	r30, r22
     152:	f7 2f       	mov	r31, r23
     154:	41 90       	ld	r4, Z+
     156:	50 80       	ld	r5, Z
     158:	4d be       	out	0x3d, r4	; 61
     15a:	5e be       	out	0x3e, r5	; 62
     15c:	5f 90       	pop	r5
     15e:	4f 90       	pop	r4
     160:	e6 2f       	mov	r30, r22
     162:	f7 2f       	mov	r31, r23
     164:	41 92       	st	Z+, r4
     166:	50 82       	st	Z, r5
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	bf 90       	pop	r11
     17a:	af 90       	pop	r10
     17c:	9f 90       	pop	r9
     17e:	8f 90       	pop	r8
     180:	7f 90       	pop	r7
     182:	6f 90       	pop	r6
     184:	5f 90       	pop	r5
     186:	4f 90       	pop	r4
     188:	3f 90       	pop	r3
     18a:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     18c:	0c 94 08 08 	jmp	0x1010	; 0x1010 <osEE_scheduler_task_wrapper_restore>

00000190 <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     190:	e6 2f       	mov	r30, r22
    mov r31, r23
     192:	f7 2f       	mov	r31, r23
    ld  r20, z+
     194:	41 91       	ld	r20, Z+
    ld  r21, z
     196:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     198:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     19a:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     19c:	0c 94 09 08 	jmp	0x1012	; 0x1012 <osEE_scheduler_task_wrapper_run>

000001a0 <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     1a0:	2f 92       	push	r2
     1a2:	3f 92       	push	r3
     1a4:	4f 92       	push	r4
     1a6:	5f 92       	push	r5
     1a8:	6f 92       	push	r6
     1aa:	7f 92       	push	r7
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	e4 2f       	mov	r30, r20
     1c6:	f5 2f       	mov	r31, r21
     1c8:	41 90       	ld	r4, Z+
     1ca:	50 80       	ld	r5, Z
     1cc:	4f 92       	push	r4
     1ce:	5f 92       	push	r5
     1d0:	e4 2f       	mov	r30, r20
     1d2:	f5 2f       	mov	r31, r21
     1d4:	4d b6       	in	r4, 0x3d	; 61
     1d6:	5e b6       	in	r5, 0x3e	; 62
     1d8:	41 92       	st	Z+, r4
     1da:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     1dc:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

000001e0 <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     1e0:	e8 2f       	mov	r30, r24
    mov r31, r25
     1e2:	f9 2f       	mov	r31, r25
    ld  r20, z+
     1e4:	41 91       	ld	r20, Z+
    ld  r21, z
     1e6:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     1e8:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     1ea:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     1ec:	e6 2f       	mov	r30, r22
    mov r31, r23
     1ee:	f7 2f       	mov	r31, r23

    ijmp
     1f0:	09 94       	ijmp
	...

000001f4 <_ZN5Print17availableForWriteEv>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	08 95       	ret

000001fa <_ZN5Print5flushEv>:
     1fa:	08 95       	ret

000001fc <_ZN13LiquidCrystal11pulseEnableEv>:
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	ec 01       	movw	r28, r24
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	8e 81       	ldd	r24, Y+6	; 0x06
     206:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 04 04 	call	0x808	; 0x808 <delayMicroseconds>
     212:	61 e0       	ldi	r22, 0x01	; 1
     214:	8e 81       	ldd	r24, Y+6	; 0x06
     216:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 04 04 	call	0x808	; 0x808 <delayMicroseconds>
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	8e 81       	ldd	r24, Y+6	; 0x06
     226:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
     22a:	84 e6       	ldi	r24, 0x64	; 100
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	0c 94 04 04 	jmp	0x808	; 0x808 <delayMicroseconds>

00000236 <_ZN13LiquidCrystal10write4bitsEh>:
     236:	cf 92       	push	r12
     238:	df 92       	push	r13
     23a:	ef 92       	push	r14
     23c:	ff 92       	push	r15
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	6c 01       	movw	r12, r24
     248:	7c 01       	movw	r14, r24
     24a:	87 e0       	ldi	r24, 0x07	; 7
     24c:	e8 0e       	add	r14, r24
     24e:	f1 1c       	adc	r15, r1
     250:	d0 e0       	ldi	r29, 0x00	; 0
     252:	c0 e0       	ldi	r28, 0x00	; 0
     254:	06 2f       	mov	r16, r22
     256:	10 e0       	ldi	r17, 0x00	; 0
     258:	b8 01       	movw	r22, r16
     25a:	0c 2e       	mov	r0, r28
     25c:	02 c0       	rjmp	.+4      	; 0x262 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     25e:	75 95       	asr	r23
     260:	67 95       	ror	r22
     262:	0a 94       	dec	r0
     264:	e2 f7       	brpl	.-8      	; 0x25e <_ZN13LiquidCrystal10write4bitsEh+0x28>
     266:	61 70       	andi	r22, 0x01	; 1
     268:	f7 01       	movw	r30, r14
     26a:	81 91       	ld	r24, Z+
     26c:	7f 01       	movw	r14, r30
     26e:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
     272:	21 96       	adiw	r28, 0x01	; 1
     274:	c4 30       	cpi	r28, 0x04	; 4
     276:	d1 05       	cpc	r29, r1
     278:	79 f7       	brne	.-34     	; 0x258 <_ZN13LiquidCrystal10write4bitsEh+0x22>
     27a:	c6 01       	movw	r24, r12
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	1f 91       	pop	r17
     282:	0f 91       	pop	r16
     284:	ff 90       	pop	r15
     286:	ef 90       	pop	r14
     288:	df 90       	pop	r13
     28a:	cf 90       	pop	r12
     28c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_ZN13LiquidCrystal11pulseEnableEv>

00000290 <_ZN13LiquidCrystal10write8bitsEh>:
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	6c 01       	movw	r12, r24
     2a2:	7c 01       	movw	r14, r24
     2a4:	87 e0       	ldi	r24, 0x07	; 7
     2a6:	e8 0e       	add	r14, r24
     2a8:	f1 1c       	adc	r15, r1
     2aa:	d0 e0       	ldi	r29, 0x00	; 0
     2ac:	c0 e0       	ldi	r28, 0x00	; 0
     2ae:	06 2f       	mov	r16, r22
     2b0:	10 e0       	ldi	r17, 0x00	; 0
     2b2:	b8 01       	movw	r22, r16
     2b4:	0c 2e       	mov	r0, r28
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     2b8:	75 95       	asr	r23
     2ba:	67 95       	ror	r22
     2bc:	0a 94       	dec	r0
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     2c0:	61 70       	andi	r22, 0x01	; 1
     2c2:	f7 01       	movw	r30, r14
     2c4:	81 91       	ld	r24, Z+
     2c6:	7f 01       	movw	r14, r30
     2c8:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
     2cc:	21 96       	adiw	r28, 0x01	; 1
     2ce:	c8 30       	cpi	r28, 0x08	; 8
     2d0:	d1 05       	cpc	r29, r1
     2d2:	79 f7       	brne	.-34     	; 0x2b2 <_ZN13LiquidCrystal10write8bitsEh+0x22>
     2d4:	c6 01       	movw	r24, r12
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	df 90       	pop	r13
     2e4:	cf 90       	pop	r12
     2e6:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_ZN13LiquidCrystal11pulseEnableEv>

000002ea <_ZN13LiquidCrystal4sendEhh>:
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	ec 01       	movw	r28, r24
     2f2:	16 2f       	mov	r17, r22
     2f4:	64 2f       	mov	r22, r20
     2f6:	8c 81       	ldd	r24, Y+4	; 0x04
     2f8:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
     2fc:	8d 81       	ldd	r24, Y+5	; 0x05
     2fe:	8f 3f       	cpi	r24, 0xFF	; 255
     300:	19 f0       	breq	.+6      	; 0x308 <_ZN13LiquidCrystal4sendEhh+0x1e>
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
     308:	8f 85       	ldd	r24, Y+15	; 0x0f
     30a:	61 2f       	mov	r22, r17
     30c:	84 ff       	sbrs	r24, 4
     30e:	06 c0       	rjmp	.+12     	; 0x31c <_ZN13LiquidCrystal4sendEhh+0x32>
     310:	ce 01       	movw	r24, r28
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0c 94 48 01 	jmp	0x290	; 0x290 <_ZN13LiquidCrystal10write8bitsEh>
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	84 e0       	ldi	r24, 0x04	; 4
     320:	75 95       	asr	r23
     322:	67 95       	ror	r22
     324:	8a 95       	dec	r24
     326:	e1 f7       	brne	.-8      	; 0x320 <_ZN13LiquidCrystal4sendEhh+0x36>
     328:	ce 01       	movw	r24, r28
     32a:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN13LiquidCrystal10write4bitsEh>
     32e:	61 2f       	mov	r22, r17
     330:	ce 01       	movw	r24, r28
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0c 94 1b 01 	jmp	0x236	; 0x236 <_ZN13LiquidCrystal10write4bitsEh>

0000033c <_ZN13LiquidCrystal7commandEh>:
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_ZN13LiquidCrystal4sendEhh>

00000342 <_ZN13LiquidCrystal5clearEv>:
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN13LiquidCrystal7commandEh>
     348:	80 ed       	ldi	r24, 0xD0	; 208
     34a:	97 e0       	ldi	r25, 0x07	; 7
     34c:	0c 94 04 04 	jmp	0x808	; 0x808 <delayMicroseconds>

00000350 <_ZN13LiquidCrystal9setCursorEhh>:
     350:	44 30       	cpi	r20, 0x04	; 4
     352:	08 f0       	brcs	.+2      	; 0x356 <_ZN13LiquidCrystal9setCursorEhh+0x6>
     354:	43 e0       	ldi	r20, 0x03	; 3
     356:	fc 01       	movw	r30, r24
     358:	23 89       	ldd	r18, Z+19	; 0x13
     35a:	42 17       	cp	r20, r18
     35c:	10 f0       	brcs	.+4      	; 0x362 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     35e:	4f ef       	ldi	r20, 0xFF	; 255
     360:	42 0f       	add	r20, r18
     362:	fc 01       	movw	r30, r24
     364:	e4 0f       	add	r30, r20
     366:	f1 1d       	adc	r31, r1
     368:	24 89       	ldd	r18, Z+20	; 0x14
     36a:	62 0f       	add	r22, r18
     36c:	60 68       	ori	r22, 0x80	; 128
     36e:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_ZN13LiquidCrystal7commandEh>

00000372 <_ZN13LiquidCrystal7displayEv>:
     372:	fc 01       	movw	r30, r24
     374:	60 89       	ldd	r22, Z+16	; 0x10
     376:	26 2f       	mov	r18, r22
     378:	24 60       	ori	r18, 0x04	; 4
     37a:	20 8b       	std	Z+16, r18	; 0x10
     37c:	6c 60       	ori	r22, 0x0C	; 12
     37e:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_ZN13LiquidCrystal7commandEh>

00000382 <_ZN13LiquidCrystal5beginEhhh>:
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	ec 01       	movw	r28, r24
     38c:	42 30       	cpi	r20, 0x02	; 2
     38e:	18 f0       	brcs	.+6      	; 0x396 <_ZN13LiquidCrystal5beginEhhh+0x14>
     390:	8f 85       	ldd	r24, Y+15	; 0x0f
     392:	88 60       	ori	r24, 0x08	; 8
     394:	8f 87       	std	Y+15, r24	; 0x0f
     396:	4b 8b       	std	Y+19, r20	; 0x13
     398:	1c 8a       	std	Y+20, r1	; 0x14
     39a:	80 e4       	ldi	r24, 0x40	; 64
     39c:	8d 8b       	std	Y+21, r24	; 0x15
     39e:	6e 8b       	std	Y+22, r22	; 0x16
     3a0:	60 5c       	subi	r22, 0xC0	; 192
     3a2:	6f 8b       	std	Y+23, r22	; 0x17
     3a4:	22 23       	and	r18, r18
     3a6:	29 f0       	breq	.+10     	; 0x3b2 <_ZN13LiquidCrystal5beginEhhh+0x30>
     3a8:	41 30       	cpi	r20, 0x01	; 1
     3aa:	19 f4       	brne	.+6      	; 0x3b2 <_ZN13LiquidCrystal5beginEhhh+0x30>
     3ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     3ae:	84 60       	ori	r24, 0x04	; 4
     3b0:	8f 87       	std	Y+15, r24	; 0x0f
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	8c 81       	ldd	r24, Y+4	; 0x04
     3b6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <pinMode>
     3ba:	8d 81       	ldd	r24, Y+5	; 0x05
     3bc:	8f 3f       	cpi	r24, 0xFF	; 255
     3be:	19 f0       	breq	.+6      	; 0x3c6 <_ZN13LiquidCrystal5beginEhhh+0x44>
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <pinMode>
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	8e 81       	ldd	r24, Y+6	; 0x06
     3ca:	0e 94 73 04 	call	0x8e6	; 0x8e6 <pinMode>
     3ce:	8e 01       	movw	r16, r28
     3d0:	98 01       	movw	r18, r16
     3d2:	2c 1b       	sub	r18, r28
     3d4:	3d 0b       	sbc	r19, r29
     3d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     3d8:	84 fd       	sbrc	r24, 4
     3da:	0d c0       	rjmp	.+26     	; 0x3f6 <_ZN13LiquidCrystal5beginEhhh+0x74>
     3dc:	84 e0       	ldi	r24, 0x04	; 4
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0f 5f       	subi	r16, 0xFF	; 255
     3e2:	1f 4f       	sbci	r17, 0xFF	; 255
     3e4:	28 17       	cp	r18, r24
     3e6:	39 07       	cpc	r19, r25
     3e8:	4c f4       	brge	.+18     	; 0x3fc <_ZN13LiquidCrystal5beginEhhh+0x7a>
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	f8 01       	movw	r30, r16
     3ee:	86 81       	ldd	r24, Z+6	; 0x06
     3f0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <pinMode>
     3f4:	ed cf       	rjmp	.-38     	; 0x3d0 <_ZN13LiquidCrystal5beginEhhh+0x4e>
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	f2 cf       	rjmp	.-28     	; 0x3e0 <_ZN13LiquidCrystal5beginEhhh+0x5e>
     3fc:	80 e5       	ldi	r24, 0x50	; 80
     3fe:	93 ec       	ldi	r25, 0xC3	; 195
     400:	0e 94 04 04 	call	0x808	; 0x808 <delayMicroseconds>
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	8c 81       	ldd	r24, Y+4	; 0x04
     408:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	8e 81       	ldd	r24, Y+6	; 0x06
     410:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
     414:	8d 81       	ldd	r24, Y+5	; 0x05
     416:	8f 3f       	cpi	r24, 0xFF	; 255
     418:	19 f0       	breq	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	0e 94 af 04 	call	0x95e	; 0x95e <digitalWrite>
     420:	6f 85       	ldd	r22, Y+15	; 0x0f
     422:	64 fd       	sbrc	r22, 4
     424:	33 c0       	rjmp	.+102    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     426:	63 e0       	ldi	r22, 0x03	; 3
     428:	ce 01       	movw	r24, r28
     42a:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN13LiquidCrystal10write4bitsEh>
     42e:	84 e9       	ldi	r24, 0x94	; 148
     430:	91 e1       	ldi	r25, 0x11	; 17
     432:	0e 94 04 04 	call	0x808	; 0x808 <delayMicroseconds>
     436:	63 e0       	ldi	r22, 0x03	; 3
     438:	ce 01       	movw	r24, r28
     43a:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN13LiquidCrystal10write4bitsEh>
     43e:	84 e9       	ldi	r24, 0x94	; 148
     440:	91 e1       	ldi	r25, 0x11	; 17
     442:	0e 94 04 04 	call	0x808	; 0x808 <delayMicroseconds>
     446:	63 e0       	ldi	r22, 0x03	; 3
     448:	ce 01       	movw	r24, r28
     44a:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN13LiquidCrystal10write4bitsEh>
     44e:	86 e9       	ldi	r24, 0x96	; 150
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 04 04 	call	0x808	; 0x808 <delayMicroseconds>
     456:	62 e0       	ldi	r22, 0x02	; 2
     458:	ce 01       	movw	r24, r28
     45a:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN13LiquidCrystal10write4bitsEh>
     45e:	6f 85       	ldd	r22, Y+15	; 0x0f
     460:	60 62       	ori	r22, 0x20	; 32
     462:	ce 01       	movw	r24, r28
     464:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN13LiquidCrystal7commandEh>
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	88 8b       	std	Y+16, r24	; 0x10
     46c:	ce 01       	movw	r24, r28
     46e:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN13LiquidCrystal7displayEv>
     472:	ce 01       	movw	r24, r28
     474:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN13LiquidCrystal5clearEv>
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	89 8b       	std	Y+17, r24	; 0x11
     47c:	66 e0       	ldi	r22, 0x06	; 6
     47e:	ce 01       	movw	r24, r28
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16
     488:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_ZN13LiquidCrystal7commandEh>
     48c:	60 62       	ori	r22, 0x20	; 32
     48e:	ce 01       	movw	r24, r28
     490:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN13LiquidCrystal7commandEh>
     494:	84 e9       	ldi	r24, 0x94	; 148
     496:	91 e1       	ldi	r25, 0x11	; 17
     498:	0e 94 04 04 	call	0x808	; 0x808 <delayMicroseconds>
     49c:	6f 85       	ldd	r22, Y+15	; 0x0f
     49e:	60 62       	ori	r22, 0x20	; 32
     4a0:	ce 01       	movw	r24, r28
     4a2:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN13LiquidCrystal7commandEh>
     4a6:	86 e9       	ldi	r24, 0x96	; 150
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 04 04 	call	0x808	; 0x808 <delayMicroseconds>
     4ae:	6f 85       	ldd	r22, Y+15	; 0x0f
     4b0:	60 62       	ori	r22, 0x20	; 32
     4b2:	ce 01       	movw	r24, r28
     4b4:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN13LiquidCrystal7commandEh>
     4b8:	d2 cf       	rjmp	.-92     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>

000004ba <_ZN13LiquidCrystalC1Ehhhhhh>:
     4ba:	cf 92       	push	r12
     4bc:	ef 92       	push	r14
     4be:	0f 93       	push	r16
     4c0:	fc 01       	movw	r30, r24
     4c2:	13 82       	std	Z+3, r1	; 0x03
     4c4:	12 82       	std	Z+2, r1	; 0x02
     4c6:	82 e3       	ldi	r24, 0x32	; 50
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	91 83       	std	Z+1, r25	; 0x01
     4cc:	80 83       	st	Z, r24
     4ce:	64 83       	std	Z+4, r22	; 0x04
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	85 83       	std	Z+5, r24	; 0x05
     4d4:	46 83       	std	Z+6, r20	; 0x06
     4d6:	27 83       	std	Z+7, r18	; 0x07
     4d8:	00 87       	std	Z+8, r16	; 0x08
     4da:	e1 86       	std	Z+9, r14	; 0x09
     4dc:	c2 86       	std	Z+10, r12	; 0x0a
     4de:	13 86       	std	Z+11, r1	; 0x0b
     4e0:	14 86       	std	Z+12, r1	; 0x0c
     4e2:	15 86       	std	Z+13, r1	; 0x0d
     4e4:	16 86       	std	Z+14, r1	; 0x0e
     4e6:	17 86       	std	Z+15, r1	; 0x0f
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	41 e0       	ldi	r20, 0x01	; 1
     4ec:	60 e1       	ldi	r22, 0x10	; 16
     4ee:	cf 01       	movw	r24, r30
     4f0:	0f 91       	pop	r16
     4f2:	ef 90       	pop	r14
     4f4:	cf 90       	pop	r12
     4f6:	0c 94 c1 01 	jmp	0x382	; 0x382 <_ZN13LiquidCrystal5beginEhhh>

000004fa <_ZN13LiquidCrystal10createCharEhPh>:
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	8c 01       	movw	r16, r24
     508:	7a 01       	movw	r14, r20
     50a:	67 70       	andi	r22, 0x07	; 7
     50c:	88 e0       	ldi	r24, 0x08	; 8
     50e:	68 9f       	mul	r22, r24
     510:	b0 01       	movw	r22, r0
     512:	11 24       	eor	r1, r1
     514:	60 64       	ori	r22, 0x40	; 64
     516:	c8 01       	movw	r24, r16
     518:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN13LiquidCrystal7commandEh>
     51c:	e7 01       	movw	r28, r14
     51e:	a8 e0       	ldi	r26, 0x08	; 8
     520:	ea 0e       	add	r14, r26
     522:	f1 1c       	adc	r15, r1
     524:	69 91       	ld	r22, Y+
     526:	d8 01       	movw	r26, r16
     528:	ed 91       	ld	r30, X+
     52a:	fc 91       	ld	r31, X
     52c:	01 90       	ld	r0, Z+
     52e:	f0 81       	ld	r31, Z
     530:	e0 2d       	mov	r30, r0
     532:	c8 01       	movw	r24, r16
     534:	09 95       	icall
     536:	ce 15       	cp	r28, r14
     538:	df 05       	cpc	r29, r15
     53a:	a1 f7       	brne	.-24     	; 0x524 <_ZN13LiquidCrystal10createCharEhPh+0x2a>
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <_ZN13LiquidCrystal5writeEh>:
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN13LiquidCrystal4sendEhh>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	08 95       	ret

00000556 <idle_hook>:
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	00 d0       	rcall	.+0      	; 0x560 <idle_hook+0xa>
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	8d b7       	in	r24, 0x3d	; 61
     566:	9e b7       	in	r25, 0x3e	; 62
     568:	9a 83       	std	Y+2, r25	; 0x02
     56a:	89 83       	std	Y+1, r24	; 0x01
     56c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__data_end>
     570:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__data_end+0x1>
     574:	89 2b       	or	r24, r25
     576:	a9 f4       	brne	.+42     	; 0x5a2 <idle_hook+0x4c>
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <__data_end+0x1>
     580:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <__data_end>
     584:	f8 94       	cli
     586:	8a e1       	ldi	r24, 0x1A	; 26
     588:	95 e0       	ldi	r25, 0x05	; 5
     58a:	89 2b       	or	r24, r25
     58c:	11 f0       	breq	.+4      	; 0x592 <idle_hook+0x3c>
     58e:	0e 94 1a 05 	call	0xa34	; 0xa34 <_Z14serialEventRunv>
     592:	78 94       	sei
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	08 95       	ret
     5a2:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <__data_end>
     5a6:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <__data_end+0x1>
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	9a 81       	ldd	r25, Y+2	; 0x02
     5ae:	28 17       	cp	r18, r24
     5b0:	39 07       	cpc	r19, r25
     5b2:	41 f3       	breq	.-48     	; 0x584 <idle_hook+0x2e>
     5b4:	f8 94       	cli
     5b6:	8a e3       	ldi	r24, 0x3A	; 58
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 18 03 	call	0x630	; 0x630 <serial_print>
     5be:	0a e1       	ldi	r16, 0x1A	; 26
     5c0:	15 e0       	ldi	r17, 0x05	; 5
     5c2:	01 15       	cp	r16, r1
     5c4:	11 05       	cpc	r17, r1
     5c6:	e9 f3       	breq	.-6      	; 0x5c2 <idle_hook+0x6c>
     5c8:	0e 94 1a 05 	call	0xa34	; 0xa34 <_Z14serialEventRunv>
     5cc:	fa cf       	rjmp	.-12     	; 0x5c2 <idle_hook+0x6c>

000005ce <setup>:
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	44 e0       	ldi	r20, 0x04	; 4
     5d2:	64 e1       	ldi	r22, 0x14	; 20
     5d4:	87 e5       	ldi	r24, 0x57	; 87
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN13LiquidCrystal5beginEhhh>
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	51 e0       	ldi	r21, 0x01	; 1
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	87 e5       	ldi	r24, 0x57	; 87
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN13LiquidCrystal10createCharEhPh>
     5ea:	87 e5       	ldi	r24, 0x57	; 87
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN13LiquidCrystal5clearEv>
     5f2:	65 e5       	ldi	r22, 0x55	; 85
     5f4:	71 e0       	ldi	r23, 0x01	; 1
     5f6:	87 e5       	ldi	r24, 0x57	; 87
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print5printEPKc>
     5fe:	26 e0       	ldi	r18, 0x06	; 6
     600:	40 e8       	ldi	r20, 0x80	; 128
     602:	55 e2       	ldi	r21, 0x25	; 37
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	88 e7       	ldi	r24, 0x78	; 120
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN14HardwareSerial5beginEmh>
     610:	6a e6       	ldi	r22, 0x6A	; 106
     612:	71 e0       	ldi	r23, 0x01	; 1
     614:	88 e7       	ldi	r24, 0x78	; 120
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <_ZN5Print7printlnEPKc>

0000061c <main>:
     61c:	0e 94 0f 04 	call	0x81e	; 0x81e <init>
     620:	0e 94 e7 02 	call	0x5ce	; 0x5ce <setup>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0e 94 07 07 	call	0xe0e	; 0xe0e <StartOS>
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	08 95       	ret

00000630 <serial_print>:
     630:	f8 94       	cli
     632:	fc 01       	movw	r30, r24
     634:	01 90       	ld	r0, Z+
     636:	00 20       	and	r0, r0
     638:	e9 f7       	brne	.-6      	; 0x634 <serial_print+0x4>
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	af 01       	movw	r20, r30
     63e:	48 1b       	sub	r20, r24
     640:	59 0b       	sbc	r21, r25
     642:	bc 01       	movw	r22, r24
     644:	88 e7       	ldi	r24, 0x78	; 120
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	0e 94 a8 06 	call	0xd50	; 0xd50 <_ZN5Print5writeEPKhj>
     64c:	78 94       	sei
     64e:	08 95       	ret

00000650 <_GLOBAL__sub_I_lcd>:
     650:	cf 92       	push	r12
     652:	ef 92       	push	r14
     654:	0f 93       	push	r16
     656:	8d e0       	ldi	r24, 0x0D	; 13
     658:	c8 2e       	mov	r12, r24
     65a:	9c e0       	ldi	r25, 0x0C	; 12
     65c:	e9 2e       	mov	r14, r25
     65e:	0b e0       	ldi	r16, 0x0B	; 11
     660:	2a e0       	ldi	r18, 0x0A	; 10
     662:	49 e0       	ldi	r20, 0x09	; 9
     664:	68 e0       	ldi	r22, 0x08	; 8
     666:	87 e5       	ldi	r24, 0x57	; 87
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN13LiquidCrystalC1Ehhhhhh>
     66e:	0f 91       	pop	r16
     670:	ef 90       	pop	r14
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <FuncDisplayTask>:
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	64 97       	sbiw	r28, 0x14	; 20
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	87 e5       	ldi	r24, 0x57	; 87
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	0e 94 a8 01 	call	0x350	; 0x350 <_ZN13LiquidCrystal9setCursorEhh>
     69a:	6a ef       	ldi	r22, 0xFA	; 250
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	87 e5       	ldi	r24, 0x57	; 87
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print5printEPKc>
     6a6:	41 e0       	ldi	r20, 0x01	; 1
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	87 e5       	ldi	r24, 0x57	; 87
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	0e 94 a8 01 	call	0x350	; 0x350 <_ZN13LiquidCrystal9setCursorEhh>
     6b2:	6b e0       	ldi	r22, 0x0B	; 11
     6b4:	72 e0       	ldi	r23, 0x02	; 2
     6b6:	87 e5       	ldi	r24, 0x57	; 87
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print5printEPKc>
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	87 e5       	ldi	r24, 0x57	; 87
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN13LiquidCrystal5writeEh>
     6c8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <blink_state>
     6cc:	81 11       	cpse	r24, r1
     6ce:	47 c0       	rjmp	.+142    	; 0x75e <FuncDisplayTask+0xe8>
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <blink_state>
     6d6:	42 e0       	ldi	r20, 0x02	; 2
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	87 e5       	ldi	r24, 0x57	; 87
     6dc:	92 e0       	ldi	r25, 0x02	; 2
     6de:	0e 94 a8 01 	call	0x350	; 0x350 <_ZN13LiquidCrystal9setCursorEhh>
     6e2:	69 e1       	ldi	r22, 0x19	; 25
     6e4:	72 e0       	ldi	r23, 0x02	; 2
     6e6:	87 e5       	ldi	r24, 0x57	; 87
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print5printEPKc>
     6ee:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <count>
     6f2:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <count+0x1>
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <count+0x1>
     6fc:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <count>
     700:	43 e0       	ldi	r20, 0x03	; 3
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	87 e5       	ldi	r24, 0x57	; 87
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	0e 94 a8 01 	call	0x350	; 0x350 <_ZN13LiquidCrystal9setCursorEhh>
     70c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <count+0x1>
     710:	8f 93       	push	r24
     712:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <count>
     716:	8f 93       	push	r24
     718:	83 e3       	ldi	r24, 0x33	; 51
     71a:	92 e0       	ldi	r25, 0x02	; 2
     71c:	9f 93       	push	r25
     71e:	8f 93       	push	r24
     720:	8e 01       	movw	r16, r28
     722:	0f 5f       	subi	r16, 0xFF	; 255
     724:	1f 4f       	sbci	r17, 0xFF	; 255
     726:	1f 93       	push	r17
     728:	0f 93       	push	r16
     72a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <sprintf>
     72e:	b8 01       	movw	r22, r16
     730:	87 e5       	ldi	r24, 0x57	; 87
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN5Print5printEPKc>
     738:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <TerminateTask>
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	64 96       	adiw	r28, 0x14	; 20
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	08 95       	ret
     75e:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <blink_state>
     762:	42 e0       	ldi	r20, 0x02	; 2
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	87 e5       	ldi	r24, 0x57	; 87
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	0e 94 a8 01 	call	0x350	; 0x350 <_ZN13LiquidCrystal9setCursorEhh>
     76e:	66 e2       	ldi	r22, 0x26	; 38
     770:	72 e0       	ldi	r23, 0x02	; 2
     772:	b9 cf       	rjmp	.-142    	; 0x6e6 <FuncDisplayTask+0x70>

00000774 <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	3f 93       	push	r19
     782:	8f 93       	push	r24
     784:	9f 93       	push	r25
     786:	af 93       	push	r26
     788:	bf 93       	push	r27
     78a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <timer0_millis>
     78e:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <timer0_millis+0x1>
     792:	a0 91 72 02 	lds	r26, 0x0272	; 0x800272 <timer0_millis+0x2>
     796:	b0 91 73 02 	lds	r27, 0x0273	; 0x800273 <timer0_millis+0x3>
     79a:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <timer0_fract>
     79e:	23 e0       	ldi	r18, 0x03	; 3
     7a0:	23 0f       	add	r18, r19
     7a2:	2d 37       	cpi	r18, 0x7D	; 125
     7a4:	58 f5       	brcc	.+86     	; 0x7fc <__vector_16+0x88>
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	a1 1d       	adc	r26, r1
     7aa:	b1 1d       	adc	r27, r1
     7ac:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <timer0_fract>
     7b0:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <timer0_millis>
     7b4:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <timer0_millis+0x1>
     7b8:	a0 93 72 02 	sts	0x0272, r26	; 0x800272 <timer0_millis+0x2>
     7bc:	b0 93 73 02 	sts	0x0273, r27	; 0x800273 <timer0_millis+0x3>
     7c0:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <timer0_overflow_count>
     7c4:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <timer0_overflow_count+0x1>
     7c8:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <timer0_overflow_count+0x2>
     7cc:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <timer0_overflow_count+0x3>
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	a1 1d       	adc	r26, r1
     7d4:	b1 1d       	adc	r27, r1
     7d6:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <timer0_overflow_count>
     7da:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <timer0_overflow_count+0x1>
     7de:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <timer0_overflow_count+0x2>
     7e2:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <timer0_overflow_count+0x3>
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	3f 91       	pop	r19
     7f0:	2f 91       	pop	r18
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti
     7fc:	26 e8       	ldi	r18, 0x86	; 134
     7fe:	23 0f       	add	r18, r19
     800:	02 96       	adiw	r24, 0x02	; 2
     802:	a1 1d       	adc	r26, r1
     804:	b1 1d       	adc	r27, r1
     806:	d2 cf       	rjmp	.-92     	; 0x7ac <__vector_16+0x38>

00000808 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     808:	82 30       	cpi	r24, 0x02	; 2
     80a:	91 05       	cpc	r25, r1
     80c:	38 f0       	brcs	.+14     	; 0x81c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     816:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <delayMicroseconds+0x10>
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
     81c:	08 95       	ret

0000081e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     81e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     820:	84 b5       	in	r24, 0x24	; 36
     822:	82 60       	ori	r24, 0x02	; 2
     824:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     826:	84 b5       	in	r24, 0x24	; 36
     828:	81 60       	ori	r24, 0x01	; 1
     82a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     82c:	85 b5       	in	r24, 0x25	; 37
     82e:	82 60       	ori	r24, 0x02	; 2
     830:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     832:	85 b5       	in	r24, 0x25	; 37
     834:	81 60       	ori	r24, 0x01	; 1
     836:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     838:	ee e6       	ldi	r30, 0x6E	; 110
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	81 60       	ori	r24, 0x01	; 1
     840:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     842:	e1 e8       	ldi	r30, 0x81	; 129
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     848:	80 81       	ld	r24, Z
     84a:	82 60       	ori	r24, 0x02	; 2
     84c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     84e:	80 81       	ld	r24, Z
     850:	81 60       	ori	r24, 0x01	; 1
     852:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     854:	e0 e8       	ldi	r30, 0x80	; 128
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	81 60       	ori	r24, 0x01	; 1
     85c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     85e:	e1 eb       	ldi	r30, 0xB1	; 177
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	84 60       	ori	r24, 0x04	; 4
     866:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     868:	e0 eb       	ldi	r30, 0xB0	; 176
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	81 60       	ori	r24, 0x01	; 1
     870:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     872:	ea e7       	ldi	r30, 0x7A	; 122
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	84 60       	ori	r24, 0x04	; 4
     87a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     87c:	80 81       	ld	r24, Z
     87e:	82 60       	ori	r24, 0x02	; 2
     880:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     882:	80 81       	ld	r24, Z
     884:	81 60       	ori	r24, 0x01	; 1
     886:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     888:	80 81       	ld	r24, Z
     88a:	80 68       	ori	r24, 0x80	; 128
     88c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     88e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
#endif
}
     892:	08 95       	ret

00000894 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     894:	83 30       	cpi	r24, 0x03	; 3
     896:	81 f0       	breq	.+32     	; 0x8b8 <turnOffPWM+0x24>
     898:	28 f4       	brcc	.+10     	; 0x8a4 <turnOffPWM+0x10>
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	99 f0       	breq	.+38     	; 0x8c4 <turnOffPWM+0x30>
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	a9 f0       	breq	.+42     	; 0x8cc <turnOffPWM+0x38>
     8a2:	08 95       	ret
     8a4:	87 30       	cpi	r24, 0x07	; 7
     8a6:	a9 f0       	breq	.+42     	; 0x8d2 <turnOffPWM+0x3e>
     8a8:	88 30       	cpi	r24, 0x08	; 8
     8aa:	c9 f0       	breq	.+50     	; 0x8de <turnOffPWM+0x4a>
     8ac:	84 30       	cpi	r24, 0x04	; 4
     8ae:	b1 f4       	brne	.+44     	; 0x8dc <turnOffPWM+0x48>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     8b0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     8b4:	8f 7d       	andi	r24, 0xDF	; 223
     8b6:	03 c0       	rjmp	.+6      	; 0x8be <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     8b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     8bc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     8be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     8c2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     8c4:	84 b5       	in	r24, 0x24	; 36
     8c6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     8c8:	84 bd       	out	0x24, r24	; 36
     8ca:	08 95       	ret
     8cc:	84 b5       	in	r24, 0x24	; 36
     8ce:	8f 7d       	andi	r24, 0xDF	; 223
     8d0:	fb cf       	rjmp	.-10     	; 0x8c8 <turnOffPWM+0x34>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     8d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     8d6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     8d8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
     8dc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     8de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     8e2:	8f 7d       	andi	r24, 0xDF	; 223
     8e4:	f9 cf       	rjmp	.-14     	; 0x8d8 <turnOffPWM+0x44>

000008e6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	fc 01       	movw	r30, r24
     8ee:	e4 58       	subi	r30, 0x84	; 132
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     8f4:	80 57       	subi	r24, 0x70	; 112
     8f6:	9f 4f       	sbci	r25, 0xFF	; 255
     8f8:	fc 01       	movw	r30, r24
     8fa:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     8fc:	88 23       	and	r24, r24
     8fe:	c9 f0       	breq	.+50     	; 0x932 <__stack+0x33>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	fc 01       	movw	r30, r24
     908:	e2 55       	subi	r30, 0x52	; 82
     90a:	ff 4f       	sbci	r31, 0xFF	; 255
     90c:	a5 91       	lpm	r26, Z+
     90e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     910:	fc 01       	movw	r30, r24
     912:	ec 55       	subi	r30, 0x5C	; 92
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	c5 91       	lpm	r28, Z+
     918:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     91a:	61 11       	cpse	r22, r1
     91c:	0d c0       	rjmp	.+26     	; 0x938 <__stack+0x39>
		uint8_t oldSREG = SREG;
     91e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     920:	f8 94       	cli
		*reg &= ~bit;
     922:	8c 91       	ld	r24, X
     924:	20 95       	com	r18
     926:	82 23       	and	r24, r18
     928:	8c 93       	st	X, r24
		*out &= ~bit;
     92a:	88 81       	ld	r24, Y
     92c:	28 23       	and	r18, r24
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out |= bit;
     92e:	28 83       	st	Y, r18
		SREG = oldSREG;
     930:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     938:	62 30       	cpi	r22, 0x02	; 2
     93a:	51 f4       	brne	.+20     	; 0x950 <__stack+0x51>
		uint8_t oldSREG = SREG;
     93c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     93e:	f8 94       	cli
		*reg &= ~bit;
     940:	3c 91       	ld	r19, X
     942:	82 2f       	mov	r24, r18
     944:	80 95       	com	r24
     946:	83 23       	and	r24, r19
     948:	8c 93       	st	X, r24
		*out |= bit;
     94a:	e8 81       	ld	r30, Y
     94c:	2e 2b       	or	r18, r30
     94e:	ef cf       	rjmp	.-34     	; 0x92e <__stack+0x2f>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     950:	8f b7       	in	r24, 0x3f	; 63
                cli();
     952:	f8 94       	cli
		*reg |= bit;
     954:	ec 91       	ld	r30, X
     956:	2e 2b       	or	r18, r30
     958:	2c 93       	st	X, r18
		SREG = oldSREG;
     95a:	8f bf       	out	0x3f, r24	; 63
     95c:	ea cf       	rjmp	.-44     	; 0x932 <__stack+0x33>

0000095e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     964:	28 2f       	mov	r18, r24
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	f9 01       	movw	r30, r18
     96a:	e8 59       	subi	r30, 0x98	; 152
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     970:	f9 01       	movw	r30, r18
     972:	e4 58       	subi	r30, 0x84	; 132
     974:	ff 4f       	sbci	r31, 0xFF	; 255
     976:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     978:	f9 01       	movw	r30, r18
     97a:	e0 57       	subi	r30, 0x70	; 112
     97c:	ff 4f       	sbci	r31, 0xFF	; 255
     97e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     980:	cc 23       	and	r28, r28
     982:	a9 f0       	breq	.+42     	; 0x9ae <digitalWrite+0x50>
     984:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     986:	81 11       	cpse	r24, r1
     988:	0e 94 4a 04 	call	0x894	; 0x894 <turnOffPWM>

	out = portOutputRegister(port);
     98c:	ec 2f       	mov	r30, r28
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	ec 55       	subi	r30, 0x5C	; 92
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	a5 91       	lpm	r26, Z+
     99a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     99c:	8f b7       	in	r24, 0x3f	; 63
	cli();
     99e:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     9a0:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     9a2:	11 11       	cpse	r17, r1
     9a4:	08 c0       	rjmp	.+16     	; 0x9b6 <digitalWrite+0x58>
		*out &= ~bit;
     9a6:	d0 95       	com	r29
     9a8:	de 23       	and	r29, r30
	} else {
		*out |= bit;
     9aa:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     9ac:	8f bf       	out	0x3f, r24	; 63
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	08 95       	ret
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
     9b6:	de 2b       	or	r29, r30
     9b8:	f8 cf       	rjmp	.-16     	; 0x9aa <digitalWrite+0x4c>

000009ba <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     9ba:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     9bc:	91 8d       	ldd	r25, Z+25	; 0x19
     9be:	22 8d       	ldd	r18, Z+26	; 0x1a
     9c0:	89 2f       	mov	r24, r25
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	80 5c       	subi	r24, 0xC0	; 192
     9c6:	9f 4f       	sbci	r25, 0xFF	; 255
     9c8:	82 1b       	sub	r24, r18
     9ca:	91 09       	sbc	r25, r1
}
     9cc:	8f 73       	andi	r24, 0x3F	; 63
     9ce:	99 27       	eor	r25, r25
     9d0:	08 95       	ret

000009d2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     9d2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     9d4:	91 8d       	ldd	r25, Z+25	; 0x19
     9d6:	82 8d       	ldd	r24, Z+26	; 0x1a
     9d8:	98 17       	cp	r25, r24
     9da:	31 f0       	breq	.+12     	; 0x9e8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     9dc:	82 8d       	ldd	r24, Z+26	; 0x1a
     9de:	e8 0f       	add	r30, r24
     9e0:	f1 1d       	adc	r31, r1
     9e2:	85 8d       	ldd	r24, Z+29	; 0x1d
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     9ec:	08 95       	ret

000009ee <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     9ee:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     9f0:	91 8d       	ldd	r25, Z+25	; 0x19
     9f2:	82 8d       	ldd	r24, Z+26	; 0x1a
     9f4:	98 17       	cp	r25, r24
     9f6:	61 f0       	breq	.+24     	; 0xa10 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     9f8:	a2 8d       	ldd	r26, Z+26	; 0x1a
     9fa:	ae 0f       	add	r26, r30
     9fc:	bf 2f       	mov	r27, r31
     9fe:	b1 1d       	adc	r27, r1
     a00:	5d 96       	adiw	r26, 0x1d	; 29
     a02:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     a04:	92 8d       	ldd	r25, Z+26	; 0x1a
     a06:	9f 5f       	subi	r25, 0xFF	; 255
     a08:	9f 73       	andi	r25, 0x3F	; 63
     a0a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     a14:	08 95       	ret

00000a16 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     a16:	fc 01       	movw	r30, r24
     a18:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     a1a:	44 8d       	ldd	r20, Z+28	; 0x1c
     a1c:	25 2f       	mov	r18, r21
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	84 2f       	mov	r24, r20
     a22:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     a24:	82 1b       	sub	r24, r18
     a26:	93 0b       	sbc	r25, r19
     a28:	54 17       	cp	r21, r20
     a2a:	10 f0       	brcs	.+4      	; 0xa30 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     a2c:	cf 96       	adiw	r24, 0x3f	; 63
     a2e:	08 95       	ret
  return tail - head - 1;
     a30:	01 97       	sbiw	r24, 0x01	; 1
}
     a32:	08 95       	ret

00000a34 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a34:	81 e7       	ldi	r24, 0x71	; 113
     a36:	96 e0       	ldi	r25, 0x06	; 6
     a38:	89 2b       	or	r24, r25
     a3a:	49 f0       	breq	.+18     	; 0xa4e <_Z14serialEventRunv+0x1a>
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	89 2b       	or	r24, r25
     a42:	29 f0       	breq	.+10     	; 0xa4e <_Z14serialEventRunv+0x1a>
     a44:	0e 94 71 06 	call	0xce2	; 0xce2 <_Z17Serial0_availablev>
     a48:	81 11       	cpse	r24, r1
     a4a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     a4e:	08 95       	ret

00000a50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     a50:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     a52:	a4 8d       	ldd	r26, Z+28	; 0x1c
     a54:	a8 0f       	add	r26, r24
     a56:	b9 2f       	mov	r27, r25
     a58:	b1 1d       	adc	r27, r1
     a5a:	a3 5a       	subi	r26, 0xA3	; 163
     a5c:	bf 4f       	sbci	r27, 0xFF	; 255
     a5e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     a60:	84 8d       	ldd	r24, Z+28	; 0x1c
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	8f 73       	andi	r24, 0x3F	; 63
     a68:	99 27       	eor	r25, r25
     a6a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     a6c:	a6 89       	ldd	r26, Z+22	; 0x16
     a6e:	b7 89       	ldd	r27, Z+23	; 0x17
     a70:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a72:	a0 89       	ldd	r26, Z+16	; 0x10
     a74:	b1 89       	ldd	r27, Z+17	; 0x11
     a76:	8c 91       	ld	r24, X
     a78:	83 70       	andi	r24, 0x03	; 3
     a7a:	80 64       	ori	r24, 0x40	; 64
     a7c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     a7e:	93 8d       	ldd	r25, Z+27	; 0x1b
     a80:	84 8d       	ldd	r24, Z+28	; 0x1c
     a82:	98 13       	cpse	r25, r24
     a84:	06 c0       	rjmp	.+12     	; 0xa92 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     a86:	02 88       	ldd	r0, Z+18	; 0x12
     a88:	f3 89       	ldd	r31, Z+19	; 0x13
     a8a:	e0 2d       	mov	r30, r0
     a8c:	80 81       	ld	r24, Z
     a8e:	8f 7d       	andi	r24, 0xDF	; 223
     a90:	80 83       	st	Z, r24
  }
}
     a92:	08 95       	ret

00000a94 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a9a:	88 8d       	ldd	r24, Y+24	; 0x18
     a9c:	88 23       	and	r24, r24
     a9e:	b9 f0       	breq	.+46     	; 0xace <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     aa0:	aa 89       	ldd	r26, Y+18	; 0x12
     aa2:	bb 89       	ldd	r27, Y+19	; 0x13
     aa4:	e8 89       	ldd	r30, Y+16	; 0x10
     aa6:	f9 89       	ldd	r31, Y+17	; 0x11
     aa8:	8c 91       	ld	r24, X
     aaa:	85 fd       	sbrc	r24, 5
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <_ZN14HardwareSerial5flushEv+0x20>
     aae:	80 81       	ld	r24, Z
     ab0:	86 fd       	sbrc	r24, 6
     ab2:	0d c0       	rjmp	.+26     	; 0xace <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	07 fc       	sbrc	r0, 7
     ab8:	f7 cf       	rjmp	.-18     	; 0xaa8 <_ZN14HardwareSerial5flushEv+0x14>
     aba:	8c 91       	ld	r24, X
     abc:	85 ff       	sbrs	r24, 5
     abe:	f2 cf       	rjmp	.-28     	; 0xaa4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     ac0:	80 81       	ld	r24, Z
     ac2:	85 ff       	sbrs	r24, 5
     ac4:	ed cf       	rjmp	.-38     	; 0xaa0 <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
     ac6:	ce 01       	movw	r24, r28
     ac8:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     acc:	e9 cf       	rjmp	.-46     	; 0xaa0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
  _written = true;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     ae6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ae8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     aea:	98 13       	cpse	r25, r24
     aec:	1a c0       	rjmp	.+52     	; 0xb22 <_ZN14HardwareSerial5writeEh+0x4e>
     aee:	e8 89       	ldd	r30, Y+16	; 0x10
     af0:	f9 89       	ldd	r31, Y+17	; 0x11
     af2:	80 81       	ld	r24, Z
     af4:	85 ff       	sbrs	r24, 5
     af6:	15 c0       	rjmp	.+42     	; 0xb22 <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     af8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     afa:	f8 94       	cli
      *_udr = c;
     afc:	ee 89       	ldd	r30, Y+22	; 0x16
     afe:	ff 89       	ldd	r31, Y+23	; 0x17
     b00:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     b02:	e8 89       	ldd	r30, Y+16	; 0x10
     b04:	f9 89       	ldd	r31, Y+17	; 0x11
     b06:	80 81       	ld	r24, Z
     b08:	83 70       	andi	r24, 0x03	; 3
     b0a:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     b0c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b0e:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	08 95       	ret
     b22:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     b24:	0b 8d       	ldd	r16, Y+27	; 0x1b
     b26:	10 e0       	ldi	r17, 0x00	; 0
     b28:	0f 5f       	subi	r16, 0xFF	; 255
     b2a:	1f 4f       	sbci	r17, 0xFF	; 255
     b2c:	0f 73       	andi	r16, 0x3F	; 63
     b2e:	11 27       	eor	r17, r17
     b30:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     b32:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b34:	8e 11       	cpse	r24, r14
     b36:	0c c0       	rjmp	.+24     	; 0xb50 <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	07 fc       	sbrc	r0, 7
     b3c:	fa cf       	rjmp	.-12     	; 0xb32 <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     b3e:	e8 89       	ldd	r30, Y+16	; 0x10
     b40:	f9 89       	ldd	r31, Y+17	; 0x11
     b42:	80 81       	ld	r24, Z
     b44:	85 ff       	sbrs	r24, 5
     b46:	f5 cf       	rjmp	.-22     	; 0xb32 <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
     b48:	ce 01       	movw	r24, r28
     b4a:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b4e:	f1 cf       	rjmp	.-30     	; 0xb32 <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     b50:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b52:	ec 0f       	add	r30, r28
     b54:	fd 2f       	mov	r31, r29
     b56:	f1 1d       	adc	r31, r1
     b58:	e3 5a       	subi	r30, 0xA3	; 163
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     b5e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b60:	f8 94       	cli
    _tx_buffer_head = i;
     b62:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     b64:	ea 89       	ldd	r30, Y+18	; 0x12
     b66:	fb 89       	ldd	r31, Y+19	; 0x13
     b68:	80 81       	ld	r24, Z
     b6a:	80 62       	ori	r24, 0x20	; 32
     b6c:	cf cf       	rjmp	.-98     	; 0xb0c <_ZN14HardwareSerial5writeEh+0x38>

00000b6e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     b6e:	cf 92       	push	r12
     b70:	df 92       	push	r13
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ec 01       	movw	r28, r24
     b7e:	6a 01       	movw	r12, r20
     b80:	7b 01       	movw	r14, r22
     b82:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     b84:	e8 89       	ldd	r30, Y+16	; 0x10
     b86:	f9 89       	ldd	r31, Y+17	; 0x11
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b8c:	c1 14       	cp	r12, r1
     b8e:	81 ee       	ldi	r24, 0xE1	; 225
     b90:	d8 06       	cpc	r13, r24
     b92:	e1 04       	cpc	r14, r1
     b94:	f1 04       	cpc	r15, r1
     b96:	a1 f0       	breq	.+40     	; 0xbc0 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	79 e0       	ldi	r23, 0x09	; 9
     b9c:	8d e3       	ldi	r24, 0x3D	; 61
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a7 01       	movw	r20, r14
     ba2:	96 01       	movw	r18, r12
     ba4:	0e 94 3e 0c 	call	0x187c	; 0x187c <__udivmodsi4>
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	31 09       	sbc	r19, r1
     bac:	41 09       	sbc	r20, r1
     bae:	51 09       	sbc	r21, r1
     bb0:	56 95       	lsr	r21
     bb2:	47 95       	ror	r20
     bb4:	37 95       	ror	r19
     bb6:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     bb8:	21 15       	cp	r18, r1
     bba:	80 e1       	ldi	r24, 0x10	; 16
     bbc:	38 07       	cpc	r19, r24
     bbe:	98 f0       	brcs	.+38     	; 0xbe6 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
     bc0:	e8 89       	ldd	r30, Y+16	; 0x10
     bc2:	f9 89       	ldd	r31, Y+17	; 0x11
     bc4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     bc6:	60 e8       	ldi	r22, 0x80	; 128
     bc8:	74 e8       	ldi	r23, 0x84	; 132
     bca:	8e e1       	ldi	r24, 0x1E	; 30
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	a7 01       	movw	r20, r14
     bd0:	96 01       	movw	r18, r12
     bd2:	0e 94 3e 0c 	call	0x187c	; 0x187c <__udivmodsi4>
     bd6:	21 50       	subi	r18, 0x01	; 1
     bd8:	31 09       	sbc	r19, r1
     bda:	41 09       	sbc	r20, r1
     bdc:	51 09       	sbc	r21, r1
     bde:	56 95       	lsr	r21
     be0:	47 95       	ror	r20
     be2:	37 95       	ror	r19
     be4:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     be6:	ec 85       	ldd	r30, Y+12	; 0x0c
     be8:	fd 85       	ldd	r31, Y+13	; 0x0d
     bea:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     bec:	ee 85       	ldd	r30, Y+14	; 0x0e
     bee:	ff 85       	ldd	r31, Y+15	; 0x0f
     bf0:	20 83       	st	Z, r18

  _written = false;
     bf2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     bf4:	ec 89       	ldd	r30, Y+20	; 0x14
     bf6:	fd 89       	ldd	r31, Y+21	; 0x15
     bf8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     bfa:	ea 89       	ldd	r30, Y+18	; 0x12
     bfc:	fb 89       	ldd	r31, Y+19	; 0x13
     bfe:	80 81       	ld	r24, Z
     c00:	80 61       	ori	r24, 0x10	; 16
     c02:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     c04:	ea 89       	ldd	r30, Y+18	; 0x12
     c06:	fb 89       	ldd	r31, Y+19	; 0x13
     c08:	80 81       	ld	r24, Z
     c0a:	88 60       	ori	r24, 0x08	; 8
     c0c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     c0e:	ea 89       	ldd	r30, Y+18	; 0x12
     c10:	fb 89       	ldd	r31, Y+19	; 0x13
     c12:	80 81       	ld	r24, Z
     c14:	80 68       	ori	r24, 0x80	; 128
     c16:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     c18:	ea 89       	ldd	r30, Y+18	; 0x12
     c1a:	fb 89       	ldd	r31, Y+19	; 0x13
     c1c:	80 81       	ld	r24, Z
     c1e:	8f 7d       	andi	r24, 0xDF	; 223
     c20:	80 83       	st	Z, r24
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	cf 90       	pop	r12
     c30:	08 95       	ret

00000c32 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	2f 93       	push	r18
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	ef 93       	push	r30
     c44:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     c46:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <Serial+0x10>
     c4a:	f0 91 89 02 	lds	r31, 0x0289	; 0x800289 <Serial+0x11>
     c4e:	80 81       	ld	r24, Z
     c50:	e0 91 8e 02 	lds	r30, 0x028E	; 0x80028e <Serial+0x16>
     c54:	f0 91 8f 02 	lds	r31, 0x028F	; 0x80028f <Serial+0x17>
     c58:	82 fd       	sbrc	r24, 2
     c5a:	1b c0       	rjmp	.+54     	; 0xc92 <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     c5c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     c5e:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <Serial+0x19>
     c62:	8f 5f       	subi	r24, 0xFF	; 255
     c64:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     c66:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <Serial+0x1a>
     c6a:	82 17       	cp	r24, r18
     c6c:	41 f0       	breq	.+16     	; 0xc7e <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
     c6e:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <Serial+0x19>
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	e8 58       	subi	r30, 0x88	; 136
     c76:	fd 4f       	sbci	r31, 0xFD	; 253
     c78:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     c7a:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <Serial+0x19>
    Serial._rx_complete_irq();
  }
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	9f 91       	pop	r25
     c84:	8f 91       	pop	r24
     c86:	2f 91       	pop	r18
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     c92:	80 81       	ld	r24, Z
     c94:	f4 cf       	rjmp	.-24     	; 0xc7e <__vector_18+0x4c>

00000c96 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     c96:	1f 92       	push	r1
     c98:	0f 92       	push	r0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	2f 93       	push	r18
     ca2:	3f 93       	push	r19
     ca4:	4f 93       	push	r20
     ca6:	5f 93       	push	r21
     ca8:	6f 93       	push	r22
     caa:	7f 93       	push	r23
     cac:	8f 93       	push	r24
     cae:	9f 93       	push	r25
     cb0:	af 93       	push	r26
     cb2:	bf 93       	push	r27
     cb4:	ef 93       	push	r30
     cb6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     cb8:	88 e7       	ldi	r24, 0x78	; 120
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	0f 90       	pop	r0
     cde:	1f 90       	pop	r1
     ce0:	18 95       	reti

00000ce2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     ce2:	88 e7       	ldi	r24, 0x78	; 120
     ce4:	92 e0       	ldi	r25, 0x02	; 2
     ce6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN14HardwareSerial9availableEv>
     cea:	21 e0       	ldi	r18, 0x01	; 1
     cec:	89 2b       	or	r24, r25
     cee:	09 f4       	brne	.+2      	; 0xcf2 <_Z17Serial0_availablev+0x10>
     cf0:	20 e0       	ldi	r18, 0x00	; 0
}
     cf2:	82 2f       	mov	r24, r18
     cf4:	08 95       	ret

00000cf6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     cf6:	e8 e7       	ldi	r30, 0x78	; 120
     cf8:	f2 e0       	ldi	r31, 0x02	; 2
     cfa:	13 82       	std	Z+3, r1	; 0x03
     cfc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     cfe:	88 ee       	ldi	r24, 0xE8	; 232
     d00:	93 e0       	ldi	r25, 0x03	; 3
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	84 83       	std	Z+4, r24	; 0x04
     d08:	95 83       	std	Z+5, r25	; 0x05
     d0a:	a6 83       	std	Z+6, r26	; 0x06
     d0c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     d0e:	82 e4       	ldi	r24, 0x42	; 66
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	80 83       	st	Z, r24
     d16:	85 ec       	ldi	r24, 0xC5	; 197
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	95 87       	std	Z+13, r25	; 0x0d
     d1c:	84 87       	std	Z+12, r24	; 0x0c
     d1e:	84 ec       	ldi	r24, 0xC4	; 196
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	97 87       	std	Z+15, r25	; 0x0f
     d24:	86 87       	std	Z+14, r24	; 0x0e
     d26:	80 ec       	ldi	r24, 0xC0	; 192
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	91 8b       	std	Z+17, r25	; 0x11
     d2c:	80 8b       	std	Z+16, r24	; 0x10
     d2e:	81 ec       	ldi	r24, 0xC1	; 193
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	93 8b       	std	Z+19, r25	; 0x13
     d34:	82 8b       	std	Z+18, r24	; 0x12
     d36:	82 ec       	ldi	r24, 0xC2	; 194
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	95 8b       	std	Z+21, r25	; 0x15
     d3c:	84 8b       	std	Z+20, r24	; 0x14
     d3e:	86 ec       	ldi	r24, 0xC6	; 198
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	97 8b       	std	Z+23, r25	; 0x17
     d44:	86 8b       	std	Z+22, r24	; 0x16
     d46:	11 8e       	std	Z+25, r1	; 0x19
     d48:	12 8e       	std	Z+26, r1	; 0x1a
     d4a:	13 8e       	std	Z+27, r1	; 0x1b
     d4c:	14 8e       	std	Z+28, r1	; 0x1c
     d4e:	08 95       	ret

00000d50 <_ZN5Print5writeEPKhj>:
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	6c 01       	movw	r12, r24
     d66:	7b 01       	movw	r14, r22
     d68:	8b 01       	movw	r16, r22
     d6a:	04 0f       	add	r16, r20
     d6c:	15 1f       	adc	r17, r21
     d6e:	eb 01       	movw	r28, r22
     d70:	5e 01       	movw	r10, r28
     d72:	ae 18       	sub	r10, r14
     d74:	bf 08       	sbc	r11, r15
     d76:	c0 17       	cp	r28, r16
     d78:	d1 07       	cpc	r29, r17
     d7a:	59 f0       	breq	.+22     	; 0xd92 <_ZN5Print5writeEPKhj+0x42>
     d7c:	69 91       	ld	r22, Y+
     d7e:	d6 01       	movw	r26, r12
     d80:	ed 91       	ld	r30, X+
     d82:	fc 91       	ld	r31, X
     d84:	01 90       	ld	r0, Z+
     d86:	f0 81       	ld	r31, Z
     d88:	e0 2d       	mov	r30, r0
     d8a:	c6 01       	movw	r24, r12
     d8c:	09 95       	icall
     d8e:	89 2b       	or	r24, r25
     d90:	79 f7       	brne	.-34     	; 0xd70 <_ZN5Print5writeEPKhj+0x20>
     d92:	c5 01       	movw	r24, r10
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	bf 90       	pop	r11
     da6:	af 90       	pop	r10
     da8:	08 95       	ret

00000daa <_ZN5Print5writeEPKc.part.2>:
     daa:	fb 01       	movw	r30, r22
     dac:	01 90       	ld	r0, Z+
     dae:	00 20       	and	r0, r0
     db0:	e9 f7       	brne	.-6      	; 0xdac <_ZN5Print5writeEPKc.part.2+0x2>
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	af 01       	movw	r20, r30
     db6:	46 1b       	sub	r20, r22
     db8:	57 0b       	sbc	r21, r23
     dba:	dc 01       	movw	r26, r24
     dbc:	ed 91       	ld	r30, X+
     dbe:	fc 91       	ld	r31, X
     dc0:	02 80       	ldd	r0, Z+2	; 0x02
     dc2:	f3 81       	ldd	r31, Z+3	; 0x03
     dc4:	e0 2d       	mov	r30, r0
     dc6:	09 94       	ijmp

00000dc8 <_ZN5Print5printEPKc>:
     dc8:	61 15       	cp	r22, r1
     dca:	71 05       	cpc	r23, r1
     dcc:	11 f0       	breq	.+4      	; 0xdd2 <_ZN5Print5printEPKc+0xa>
     dce:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <_ZN5Print5writeEPKc.part.2>
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	08 95       	ret

00000dd8 <_ZN5Print7printlnEv>:
     dd8:	62 e5       	ldi	r22, 0x52	; 82
     dda:	71 e0       	ldi	r23, 0x01	; 1
     ddc:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <_ZN5Print5writeEPKc.part.2>

00000de0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	8c 01       	movw	r16, r24
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     dea:	d0 e0       	ldi	r29, 0x00	; 0
     dec:	c0 e0       	ldi	r28, 0x00	; 0
     dee:	61 15       	cp	r22, r1
     df0:	71 05       	cpc	r23, r1
     df2:	19 f0       	breq	.+6      	; 0xdfa <_ZN5Print7printlnEPKc+0x1a>
     df4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN5Print5writeEPKc.part.2>
     df8:	ec 01       	movw	r28, r24
  size_t n = print(c);
  n += println();
     dfa:	c8 01       	movw	r24, r16
     dfc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN5Print7printlnEv>
  return n;
}
     e00:	8c 0f       	add	r24, r28
     e02:	9d 1f       	adc	r25, r29
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <StartOS>:
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
     e0e:	4f 92       	push	r4
     e10:	5f 92       	push	r5
     e12:	6f 92       	push	r6
     e14:	7f 92       	push	r7
     e16:	8f 92       	push	r8
     e18:	9f 92       	push	r9
     e1a:	af 92       	push	r10
     e1c:	bf 92       	push	r11
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <StartOS+0x22>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	00 91 90 01 	lds	r16, 0x0190	; 0x800190 <CDB>
     e38:	10 91 91 01 	lds	r17, 0x0191	; 0x800191 <CDB+0x1>
     e3c:	9f b7       	in	r25, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	d8 01       	movw	r26, r16
     e42:	18 96       	adiw	r26, 0x08	; 8
     e44:	2d 91       	ld	r18, X+
     e46:	3c 91       	ld	r19, X
     e48:	23 2b       	or	r18, r19
     e4a:	09 f0       	breq	.+2      	; 0xe4e <StartOS+0x40>
     e4c:	a4 c0       	rjmp	.+328    	; 0xf96 <StartOS+0x188>
     e4e:	88 2e       	mov	r8, r24
     e50:	84 e5       	ldi	r24, 0x54	; 84
     e52:	9a e0       	ldi	r25, 0x0A	; 10
     e54:	9a 83       	std	Y+2, r25	; 0x02
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	0e 94 94 0a 	call	0x1528	; 0x1528 <osEE_avr8_system_timer_init>
     e5c:	a0 90 94 01 	lds	r10, 0x0194	; 0x800194 <CDB+0x4>
     e60:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <CDB+0x5>
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	f8 01       	movw	r30, r16
     e6a:	91 87       	std	Z+9, r25	; 0x09
     e6c:	80 87       	std	Z+8, r24	; 0x08
     e6e:	82 86       	std	Z+10, r8	; 0x0a
     e70:	e0 90 9c 01 	lds	r14, 0x019C	; 0x80019c <CDB+0xc>
     e74:	f0 90 9d 01 	lds	r15, 0x019D	; 0x80019d <CDB+0xd>
     e78:	d1 2c       	mov	r13, r1
     e7a:	c1 2c       	mov	r12, r1
     e7c:	f4 e0       	ldi	r31, 0x04	; 4
     e7e:	8f 9e       	mul	r8, r31
     e80:	40 01       	movw	r8, r0
     e82:	11 24       	eor	r1, r1
     e84:	e8 0c       	add	r14, r8
     e86:	f9 1c       	adc	r15, r9
     e88:	37 01       	movw	r6, r14
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	68 0e       	add	r6, r24
     e8e:	71 1c       	adc	r7, r1
     e90:	46 e0       	ldi	r20, 0x06	; 6
     e92:	54 2e       	mov	r5, r20
     e94:	f3 01       	movw	r30, r6
     e96:	80 81       	ld	r24, Z
     e98:	91 81       	ldd	r25, Z+1	; 0x01
     e9a:	c8 16       	cp	r12, r24
     e9c:	d9 06       	cpc	r13, r25
     e9e:	e0 f1       	brcs	.+120    	; 0xf18 <StartOS+0x10a>
     ea0:	e0 90 98 01 	lds	r14, 0x0198	; 0x800198 <CDB+0x8>
     ea4:	f0 90 99 01 	lds	r15, 0x0199	; 0x800199 <CDB+0x9>
     ea8:	38 01       	movw	r6, r16
     eaa:	f2 e0       	ldi	r31, 0x02	; 2
     eac:	6f 0e       	add	r6, r31
     eae:	71 1c       	adc	r7, r1
     eb0:	d1 2c       	mov	r13, r1
     eb2:	c1 2c       	mov	r12, r1
     eb4:	e8 0c       	add	r14, r8
     eb6:	f9 1c       	adc	r15, r9
     eb8:	27 01       	movw	r4, r14
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	48 0e       	add	r4, r24
     ebe:	51 1c       	adc	r5, r1
     ec0:	88 24       	eor	r8, r8
     ec2:	83 94       	inc	r8
     ec4:	91 2c       	mov	r9, r1
     ec6:	f2 01       	movw	r30, r4
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	c8 16       	cp	r12, r24
     ece:	d9 06       	cpc	r13, r25
     ed0:	e8 f1       	brcs	.+122    	; 0xf4c <StartOS+0x13e>
     ed2:	d8 01       	movw	r26, r16
     ed4:	18 96       	adiw	r26, 0x08	; 8
     ed6:	8d 91       	ld	r24, X+
     ed8:	9c 91       	ld	r25, X
     eda:	19 97       	sbiw	r26, 0x09	; 9
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	31 f4       	brne	.+12     	; 0xeec <StartOS+0xde>
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	19 96       	adiw	r26, 0x09	; 9
     ee6:	9c 93       	st	X, r25
     ee8:	8e 93       	st	-X, r24
     eea:	18 97       	sbiw	r26, 0x08	; 8
     eec:	f8 01       	movw	r30, r16
     eee:	80 85       	ldd	r24, Z+8	; 0x08
     ef0:	91 85       	ldd	r25, Z+9	; 0x09
     ef2:	02 97       	sbiw	r24, 0x02	; 2
     ef4:	41 f4       	brne	.+16     	; 0xf06 <StartOS+0xf8>
     ef6:	d5 01       	movw	r26, r10
     ef8:	12 96       	adiw	r26, 0x02	; 2
     efa:	6d 91       	ld	r22, X+
     efc:	7c 91       	ld	r23, X
     efe:	ab 01       	movw	r20, r22
     f00:	c5 01       	movw	r24, r10
     f02:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>
     f06:	f8 01       	movw	r30, r16
     f08:	80 85       	ldd	r24, Z+8	; 0x08
     f0a:	91 85       	ldd	r25, Z+9	; 0x09
     f0c:	02 97       	sbiw	r24, 0x02	; 2
     f0e:	09 f4       	brne	.+2      	; 0xf12 <StartOS+0x104>
     f10:	78 94       	sei
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	42 c0       	rjmp	.+132    	; 0xf9c <StartOS+0x18e>
     f18:	d7 01       	movw	r26, r14
     f1a:	ed 91       	ld	r30, X+
     f1c:	fc 91       	ld	r31, X
     f1e:	5c 9c       	mul	r5, r12
     f20:	c0 01       	movw	r24, r0
     f22:	5d 9c       	mul	r5, r13
     f24:	90 0d       	add	r25, r0
     f26:	11 24       	eor	r1, r1
     f28:	e8 0f       	add	r30, r24
     f2a:	f9 1f       	adc	r31, r25
     f2c:	a0 81       	ld	r26, Z
     f2e:	b1 81       	ldd	r27, Z+1	; 0x01
     f30:	24 81       	ldd	r18, Z+4	; 0x04
     f32:	35 81       	ldd	r19, Z+5	; 0x05
     f34:	42 81       	ldd	r20, Z+2	; 0x02
     f36:	53 81       	ldd	r21, Z+3	; 0x03
     f38:	bd 01       	movw	r22, r26
     f3a:	12 96       	adiw	r26, 0x02	; 2
     f3c:	8d 91       	ld	r24, X+
     f3e:	9c 91       	ld	r25, X
     f40:	0e 94 41 0a 	call	0x1482	; 0x1482 <osEE_alarm_set_rel>
     f44:	bf ef       	ldi	r27, 0xFF	; 255
     f46:	cb 1a       	sub	r12, r27
     f48:	db 0a       	sbc	r13, r27
     f4a:	a4 cf       	rjmp	.-184    	; 0xe94 <StartOS+0x86>
     f4c:	d7 01       	movw	r26, r14
     f4e:	ed 91       	ld	r30, X+
     f50:	fc 91       	ld	r31, X
     f52:	c6 01       	movw	r24, r12
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	e8 0f       	add	r30, r24
     f5a:	f9 1f       	adc	r31, r25
     f5c:	40 81       	ld	r20, Z
     f5e:	51 81       	ldd	r21, Z+1	; 0x01
     f60:	da 01       	movw	r26, r20
     f62:	14 96       	adiw	r26, 0x04	; 4
     f64:	ed 91       	ld	r30, X+
     f66:	fc 91       	ld	r31, X
     f68:	80 81       	ld	r24, Z
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	80 83       	st	Z, r24
     f6e:	93 82       	std	Z+3, r9	; 0x03
     f70:	82 82       	std	Z+2, r8	; 0x02
     f72:	f8 01       	movw	r30, r16
     f74:	64 81       	ldd	r22, Z+4	; 0x04
     f76:	75 81       	ldd	r23, Z+5	; 0x05
     f78:	db 01       	movw	r26, r22
     f7a:	8d 91       	ld	r24, X+
     f7c:	9c 91       	ld	r25, X
     f7e:	11 97       	sbiw	r26, 0x01	; 1
     f80:	95 83       	std	Z+5, r25	; 0x05
     f82:	84 83       	std	Z+4, r24	; 0x04
     f84:	1d 92       	st	X+, r1
     f86:	1c 92       	st	X, r1
     f88:	c3 01       	movw	r24, r6
     f8a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <osEE_scheduler_rq_insert>
     f8e:	bf ef       	ldi	r27, 0xFF	; 255
     f90:	cb 1a       	sub	r12, r27
     f92:	db 0a       	sbc	r13, r27
     f94:	98 cf       	rjmp	.-208    	; 0xec6 <StartOS+0xb8>
     f96:	9f bf       	out	0x3f, r25	; 63
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	df 90       	pop	r13
     fae:	cf 90       	pop	r12
     fb0:	bf 90       	pop	r11
     fb2:	af 90       	pop	r10
     fb4:	9f 90       	pop	r9
     fb6:	8f 90       	pop	r8
     fb8:	7f 90       	pop	r7
     fba:	6f 90       	pop	r6
     fbc:	5f 90       	pop	r5
     fbe:	4f 90       	pop	r4
     fc0:	08 95       	ret

00000fc2 <TerminateTask>:
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
     fc2:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <CDB>
     fc6:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <CDB+0x1>
     fca:	01 90       	ld	r0, Z+
     fcc:	f0 81       	ld	r31, Z
     fce:	e0 2d       	mov	r30, r0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     fd0:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     fd2:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
     fd4:	60 ef       	ldi	r22, 0xF0	; 240
     fd6:	77 e0       	ldi	r23, 0x07	; 7
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	93 81       	ldd	r25, Z+3	; 0x03
     fdc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <osEE_hal_terminate_ctx>

00000fe0 <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <osEE_scheduler_task_end+0x6>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
     fea:	ae 01       	movw	r20, r28
     fec:	4f 5f       	subi	r20, 0xFF	; 255
     fee:	5f 4f       	sbci	r21, 0xFF	; 255
     ff0:	60 e9       	ldi	r22, 0x90	; 144
     ff2:	71 e0       	ldi	r23, 0x01	; 1
     ff4:	8e e7       	ldi	r24, 0x7E	; 126
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 88 09 	call	0x1310	; 0x1310 <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
     ffc:	bc 01       	movw	r22, r24
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	0e 94 bb 0a 	call	0x1576	; 0x1576 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <osEE_scheduler_task_wrapper_restore>:
    p_ccb->p_lock_to_be_released = NULL;
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
    1010:	08 95       	ret

00001012 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    1012:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
    1014:	ec 81       	ldd	r30, Y+4	; 0x04
    1016:	fd 81       	ldd	r31, Y+5	; 0x05
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_prio < OSEE_ISR_ALL_PRIO) {
    1018:	81 81       	ldd	r24, Z+1	; 0x01
    101a:	8f 3f       	cpi	r24, 0xFF	; 255
    101c:	09 f0       	breq	.+2      	; 0x1020 <osEE_scheduler_task_wrapper_run+0xe>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
    101e:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
    1020:	e9 85       	ldd	r30, Y+9	; 0x09
    1022:	fa 85       	ldd	r31, Y+10	; 0x0a
    1024:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1026:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1028:	f8 94       	cli
    102a:	60 ef       	ldi	r22, 0xF0	; 240
    102c:	77 e0       	ldi	r23, 0x07	; 7
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	9b 81       	ldd	r25, Y+3	; 0x03
    1032:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <osEE_hal_terminate_ctx>

00001036 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    103e:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1040:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
    1042:	60 e9       	ldi	r22, 0x90	; 144
    1044:	71 e0       	ldi	r23, 0x01	; 1
    1046:	8e e7       	ldi	r24, 0x7E	; 126
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	0e 94 00 0a 	call	0x1400	; 0x1400 <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    104e:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    1050:	00 91 90 01 	lds	r16, 0x0190	; 0x800190 <CDB>
    1054:	10 91 91 01 	lds	r17, 0x0191	; 0x800191 <CDB+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    1058:	c0 91 92 01 	lds	r28, 0x0192	; 0x800192 <CDB+0x2>
    105c:	d0 91 93 01 	lds	r29, 0x0193	; 0x800193 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    1060:	f8 01       	movw	r30, r16
    1062:	80 85       	ldd	r24, Z+8	; 0x08
    1064:	91 85       	ldd	r25, Z+9	; 0x09
    1066:	82 30       	cpi	r24, 0x02	; 2
    1068:	91 05       	cpc	r25, r1
    106a:	51 f0       	breq	.+20     	; 0x1080 <osEE_idle_hook_wrapper+0x4a>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    106c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <CDB+0x4>
    1070:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <CDB+0x5>
}
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    107c:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    1080:	20 97       	sbiw	r28, 0x00	; 0
    1082:	89 f3       	breq	.-30     	; 0x1066 <osEE_idle_hook_wrapper+0x30>
      p_idle_hook();
    1084:	fe 01       	movw	r30, r28
    1086:	09 95       	icall
    1088:	eb cf       	rjmp	.-42     	; 0x1060 <osEE_idle_hook_wrapper+0x2a>

0000108a <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1092:	ec 01       	movw	r28, r24
    1094:	a8 81       	ld	r26, Y
    1096:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    1098:	eb 01       	movw	r28, r22
    109a:	e8 81       	ld	r30, Y
    109c:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    109e:	16 96       	adiw	r26, 0x06	; 6
    10a0:	cd 91       	ld	r28, X+
    10a2:	dc 91       	ld	r29, X
    10a4:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    10a6:	20 97       	sbiw	r28, 0x00	; 0
    10a8:	c1 f1       	breq	.+112    	; 0x111a <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    10ae:	30 97       	sbiw	r30, 0x00	; 0
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <osEE_scheduler_core_rq_preempt_stk+0x2a>
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    10b4:	ec 01       	movw	r28, r24
    10b6:	0c 81       	ldd	r16, Y+4	; 0x04
    10b8:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    10ba:	22 81       	ldd	r18, Z+2	; 0x02
    10bc:	33 81       	ldd	r19, Z+3	; 0x03
    10be:	e9 01       	movw	r28, r18
    10c0:	4c 81       	ldd	r20, Y+4	; 0x04
    10c2:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    10c4:	e8 01       	movw	r28, r16
    10c6:	39 81       	ldd	r19, Y+1	; 0x01
    10c8:	ea 01       	movw	r28, r20
    10ca:	29 81       	ldd	r18, Y+1	; 0x01
    10cc:	32 17       	cp	r19, r18
    10ce:	88 f5       	brcc	.+98     	; 0x1132 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    10d0:	22 e0       	ldi	r18, 0x02	; 2
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	e8 01       	movw	r28, r16
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    10d6:	3b 83       	std	Y+3, r19	; 0x03
    10d8:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    10da:	20 81       	ld	r18, Z
    10dc:	31 81       	ldd	r19, Z+1	; 0x01
    10de:	eb 01       	movw	r28, r22
    10e0:	39 83       	std	Y+1, r19	; 0x01
    10e2:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    10e4:	c2 81       	ldd	r28, Z+2	; 0x02
    10e6:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    10e8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ea:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    10ec:	16 96       	adiw	r26, 0x06	; 6
    10ee:	4d 91       	ld	r20, X+
    10f0:	5c 91       	ld	r21, X
    10f2:	17 97       	sbiw	r26, 0x07	; 7
    10f4:	51 83       	std	Z+1, r21	; 0x01
    10f6:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    10f8:	17 96       	adiw	r26, 0x07	; 7
    10fa:	fc 93       	st	X, r31
    10fc:	ee 93       	st	-X, r30
    10fe:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    1100:	cd 93       	st	X+, r28
    1102:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    1104:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    1106:	f9 01       	movw	r30, r18
    1108:	51 81       	ldd	r21, Z+1	; 0x01
    110a:	54 17       	cp	r21, r20
    110c:	08 f4       	brcc	.+2      	; 0x1110 <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
    110e:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	51 f0       	breq	.+20     	; 0x1132 <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    111e:	ec 01       	movw	r28, r24
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    1124:	ec 01       	movw	r28, r24
    1126:	4c 81       	ldd	r20, Y+4	; 0x04
    1128:	5d 81       	ldd	r21, Y+5	; 0x05
    112a:	22 e0       	ldi	r18, 0x02	; 2
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	ea 01       	movw	r28, r20
    1130:	d2 cf       	rjmp	.-92     	; 0x10d6 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	80 e0       	ldi	r24, 0x00	; 0
    p_ret_sn  = NULL;
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
    1136:	ec cf       	rjmp	.-40     	; 0x1110 <osEE_scheduler_core_rq_preempt_stk+0x86>

00001138 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    1138:	cf 92       	push	r12
    113a:	df 92       	push	r13
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    1148:	eb 01       	movw	r28, r22
    114a:	aa 81       	ldd	r26, Y+2	; 0x02
    114c:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    114e:	14 96       	adiw	r26, 0x04	; 4
    1150:	ed 91       	ld	r30, X+
    1152:	fc 91       	ld	r31, X
    1154:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1156:	41 15       	cp	r20, r1
    1158:	51 05       	cpc	r21, r1
    115a:	01 f1       	breq	.+64     	; 0x119c <osEE_sn_priority_insert+0x64>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    115c:	22 81       	ldd	r18, Z+2	; 0x02
    115e:	33 81       	ldd	r19, Z+3	; 0x03
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	d8 f0       	brcs	.+54     	; 0x119c <osEE_sn_priority_insert+0x64>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1166:	1b 96       	adiw	r26, 0x0b	; 11
    1168:	2c 91       	ld	r18, X
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    116a:	dc 01       	movw	r26, r24
    116c:	ed 91       	ld	r30, X+
    116e:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    1174:	30 97       	sbiw	r30, 0x00	; 0
    1176:	a1 f4       	brne	.+40     	; 0x11a0 <osEE_sn_priority_insert+0x68>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    1178:	10 97       	sbiw	r26, 0x00	; 0
    117a:	69 f1       	breq	.+90     	; 0x11d6 <osEE_sn_priority_insert+0x9e>
    p_prev->p_next = p_sn_new;
    117c:	6d 93       	st	X+, r22
    117e:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
    1184:	eb 01       	movw	r28, r22
    1186:	f9 83       	std	Y+1, r31	; 0x01
    1188:	e8 83       	st	Y, r30

  return head_changed;
}
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    119c:	21 81       	ldd	r18, Z+1	; 0x01
    119e:	e5 cf       	rjmp	.-54     	; 0x116a <osEE_sn_priority_insert+0x32>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    11a0:	02 81       	ldd	r16, Z+2	; 0x02
    11a2:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    11a4:	e8 01       	movw	r28, r16
    11a6:	cc 80       	ldd	r12, Y+4	; 0x04
    11a8:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    11aa:	41 15       	cp	r20, r1
    11ac:	51 05       	cpc	r21, r1
    11ae:	81 f0       	breq	.+32     	; 0x11d0 <osEE_sn_priority_insert+0x98>
    11b0:	e6 01       	movw	r28, r12
    11b2:	ea 80       	ldd	r14, Y+2	; 0x02
    11b4:	fb 80       	ldd	r15, Y+3	; 0x03
    11b6:	d2 e0       	ldi	r29, 0x02	; 2
    11b8:	ed 16       	cp	r14, r29
    11ba:	f1 04       	cpc	r15, r1
    11bc:	48 f0       	brcs	.+18     	; 0x11d0 <osEE_sn_priority_insert+0x98>
      prio_to_check = p_cur_tdb->ready_prio;
    11be:	e8 01       	movw	r28, r16
    11c0:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
    11c2:	32 17       	cp	r19, r18
    11c4:	c8 f2       	brcs	.-78     	; 0x1178 <osEE_sn_priority_insert+0x40>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    11c6:	df 01       	movw	r26, r30
    11c8:	01 90       	ld	r0, Z+
    11ca:	f0 81       	ld	r31, Z
    11cc:	e0 2d       	mov	r30, r0
    11ce:	d2 cf       	rjmp	.-92     	; 0x1174 <osEE_sn_priority_insert+0x3c>
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    11d0:	e6 01       	movw	r28, r12
    11d2:	39 81       	ldd	r19, Y+1	; 0x01
    11d4:	f6 cf       	rjmp	.-20     	; 0x11c2 <osEE_sn_priority_insert+0x8a>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    11d6:	dc 01       	movw	r26, r24
    11d8:	6d 93       	st	X+, r22
    11da:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	d1 cf       	rjmp	.-94     	; 0x1184 <osEE_sn_priority_insert+0x4c>

000011e2 <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    11e2:	fb 01       	movw	r30, r22
    11e4:	53 83       	std	Z+3, r21	; 0x03
    11e6:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    11e8:	41 e0       	ldi	r20, 0x01	; 1
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <osEE_sn_priority_insert>

000011f0 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    11fe:	fc 01       	movw	r30, r24
    1200:	c0 81       	ld	r28, Z
    1202:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    1204:	ee 80       	ldd	r14, Y+6	; 0x06
    1206:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    1208:	f7 01       	movw	r30, r14
    120a:	80 81       	ld	r24, Z
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	9f 83       	std	Y+7, r25	; 0x07
    1210:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    1212:	c8 01       	movw	r24, r16
    1214:	0e 94 45 08 	call	0x108a	; 0x108a <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    1218:	89 2b       	or	r24, r25
    121a:	41 f4       	brne	.+16     	; 0x122c <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    121c:	ee 81       	ldd	r30, Y+6	; 0x06
    121e:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    1220:	30 97       	sbiw	r30, 0x00	; 0
    1222:	61 f0       	breq	.+24     	; 0x123c <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
    1228:	99 83       	std	Y+1, r25	; 0x01
    122a:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    122c:	c7 01       	movw	r24, r14
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	08 95       	ret
      if ( p_curr_stk_sn != NULL ) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    123c:	f8 01       	movw	r30, r16
    123e:	84 81       	ldd	r24, Z+4	; 0x04
    1240:	95 81       	ldd	r25, Z+5	; 0x05
    1242:	f2 cf       	rjmp	.-28     	; 0x1228 <osEE_scheduler_core_pop_running+0x38>

00001244 <osEE_scheduler_task_activated>:
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
    1244:	cf 92       	push	r12
    1246:	df 92       	push	r13
    1248:	ef 92       	push	r14
    124a:	ff 92       	push	r15
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	da 01       	movw	r26, r20
    1256:	14 96       	adiw	r26, 0x04	; 4
    1258:	cd 90       	ld	r12, X+
    125a:	dc 90       	ld	r13, X
    125c:	15 97       	sbiw	r26, 0x05	; 5
    125e:	e6 01       	movw	r28, r12
    1260:	98 81       	ld	r25, Y
    1262:	1d 96       	adiw	r26, 0x0d	; 13
    1264:	8c 91       	ld	r24, X
    1266:	98 17       	cp	r25, r24
    1268:	08 f0       	brcs	.+2      	; 0x126c <osEE_scheduler_task_activated+0x28>
    126a:	4f c0       	rjmp	.+158    	; 0x130a <osEE_scheduler_task_activated+0xc6>
    126c:	db 01       	movw	r26, r22
    126e:	ed 91       	ld	r30, X+
    1270:	fc 91       	ld	r31, X
    1272:	00 81       	ld	r16, Z
    1274:	11 81       	ldd	r17, Z+1	; 0x01
    1276:	e8 01       	movw	r28, r16
    1278:	ec 80       	ldd	r14, Y+4	; 0x04
    127a:	fd 80       	ldd	r15, Y+5	; 0x05
    127c:	9f 5f       	subi	r25, 0xFF	; 255
    127e:	d6 01       	movw	r26, r12
    1280:	9c 93       	st	X, r25
    1282:	a4 81       	ldd	r26, Z+4	; 0x04
    1284:	b5 81       	ldd	r27, Z+5	; 0x05
    1286:	6d 91       	ld	r22, X+
    1288:	7c 91       	ld	r23, X
    128a:	11 97       	sbiw	r26, 0x01	; 1
    128c:	23 2b       	or	r18, r19
    128e:	49 f1       	breq	.+82     	; 0x12e2 <osEE_scheduler_task_activated+0x9e>
    1290:	e7 01       	movw	r28, r14
    1292:	99 81       	ldd	r25, Y+1	; 0x01
    1294:	e6 01       	movw	r28, r12
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	98 17       	cp	r25, r24
    129a:	18 f5       	brcc	.+70     	; 0x12e2 <osEE_scheduler_task_activated+0x9e>
    129c:	75 83       	std	Z+5, r23	; 0x05
    129e:	64 83       	std	Z+4, r22	; 0x04
    12a0:	82 e0       	ldi	r24, 0x02	; 2
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	e7 01       	movw	r28, r14
    12a6:	9b 83       	std	Y+3, r25	; 0x03
    12a8:	8a 83       	std	Y+2, r24	; 0x02
    12aa:	13 96       	adiw	r26, 0x03	; 3
    12ac:	5c 93       	st	X, r21
    12ae:	4e 93       	st	-X, r20
    12b0:	12 97       	sbiw	r26, 0x02	; 2
    12b2:	86 81       	ldd	r24, Z+6	; 0x06
    12b4:	97 81       	ldd	r25, Z+7	; 0x07
    12b6:	11 96       	adiw	r26, 0x01	; 1
    12b8:	9c 93       	st	X, r25
    12ba:	8e 93       	st	-X, r24
    12bc:	b7 83       	std	Z+7, r27	; 0x07
    12be:	a6 83       	std	Z+6, r26	; 0x06
    12c0:	51 83       	std	Z+1, r21	; 0x01
    12c2:	40 83       	st	Z, r20
    12c4:	ba 01       	movw	r22, r20
    12c6:	c8 01       	movw	r24, r16
    12c8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <osEE_change_context_from_running>
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	08 95       	ret
    12e2:	e6 01       	movw	r28, r12
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	9b 81       	ldd	r25, Y+3	; 0x03
    12e8:	89 2b       	or	r24, r25
    12ea:	21 f4       	brne	.+8      	; 0x12f4 <osEE_scheduler_task_activated+0xb0>
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	9b 83       	std	Y+3, r25	; 0x03
    12f2:	8a 83       	std	Y+2, r24	; 0x02
    12f4:	75 83       	std	Z+5, r23	; 0x05
    12f6:	64 83       	std	Z+4, r22	; 0x04
    12f8:	11 96       	adiw	r26, 0x01	; 1
    12fa:	1c 92       	st	X, r1
    12fc:	1e 92       	st	-X, r1
    12fe:	bd 01       	movw	r22, r26
    1300:	cf 01       	movw	r24, r30
    1302:	02 96       	adiw	r24, 0x02	; 2
    1304:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <osEE_scheduler_rq_insert>
    1308:	e1 cf       	rjmp	.-62     	; 0x12cc <osEE_scheduler_task_activated+0x88>
    130a:	84 e0       	ldi	r24, 0x04	; 4
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	e0 cf       	rjmp	.-64     	; 0x12d0 <osEE_scheduler_task_activated+0x8c>

00001310 <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    1310:	af 92       	push	r10
    1312:	bf 92       	push	r11
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1326:	db 01       	movw	r26, r22
    1328:	cd 91       	ld	r28, X+
    132a:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    132c:	fe 01       	movw	r30, r28
    132e:	01 91       	ld	r16, Z+
    1330:	11 91       	ld	r17, Z+
    1332:	7f 01       	movw	r14, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    1334:	d8 01       	movw	r26, r16
    1336:	14 96       	adiw	r26, 0x04	; 4
    1338:	cd 90       	ld	r12, X+
    133a:	dc 90       	ld	r13, X

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    133c:	fa 01       	movw	r30, r20
    133e:	11 83       	std	Z+1, r17	; 0x01
    1340:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    1342:	d6 01       	movw	r26, r12
    1344:	12 96       	adiw	r26, 0x02	; 2
    1346:	8d 91       	ld	r24, X+
    1348:	9c 91       	ld	r25, X
    134a:	04 97       	sbiw	r24, 0x04	; 4
    134c:	a9 f5       	brne	.+106    	; 0x13b8 <osEE_scheduler_task_terminated+0xa8>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    134e:	b7 01       	movw	r22, r14
    1350:	c5 01       	movw	r24, r10
    1352:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <osEE_scheduler_core_pop_running>
    1356:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    1358:	88 81       	ld	r24, Y
    135a:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    135c:	08 17       	cp	r16, r24
    135e:	19 07       	cpc	r17, r25
    1360:	31 f1       	breq	.+76     	; 0x13ae <osEE_scheduler_task_terminated+0x9e>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    1362:	d8 01       	movw	r26, r16
    1364:	14 96       	adiw	r26, 0x04	; 4
    1366:	ed 91       	ld	r30, X+
    1368:	fc 91       	ld	r31, X
    136a:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    136c:	1b 96       	adiw	r26, 0x0b	; 11
    136e:	2c 91       	ld	r18, X
    1370:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    1372:	20 81       	ld	r18, Z
    1374:	21 50       	subi	r18, 0x01	; 1
    1376:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    1378:	21 11       	cpse	r18, r1
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <osEE_scheduler_task_terminated+0x94>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    137c:	13 82       	std	Z+3, r1	; 0x03
    137e:	12 82       	std	Z+2, r1	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    1380:	2c 81       	ldd	r18, Y+4	; 0x04
    1382:	3d 81       	ldd	r19, Y+5	; 0x05
    1384:	da 01       	movw	r26, r20
    1386:	2d 93       	st	X+, r18
    1388:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    138a:	5d 83       	std	Y+5, r21	; 0x05
    138c:	4c 83       	std	Y+4, r20	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	df 90       	pop	r13
    139c:	cf 90       	pop	r12
    139e:	bf 90       	pop	r11
    13a0:	af 90       	pop	r10
    13a2:	08 95       	ret
  } else {
    p_tcb->status = OSEE_TASK_READY;
    13a4:	21 e0       	ldi	r18, 0x01	; 1
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	33 83       	std	Z+3, r19	; 0x03
    13aa:	22 83       	std	Z+2, r18	; 0x02
    13ac:	e9 cf       	rjmp	.-46     	; 0x1380 <osEE_scheduler_task_terminated+0x70>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    13ae:	f6 01       	movw	r30, r12
    13b0:	20 81       	ld	r18, Z
    13b2:	21 50       	subi	r18, 0x01	; 1
    13b4:	20 83       	st	Z, r18
    13b6:	e4 cf       	rjmp	.-56     	; 0x1380 <osEE_scheduler_task_terminated+0x70>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    13b8:	6e 81       	ldd	r22, Y+6	; 0x06
    13ba:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    13bc:	fb 01       	movw	r30, r22
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	9f 83       	std	Y+7, r25	; 0x07
    13c4:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    13c6:	d8 01       	movw	r26, r16
    13c8:	1b 96       	adiw	r26, 0x0b	; 11
    13ca:	8c 91       	ld	r24, X
    13cc:	f6 01       	movw	r30, r12
    13ce:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	93 83       	std	Z+3, r25	; 0x03
    13d6:	82 83       	std	Z+2, r24	; 0x02
      if (p_tcb_term->current_num_of_act == 1U) {
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    13d8:	a8 01       	movw	r20, r16
    13da:	c7 01       	movw	r24, r14
    13dc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    13e0:	b7 01       	movw	r22, r14
    13e2:	c5 01       	movw	r24, r10
    13e4:	0e 94 45 08 	call	0x108a	; 0x108a <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    13e8:	89 2b       	or	r24, r25
    13ea:	39 f4       	brne	.+14     	; 0x13fa <osEE_scheduler_task_terminated+0xea>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    13ec:	ee 81       	ldd	r30, Y+6	; 0x06
    13ee:	ff 81       	ldd	r31, Y+7	; 0x07
    13f0:	82 81       	ldd	r24, Z+2	; 0x02
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    13f4:	99 83       	std	Y+1, r25	; 0x01
    13f6:	88 83       	st	Y, r24
    13f8:	ca cf       	rjmp	.-108    	; 0x138e <osEE_scheduler_task_terminated+0x7e>
        } else {
          p_tdb_to = p_ccb->p_curr;
    13fa:	88 81       	ld	r24, Y
    13fc:	99 81       	ldd	r25, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    13fe:	c7 cf       	rjmp	.-114    	; 0x138e <osEE_scheduler_task_terminated+0x7e>

00001400 <osEE_scheduler_task_preemption_point>:
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb
)
{
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	cb 01       	movw	r24, r22
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1406:	fb 01       	movw	r30, r22
    1408:	c0 81       	ld	r28, Z
    140a:	d1 81       	ldd	r29, Z+1	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    140c:	be 01       	movw	r22, r28
    140e:	6e 5f       	subi	r22, 0xFE	; 254
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	0e 94 45 08 	call	0x108a	; 0x108a <osEE_scheduler_core_rq_preempt_stk>

  if (p_prev != NULL) {
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	49 f0       	breq	.+18     	; 0x142c <osEE_scheduler_task_preemption_point+0x2c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_prev, p_curr);
    141a:	68 81       	ld	r22, Y
    141c:	79 81       	ldd	r23, Y+1	; 0x01
    141e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
  }
  return is_preemption;
}
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret
    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	80 e0       	ldi	r24, 0x00	; 0
  }
  return is_preemption;
    1430:	fa cf       	rjmp	.-12     	; 0x1426 <osEE_scheduler_task_preemption_point+0x26>

00001432 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb
)
{
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb  = p_cdb->p_ccb;
    1436:	db 01       	movw	r26, r22
    1438:	ed 91       	ld	r30, X+
    143a:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
    143c:	80 81       	ld	r24, Z
    143e:	91 81       	ldd	r25, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
    1440:	26 81       	ldd	r18, Z+6	; 0x06
    1442:	37 81       	ldd	r19, Z+7	; 0x07

  p_preempted->p_tcb->status    = OSEE_TASK_READY_STACKED;
    1444:	ec 01       	movw	r28, r24
    1446:	ac 81       	ldd	r26, Y+4	; 0x04
    1448:	bd 81       	ldd	r27, Y+5	; 0x05
    144a:	62 e0       	ldi	r22, 0x02	; 2
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	13 96       	adiw	r26, 0x03	; 3
    1450:	7c 93       	st	X, r23
    1452:	6e 93       	st	-X, r22
    1454:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_curr                 = p_tdb;
    1456:	51 83       	std	Z+1, r21	; 0x01
    1458:	40 83       	st	Z, r20
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    145a:	a4 81       	ldd	r26, Z+4	; 0x04
    145c:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    145e:	6d 91       	ld	r22, X+
    1460:	7c 91       	ld	r23, X
    1462:	11 97       	sbiw	r26, 0x01	; 1
    1464:	75 83       	std	Z+5, r23	; 0x05
    1466:	64 83       	std	Z+4, r22	; 0x04

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  /* Alloc the SN for the new Running TASK */
  p_ccb->p_stk_sn               = osEE_sn_alloc(&p_ccb->p_free_sn);
    1468:	b7 83       	std	Z+7, r27	; 0x07
    146a:	a6 83       	std	Z+6, r26	; 0x06
  osEE_unlock_core(p_cdb);

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
    146c:	13 96       	adiw	r26, 0x03	; 3
    146e:	5c 93       	st	X, r21
    1470:	4e 93       	st	-X, r20
    1472:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
    1474:	2d 93       	st	X+, r18
    1476:	3c 93       	st	X, r19

  osEE_change_context_from_running(p_preempted, p_tdb);
    1478:	ba 01       	movw	r22, r20
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;

  osEE_change_context_from_running(p_preempted, p_tdb);
    147e:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <osEE_change_context_from_running>

00001482 <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
    1482:	db 01       	movw	r26, r22
    1484:	ed 91       	ld	r30, X+
    1486:	fc 91       	ld	r31, X
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    1488:	a4 81       	ldd	r26, Z+4	; 0x04
    148a:	b5 81       	ldd	r27, Z+5	; 0x05
    148c:	ab 2b       	or	r26, r27
    148e:	39 f4       	brne	.+14     	; 0x149e <osEE_alarm_set_rel+0x1c>
    ev = E_OS_STATE;
  } else {
    p_alarm_cb->cycle = cycle;
    1490:	37 83       	std	Z+7, r19	; 0x07
    1492:	26 83       	std	Z+6, r18	; 0x06

    osEE_counter_insert_rel_trigger(
    1494:	0e 94 37 0b 	call	0x166e	; 0x166e <osEE_counter_insert_rel_trigger>
      p_counter_db, p_trigger_db, increment
    );
    ev = E_OK;
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	08 95       	ret
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    ev = E_OS_STATE;
    149e:	87 e0       	ldi	r24, 0x07	; 7
    14a0:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
    14a2:	08 95       	ret

000014a4 <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    14a4:	f8 94       	cli
    14a6:	ff cf       	rjmp	.-2      	; 0x14a6 <__vector_default+0x2>

000014a8 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    14a8:	e4 ea       	ldi	r30, 0xA4	; 164
}
    14aa:	08 95       	ret

000014ac <__vector_11>:
OSEE_AVR8_ISR_NOT_DEFINED(TIMER1_CAPT_vect)
#endif /* OSEE_AVR8_TIMER1_CAPT_ISR */

/* TIMER1_COMPA interrupt vector */
#if (defined(OSEE_AVR8_TIMER1_COMPA_ISR_TID)) && (OSEE_AVR8_TIMER1_COMPA_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(TIMER1_COMPA_vect, OSEE_AVR8_TIMER1_COMPA_ISR_TID)
    14ac:	8f 93       	push	r24
    14ae:	9f 93       	push	r25
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <osEE_avr8_isr2_stub>
    14b6:	9f 91       	pop	r25
    14b8:	8f 91       	pop	r24
    14ba:	18 95       	reti

000014bc <osEE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void OSEE_COMPILER_KEEP OSEE_NAKED osEE_avr8_isr2_stub(TaskType t)
{

  OSEE_AVR8_ISR_PREINSTUB();
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	2f 93       	push	r18
    14c8:	3f 93       	push	r19
    14ca:	4f 93       	push	r20
    14cc:	5f 93       	push	r21
    14ce:	6f 93       	push	r22
    14d0:	7f 93       	push	r23
    14d2:	af 93       	push	r26
    14d4:	bf 93       	push	r27
    14d6:	ef 93       	push	r30
    14d8:	ff 93       	push	r31
{
  VAR(StatusType, AUTOMATIC) ret_val  = E_OK;
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
    14da:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <KDB+0x2>
    14de:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <KDB+0x3>
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	e8 0f       	add	r30, r24
    14ea:	f9 1f       	adc	r31, r25
    14ec:	40 81       	ld	r20, Z
    14ee:	51 81       	ldd	r21, Z+1	; 0x01

  /* Mark the TASK as Activated */
  ++p_act_tdb->p_tcb->current_num_of_act;
    14f0:	da 01       	movw	r26, r20
    14f2:	14 96       	adiw	r26, 0x04	; 4
    14f4:	ed 91       	ld	r30, X+
    14f6:	fc 91       	ld	r31, X
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	80 83       	st	Z, r24

  osEE_scheduler_task_set_running(p_kdb, p_cdb, p_act_tdb);
    14fe:	60 e9       	ldi	r22, 0x90	; 144
    1500:	71 e0       	ldi	r23, 0x01	; 1
    1502:	8e e7       	ldi	r24, 0x7E	; 126
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	0e 94 19 0a 	call	0x1432	; 0x1432 <osEE_scheduler_task_set_running>
#endif /* __ATXMEGA__ */

  /* Activate ISR2 */
  osEE_activate_isr2(t);

  OSEE_AVR8_ISR_POSTINSTUB();
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	bf 91       	pop	r27
    1510:	af 91       	pop	r26
    1512:	7f 91       	pop	r23
    1514:	6f 91       	pop	r22
    1516:	5f 91       	pop	r21
    1518:	4f 91       	pop	r20
    151a:	3f 91       	pop	r19
    151c:	2f 91       	pop	r18
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	0f 90       	pop	r0
    1524:	1f 90       	pop	r1

  OSEE_RETURN();
    1526:	08 95       	ret

00001528 <osEE_avr8_system_timer_init>:

#if (defined(OSEE_SYSTEM_TIMER_DEVICE))
#if (OSEE_SYSTEM_TIMER_DEVICE == OSEE_AVR8_TIMER1_COMPA)

void osEE_avr8_system_timer_init(void) {
  OsEE_atmega_startTimer1(OSTICKDURATION / OSEE_KILO);
    1528:	68 ee       	ldi	r22, 0xE8	; 232
    152a:	73 e0       	ldi	r23, 0x03	; 3
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <OsEE_atmega_startTimer1>

00001534 <osEE_avr8_system_timer_handler>:
}

ISR2(osEE_avr8_system_timer_handler) {
  OsEE_CDB * p_cdb = osEE_get_curr_core();
  osEE_counter_increment(p_cdb->p_sys_counter_db);
    1534:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <CDB+0x6>
    1538:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <CDB+0x7>
    153c:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <osEE_counter_increment>

00001540 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    1540:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    1542:	a4 81       	ldd	r26, Z+4	; 0x04
    1544:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    1546:	12 96       	adiw	r26, 0x02	; 2
    1548:	2d 91       	ld	r18, X+
    154a:	3c 91       	ld	r19, X
    154c:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    154e:	44 e0       	ldi	r20, 0x04	; 4
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	13 96       	adiw	r26, 0x03	; 3
    1554:	5c 93       	st	X, r21
    1556:	4e 93       	st	-X, r20
    1558:	12 97       	sbiw	r26, 0x02	; 2
    155a:	dc 01       	movw	r26, r24
    155c:	12 96       	adiw	r26, 0x02	; 2
    155e:	4d 91       	ld	r20, X+
    1560:	5c 91       	ld	r21, X
    1562:	62 81       	ldd	r22, Z+2	; 0x02
    1564:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    1566:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    1568:	22 30       	cpi	r18, 0x02	; 2
    156a:	31 05       	cpc	r19, r1
    156c:	11 f4       	brne	.+4      	; 0x1572 <osEE_change_context_from_running+0x32>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    156e:	0c 94 88 00 	jmp	0x110	; 0x110 <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    1572:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>

00001576 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    1576:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    1578:	db 01       	movw	r26, r22
    157a:	14 96       	adiw	r26, 0x04	; 4
    157c:	ed 91       	ld	r30, X+
    157e:	fc 91       	ld	r31, X
    1580:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    1582:	22 81       	ldd	r18, Z+2	; 0x02
    1584:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    1586:	44 e0       	ldi	r20, 0x04	; 4
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	53 83       	std	Z+3, r21	; 0x03
    158c:	42 83       	std	Z+2, r20	; 0x02
    158e:	12 96       	adiw	r26, 0x02	; 2
    1590:	6d 91       	ld	r22, X+
    1592:	7c 91       	ld	r23, X

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	11 f4       	brne	.+4      	; 0x159e <osEE_change_context_from_task_end+0x28>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    159a:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    159e:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

000015a2 <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    15a2:	dc 01       	movw	r26, r24
    15a4:	12 96       	adiw	r26, 0x02	; 2
    15a6:	6d 91       	ld	r22, X+
    15a8:	7c 91       	ld	r23, X
    15aa:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    15ac:	ed 91       	ld	r30, X+
    15ae:	fc 91       	ld	r31, X
    15b0:	40 81       	ld	r20, Z
    15b2:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    15b4:	db 01       	movw	r26, r22
    15b6:	ed 91       	ld	r30, X+
    15b8:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    15ba:	22 89       	ldd	r18, Z+18	; 0x12
    15bc:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    15be:	21 15       	cp	r18, r1
    15c0:	31 05       	cpc	r19, r1
    15c2:	19 f0       	breq	.+6      	; 0x15ca <osEE_idle_task_terminate+0x28>
    15c4:	42 17       	cp	r20, r18
    15c6:	53 07       	cpc	r21, r19
    15c8:	29 f4       	brne	.+10     	; 0x15d4 <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    15ca:	db 01       	movw	r26, r22
    15cc:	ed 93       	st	X+, r30
    15ce:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    15d0:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
    15d4:	f9 01       	movw	r30, r18
    15d6:	f1 cf       	rjmp	.-30     	; 0x15ba <osEE_idle_task_terminate+0x18>

000015d8 <osEE_counter_insert_abs_trigger>:
    }
  }

  /* Turn Off the Trigger */
  p_trigger_cb->active = OSEE_FALSE;
}
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	dc 01       	movw	r26, r24
    15e6:	8d 91       	ld	r24, X+
    15e8:	9c 91       	ld	r25, X
    15ea:	dc 01       	movw	r26, r24
    15ec:	ed 91       	ld	r30, X+
    15ee:	fc 91       	ld	r31, X
    15f0:	11 97       	sbiw	r26, 0x01	; 1
    15f2:	12 96       	adiw	r26, 0x02	; 2
    15f4:	0d 91       	ld	r16, X+
    15f6:	1c 91       	ld	r17, X
    15f8:	db 01       	movw	r26, r22
    15fa:	cd 91       	ld	r28, X+
    15fc:	dc 91       	ld	r29, X
    15fe:	21 e0       	ldi	r18, 0x01	; 1
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3d 83       	std	Y+5, r19	; 0x05
    1604:	2c 83       	std	Y+4, r18	; 0x04
    1606:	5b 83       	std	Y+3, r21	; 0x03
    1608:	4a 83       	std	Y+2, r20	; 0x02
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 97       	sbiw	r30, 0x00	; 0
    1610:	e1 f0       	breq	.+56     	; 0x164a <osEE_counter_insert_abs_trigger+0x72>
    1612:	a0 81       	ld	r26, Z
    1614:	b1 81       	ldd	r27, Z+1	; 0x01
    1616:	12 96       	adiw	r26, 0x02	; 2
    1618:	ed 90       	ld	r14, X+
    161a:	fc 90       	ld	r15, X
    161c:	13 97       	sbiw	r26, 0x03	; 3
    161e:	0e 15       	cp	r16, r14
    1620:	1f 05       	cpc	r17, r15
    1622:	68 f4       	brcc	.+26     	; 0x163e <osEE_counter_insert_abs_trigger+0x66>
    1624:	4e 15       	cp	r20, r14
    1626:	5f 05       	cpc	r21, r15
    1628:	18 f4       	brcc	.+6      	; 0x1630 <osEE_counter_insert_abs_trigger+0x58>
    162a:	04 17       	cp	r16, r20
    162c:	15 07       	cpc	r17, r21
    162e:	68 f0       	brcs	.+26     	; 0x164a <osEE_counter_insert_abs_trigger+0x72>
    1630:	fc 90       	ld	r15, X
    1632:	11 96       	adiw	r26, 0x01	; 1
    1634:	ac 91       	ld	r26, X
    1636:	9f 01       	movw	r18, r30
    1638:	ef 2d       	mov	r30, r15
    163a:	fa 2f       	mov	r31, r26
    163c:	e8 cf       	rjmp	.-48     	; 0x160e <osEE_counter_insert_abs_trigger+0x36>
    163e:	04 17       	cp	r16, r20
    1640:	15 07       	cpc	r17, r21
    1642:	18 f0       	brcs	.+6      	; 0x164a <osEE_counter_insert_abs_trigger+0x72>
    1644:	4e 15       	cp	r20, r14
    1646:	5f 05       	cpc	r21, r15
    1648:	98 f7       	brcc	.-26     	; 0x1630 <osEE_counter_insert_abs_trigger+0x58>
    164a:	21 15       	cp	r18, r1
    164c:	31 05       	cpc	r19, r1
    164e:	19 f0       	breq	.+6      	; 0x1656 <osEE_counter_insert_abs_trigger+0x7e>
    1650:	d9 01       	movw	r26, r18
    1652:	8d 91       	ld	r24, X+
    1654:	9c 91       	ld	r25, X
    1656:	dc 01       	movw	r26, r24
    1658:	6d 93       	st	X+, r22
    165a:	7c 93       	st	X, r23
    165c:	f9 83       	std	Y+1, r31	; 0x01
    165e:	e8 83       	st	Y, r30
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	08 95       	ret

0000166e <osEE_counter_insert_rel_trigger>:
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	dc 01       	movw	r26, r24
    1674:	12 96       	adiw	r26, 0x02	; 2
    1676:	ed 91       	ld	r30, X+
    1678:	fc 91       	ld	r31, X
    167a:	13 97       	sbiw	r26, 0x03	; 3
    167c:	0d 90       	ld	r0, X+
    167e:	bc 91       	ld	r27, X
    1680:	a0 2d       	mov	r26, r0
    1682:	12 96       	adiw	r26, 0x02	; 2
    1684:	2d 91       	ld	r18, X+
    1686:	3c 91       	ld	r19, X
    1688:	df 01       	movw	r26, r30
    168a:	a4 1b       	sub	r26, r20
    168c:	b5 0b       	sbc	r27, r21
    168e:	a2 17       	cp	r26, r18
    1690:	b3 07       	cpc	r27, r19
    1692:	30 f0       	brcs	.+12     	; 0x16a0 <osEE_counter_insert_rel_trigger+0x32>
    1694:	42 0f       	add	r20, r18
    1696:	53 1f       	adc	r21, r19
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <osEE_counter_insert_abs_trigger>
    16a0:	41 50       	subi	r20, 0x01	; 1
    16a2:	51 09       	sbc	r21, r1
    16a4:	42 0f       	add	r20, r18
    16a6:	53 1f       	adc	r21, r19
    16a8:	4e 1b       	sub	r20, r30
    16aa:	5f 0b       	sbc	r21, r31
    16ac:	f5 cf       	rjmp	.-22     	; 0x1698 <osEE_counter_insert_rel_trigger+0x2a>

000016ae <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
    16c2:	dc 01       	movw	r26, r24
    16c4:	0d 91       	ld	r16, X+
    16c6:	1c 91       	ld	r17, X
    16c8:	11 97       	sbiw	r26, 0x01	; 1
       This because is more efficient to read SFR than mamory. */
    CONST(CoreIdType, AUTOMATIC) counter_core_id = osEE_get_curr_core_id();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
    16ca:	f8 01       	movw	r30, r16
    16cc:	22 81       	ldd	r18, Z+2	; 0x02
    16ce:	33 81       	ldd	r19, Z+3	; 0x03
    16d0:	12 96       	adiw	r26, 0x02	; 2
    16d2:	4d 91       	ld	r20, X+
    16d4:	5c 91       	ld	r21, X
    16d6:	24 17       	cp	r18, r20
    16d8:	35 07       	cpc	r19, r21
    16da:	08 f4       	brcc	.+2      	; 0x16de <osEE_counter_increment+0x30>
    16dc:	5f c0       	rjmp	.+190    	; 0x179c <osEE_counter_increment+0xee>
      counter_value = (p_counter_cb->value = 0U);
    16de:	13 82       	std	Z+3, r1	; 0x03
    16e0:	12 82       	std	Z+2, r1	; 0x02
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	20 e0       	ldi	r18, 0x00	; 0
            the counters, whenever the locks are not limited resources for the
            HW and falling back to use core locks only for those architectures
            where this is not true. TBD. */
    osEE_lock_core_id(counter_core_id);

    p_triggered_db = p_counter_cb->trigger_queue;
    16e6:	f8 01       	movw	r30, r16
    16e8:	c0 81       	ld	r28, Z
    16ea:	d1 81       	ldd	r29, Z+1	; 0x01

    if (p_triggered_db != NULL) {
    16ec:	20 97       	sbiw	r28, 0x00	; 0
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <osEE_counter_increment+0x44>
    16f0:	4a c0       	rjmp	.+148    	; 0x1786 <osEE_counter_increment+0xd8>
      P2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
    16f2:	a8 81       	ld	r26, Y
    16f4:	b9 81       	ldd	r27, Y+1	; 0x01
    16f6:	12 96       	adiw	r26, 0x02	; 2
    16f8:	4d 91       	ld	r20, X+
    16fa:	5c 91       	ld	r21, X
    16fc:	42 17       	cp	r20, r18
    16fe:	53 07       	cpc	r21, r19
    1700:	09 f0       	breq	.+2      	; 0x1704 <osEE_counter_increment+0x56>
    1702:	41 c0       	rjmp	.+130    	; 0x1786 <osEE_counter_increment+0xd8>
    1704:	de 01       	movw	r26, r28
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
    1706:	2d 91       	ld	r18, X+
    1708:	3c 91       	ld	r19, X
    170a:	f9 01       	movw	r30, r18
    170c:	a0 81       	ld	r26, Z
    170e:	b1 81       	ldd	r27, Z+1	; 0x01
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
    1710:	10 97       	sbiw	r26, 0x00	; 0
    1712:	49 f0       	breq	.+18     	; 0x1726 <osEE_counter_increment+0x78>
    1714:	6d 91       	ld	r22, X+
    1716:	7c 91       	ld	r23, X
    1718:	11 97       	sbiw	r26, 0x01	; 1

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
        } while ((p_current != NULL) &&
    171a:	fb 01       	movw	r30, r22
    171c:	62 81       	ldd	r22, Z+2	; 0x02
    171e:	73 81       	ldd	r23, Z+3	; 0x03
    1720:	46 17       	cp	r20, r22
    1722:	57 07       	cpc	r21, r23
    1724:	81 f3       	breq	.-32     	; 0x1706 <osEE_counter_increment+0x58>
    1726:	7c 01       	movw	r14, r24
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
    1728:	f9 01       	movw	r30, r18
    172a:	11 82       	std	Z+1, r1	; 0x01
    172c:	10 82       	st	Z, r1
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
    172e:	f8 01       	movw	r30, r16
    1730:	b1 83       	std	Z+1, r27	; 0x01
    1732:	a0 83       	st	Z, r26
            p_trigger_to_be_handled = p_triggered_db;

          /* Prepare next trigger to be handled here, before actually handle the
           * current one, otherwise cycling triggers will mess with the list of
           * triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
    1734:	08 81       	ld	r16, Y
    1736:	19 81       	ldd	r17, Y+1	; 0x01
    1738:	d8 01       	movw	r26, r16
    173a:	ac 90       	ld	r10, X
    173c:	11 96       	adiw	r26, 0x01	; 1
    173e:	bc 90       	ld	r11, X
    1740:	11 97       	sbiw	r26, 0x01	; 1
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
  CONST(TickType, AUTOMATIC)
    cycle = p_trigger_cb->cycle;
    1742:	16 96       	adiw	r26, 0x06	; 6
    1744:	cd 90       	ld	r12, X+
    1746:	dc 90       	ld	r13, X
(
  P2CONST(OsEE_action, AUTOMATIC, OS_APPL_DATA) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev;
  switch (p_action->type) {
    1748:	2a 85       	ldd	r18, Y+10	; 0x0a
    174a:	3b 85       	ldd	r19, Y+11	; 0x0b
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	51 f1       	breq	.+84     	; 0x17a6 <osEE_counter_increment+0xf8>
    1752:	23 30       	cpi	r18, 0x03	; 3
    1754:	31 05       	cpc	r19, r1
    1756:	61 f1       	breq	.+88     	; 0x17b0 <osEE_counter_increment+0x102>
    1758:	23 2b       	or	r18, r19
    175a:	51 f4       	brne	.+20     	; 0x1770 <osEE_counter_increment+0xc2>
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;

      ev = osEE_scheduler_task_activated(
    175c:	4e 81       	ldd	r20, Y+6	; 0x06
    175e:	5f 81       	ldd	r21, Y+7	; 0x07
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	60 e9       	ldi	r22, 0x90	; 144
    1766:	71 e0       	ldi	r23, 0x01	; 1
    1768:	8e e7       	ldi	r24, 0x7E	; 126
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	0e 94 22 09 	call	0x1244	; 0x1244 <osEE_scheduler_task_activated>
    cycle = p_trigger_cb->cycle;

  ev = osEE_handle_action(&p_alarm_db->action);

  /* TODO: Add active check to let call CancelAlarm from callback... */
  if (cycle > 0U) {
    1770:	c1 14       	cp	r12, r1
    1772:	d1 04       	cpc	r13, r1
    1774:	09 f1       	breq	.+66     	; 0x17b8 <osEE_counter_increment+0x10a>
    osEE_counter_insert_rel_trigger(
    1776:	a6 01       	movw	r20, r12
    1778:	be 01       	movw	r22, r28
    177a:	c7 01       	movw	r24, r14
    177c:	0e 94 37 0b 	call	0x166e	; 0x166e <osEE_counter_insert_rel_trigger>
    1780:	e5 01       	movw	r28, r10
            osEE_end_primitive(flags);
          }
#else
          (void)ev; /* TODO: Handle ErrorHook */
#endif /* OSEE_HAS_ERRORHOOK */
        } while (p_triggered_db != NULL);
    1782:	20 97       	sbiw	r28, 0x00	; 0
    1784:	b9 f6       	brne	.-82     	; 0x1734 <osEE_counter_increment+0x86>
    }
    /* XXX: Unlock the core only at the End of The Service, to not incur in
            races when handling cycling triggers. */
    osEE_unlock_core_id(counter_core_id);
  }
}
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	bf 90       	pop	r11
    1798:	af 90       	pop	r10
    179a:	08 95       	ret
    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value = (p_counter_cb->value = 0U);
    } else {
      counter_value = ++p_counter_cb->value;
    179c:	2f 5f       	subi	r18, 0xFF	; 255
    179e:	3f 4f       	sbci	r19, 0xFF	; 255
    17a0:	33 83       	std	Z+3, r19	; 0x03
    17a2:	22 83       	std	Z+2, r18	; 0x02
    17a4:	a0 cf       	rjmp	.-192    	; 0x16e6 <osEE_counter_increment+0x38>
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
      osEE_counter_increment(p_action->param.p_counter_db);
    17a6:	88 85       	ldd	r24, Y+8	; 0x08
    17a8:	99 85       	ldd	r25, Y+9	; 0x09
    17aa:	0e 94 57 0b 	call	0x16ae	; 0x16ae <osEE_counter_increment>
    17ae:	e0 cf       	rjmp	.-64     	; 0x1770 <osEE_counter_increment+0xc2>
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
    17b0:	ec 81       	ldd	r30, Y+4	; 0x04
    17b2:	fd 81       	ldd	r31, Y+5	; 0x05
    17b4:	09 95       	icall
    17b6:	dc cf       	rjmp	.-72     	; 0x1770 <osEE_counter_increment+0xc2>
  if (cycle > 0U) {
    osEE_counter_insert_rel_trigger(
      p_counter_db, p_trigger_db, cycle
    );
  } else {
    p_trigger_cb->active = OSEE_FALSE;
    17b8:	f8 01       	movw	r30, r16
    17ba:	15 82       	std	Z+5, r1	; 0x05
    17bc:	14 82       	std	Z+4, r1	; 0x04
    17be:	e0 cf       	rjmp	.-64     	; 0x1780 <osEE_counter_increment+0xd2>

000017c0 <OsEE_atmega_startTimer1>:
 * - x < TIMER_1_PRESCALER_1024_MAX_TICKS = 4194304:	64     us
 */
void OsEE_atmega_startTimer1(uint32_t microsecondsInterval) {
  uint8_t	timer1Prescaler;
  uint16_t	timer1CompareValue;
  TCCR1B = 0;	/* Pause Timer. */
    17c0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  TCCR1A = 0;
    17c4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  TCCR1C = 0;
    17c8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
  TCNT1  = 0;
    17cc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17d0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
   * 0 1 1 clkIO/64 (From prescaler)
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    17d4:	61 15       	cp	r22, r1
    17d6:	20 e1       	ldi	r18, 0x10	; 16
    17d8:	72 07       	cpc	r23, r18
    17da:	81 05       	cpc	r24, r1
    17dc:	91 05       	cpc	r25, r1
    17de:	a0 f4       	brcc	.+40     	; 0x1808 <OsEE_atmega_startTimer1+0x48>
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
    17e0:	e4 e0       	ldi	r30, 0x04	; 4
    17e2:	66 0f       	add	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	ea 95       	dec	r30
    17e8:	e1 f7       	brne	.-8      	; 0x17e2 <OsEE_atmega_startTimer1+0x22>
    17ea:	61 50       	subi	r22, 0x01	; 1
    17ec:	71 09       	sbc	r23, r1
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
  }
#else
  #error("Unsupported CPU frequency")
#endif
  TIFR1  = (1 << OCIE1A);	/* Clear Output Compare A Match Flag. */
    17f0:	92 e0       	ldi	r25, 0x02	; 2
    17f2:	96 bb       	out	0x16, r25	; 22
  TIMSK1 = (1 << OCIE1A);	/* Output Compare A Match Interrupt Enable */
    17f4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  OCR1A  = timer1CompareValue;	/* Set Compare A Match Value */
    17f8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    17fc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  TCCR1B = (1 << WGM12) | timer1Prescaler;	/* Set CTC Mode and Prescaler. */
    1800:	88 60       	ori	r24, 0x08	; 8
    1802:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
}	/* startTimer1() */
    1806:	08 95       	ret
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    1808:	61 15       	cp	r22, r1
    180a:	20 e8       	ldi	r18, 0x80	; 128
    180c:	72 07       	cpc	r23, r18
    180e:	81 05       	cpc	r24, r1
    1810:	91 05       	cpc	r25, r1
    1812:	30 f4       	brcc	.+12     	; 0x1820 <OsEE_atmega_startTimer1+0x60>
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
    1814:	66 0f       	add	r22, r22
    1816:	77 1f       	adc	r23, r23
    1818:	61 50       	subi	r22, 0x01	; 1
    181a:	71 09       	sbc	r23, r1
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	e8 cf       	rjmp	.-48     	; 0x17f0 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    1820:	6c 3f       	cpi	r22, 0xFC	; 252
    1822:	2f ef       	ldi	r18, 0xFF	; 255
    1824:	72 07       	cpc	r23, r18
    1826:	23 e0       	ldi	r18, 0x03	; 3
    1828:	82 07       	cpc	r24, r18
    182a:	91 05       	cpc	r25, r1
    182c:	58 f4       	brcc	.+22     	; 0x1844 <OsEE_atmega_startTimer1+0x84>
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
    182e:	42 e0       	ldi	r20, 0x02	; 2
    1830:	96 95       	lsr	r25
    1832:	87 95       	ror	r24
    1834:	77 95       	ror	r23
    1836:	67 95       	ror	r22
    1838:	4a 95       	dec	r20
    183a:	d1 f7       	brne	.-12     	; 0x1830 <OsEE_atmega_startTimer1+0x70>
    183c:	61 50       	subi	r22, 0x01	; 1
    183e:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	d6 cf       	rjmp	.-84     	; 0x17f0 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    1844:	61 15       	cp	r22, r1
    1846:	71 05       	cpc	r23, r1
    1848:	20 e1       	ldi	r18, 0x10	; 16
    184a:	82 07       	cpc	r24, r18
    184c:	91 05       	cpc	r25, r1
    184e:	58 f4       	brcc	.+22     	; 0x1866 <OsEE_atmega_startTimer1+0xa6>
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
    1850:	34 e0       	ldi	r19, 0x04	; 4
    1852:	96 95       	lsr	r25
    1854:	87 95       	ror	r24
    1856:	77 95       	ror	r23
    1858:	67 95       	ror	r22
    185a:	3a 95       	dec	r19
    185c:	d1 f7       	brne	.-12     	; 0x1852 <OsEE_atmega_startTimer1+0x92>
    185e:	61 50       	subi	r22, 0x01	; 1
    1860:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    1862:	84 e0       	ldi	r24, 0x04	; 4
    1864:	c5 cf       	rjmp	.-118    	; 0x17f0 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
    1866:	26 e0       	ldi	r18, 0x06	; 6
    1868:	96 95       	lsr	r25
    186a:	87 95       	ror	r24
    186c:	77 95       	ror	r23
    186e:	67 95       	ror	r22
    1870:	2a 95       	dec	r18
    1872:	d1 f7       	brne	.-12     	; 0x1868 <OsEE_atmega_startTimer1+0xa8>
    1874:	61 50       	subi	r22, 0x01	; 1
    1876:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    1878:	85 e0       	ldi	r24, 0x05	; 5
    187a:	ba cf       	rjmp	.-140    	; 0x17f0 <OsEE_atmega_startTimer1+0x30>

0000187c <__udivmodsi4>:
    187c:	a1 e2       	ldi	r26, 0x21	; 33
    187e:	1a 2e       	mov	r1, r26
    1880:	aa 1b       	sub	r26, r26
    1882:	bb 1b       	sub	r27, r27
    1884:	fd 01       	movw	r30, r26
    1886:	0d c0       	rjmp	.+26     	; 0x18a2 <__udivmodsi4_ep>

00001888 <__udivmodsi4_loop>:
    1888:	aa 1f       	adc	r26, r26
    188a:	bb 1f       	adc	r27, r27
    188c:	ee 1f       	adc	r30, r30
    188e:	ff 1f       	adc	r31, r31
    1890:	a2 17       	cp	r26, r18
    1892:	b3 07       	cpc	r27, r19
    1894:	e4 07       	cpc	r30, r20
    1896:	f5 07       	cpc	r31, r21
    1898:	20 f0       	brcs	.+8      	; 0x18a2 <__udivmodsi4_ep>
    189a:	a2 1b       	sub	r26, r18
    189c:	b3 0b       	sbc	r27, r19
    189e:	e4 0b       	sbc	r30, r20
    18a0:	f5 0b       	sbc	r31, r21

000018a2 <__udivmodsi4_ep>:
    18a2:	66 1f       	adc	r22, r22
    18a4:	77 1f       	adc	r23, r23
    18a6:	88 1f       	adc	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	1a 94       	dec	r1
    18ac:	69 f7       	brne	.-38     	; 0x1888 <__udivmodsi4_loop>
    18ae:	60 95       	com	r22
    18b0:	70 95       	com	r23
    18b2:	80 95       	com	r24
    18b4:	90 95       	com	r25
    18b6:	9b 01       	movw	r18, r22
    18b8:	ac 01       	movw	r20, r24
    18ba:	bd 01       	movw	r22, r26
    18bc:	cf 01       	movw	r24, r30
    18be:	08 95       	ret

000018c0 <__tablejump2__>:
    18c0:	ee 0f       	add	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	05 90       	lpm	r0, Z+
    18c6:	f4 91       	lpm	r31, Z
    18c8:	e0 2d       	mov	r30, r0
    18ca:	09 94       	ijmp

000018cc <sprintf>:
    18cc:	ae e0       	ldi	r26, 0x0E	; 14
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ec e6       	ldi	r30, 0x6C	; 108
    18d2:	fc e0       	ldi	r31, 0x0C	; 12
    18d4:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__prologue_saves__+0x1c>
    18d8:	0d 89       	ldd	r16, Y+21	; 0x15
    18da:	1e 89       	ldd	r17, Y+22	; 0x16
    18dc:	86 e0       	ldi	r24, 0x06	; 6
    18de:	8c 83       	std	Y+4, r24	; 0x04
    18e0:	1a 83       	std	Y+2, r17	; 0x02
    18e2:	09 83       	std	Y+1, r16	; 0x01
    18e4:	8f ef       	ldi	r24, 0xFF	; 255
    18e6:	9f e7       	ldi	r25, 0x7F	; 127
    18e8:	9e 83       	std	Y+6, r25	; 0x06
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	ae 01       	movw	r20, r28
    18ee:	47 5e       	subi	r20, 0xE7	; 231
    18f0:	5f 4f       	sbci	r21, 0xFF	; 255
    18f2:	6f 89       	ldd	r22, Y+23	; 0x17
    18f4:	78 8d       	ldd	r23, Y+24	; 0x18
    18f6:	ce 01       	movw	r24, r28
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	0e 94 89 0c 	call	0x1912	; 0x1912 <vfprintf>
    18fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1900:	38 85       	ldd	r19, Y+8	; 0x08
    1902:	02 0f       	add	r16, r18
    1904:	13 1f       	adc	r17, r19
    1906:	f8 01       	movw	r30, r16
    1908:	10 82       	st	Z, r1
    190a:	2e 96       	adiw	r28, 0x0e	; 14
    190c:	e4 e0       	ldi	r30, 0x04	; 4
    190e:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__epilogue_restores__+0x1c>

00001912 <vfprintf>:
    1912:	ab e0       	ldi	r26, 0x0B	; 11
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	ef e8       	ldi	r30, 0x8F	; 143
    1918:	fc e0       	ldi	r31, 0x0C	; 12
    191a:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__prologue_saves__>
    191e:	7c 01       	movw	r14, r24
    1920:	3b 01       	movw	r6, r22
    1922:	8a 01       	movw	r16, r20
    1924:	fc 01       	movw	r30, r24
    1926:	17 82       	std	Z+7, r1	; 0x07
    1928:	16 82       	std	Z+6, r1	; 0x06
    192a:	83 81       	ldd	r24, Z+3	; 0x03
    192c:	81 ff       	sbrs	r24, 1
    192e:	c8 c1       	rjmp	.+912    	; 0x1cc0 <vfprintf+0x3ae>
    1930:	ce 01       	movw	r24, r28
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	5c 01       	movw	r10, r24
    1936:	f7 01       	movw	r30, r14
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	f3 01       	movw	r30, r6
    193c:	93 fd       	sbrc	r25, 3
    193e:	85 91       	lpm	r24, Z+
    1940:	93 ff       	sbrs	r25, 3
    1942:	81 91       	ld	r24, Z+
    1944:	3f 01       	movw	r6, r30
    1946:	88 23       	and	r24, r24
    1948:	09 f4       	brne	.+2      	; 0x194c <vfprintf+0x3a>
    194a:	53 c1       	rjmp	.+678    	; 0x1bf2 <vfprintf+0x2e0>
    194c:	85 32       	cpi	r24, 0x25	; 37
    194e:	39 f4       	brne	.+14     	; 0x195e <vfprintf+0x4c>
    1950:	93 fd       	sbrc	r25, 3
    1952:	85 91       	lpm	r24, Z+
    1954:	93 ff       	sbrs	r25, 3
    1956:	81 91       	ld	r24, Z+
    1958:	3f 01       	movw	r6, r30
    195a:	85 32       	cpi	r24, 0x25	; 37
    195c:	29 f4       	brne	.+10     	; 0x1968 <vfprintf+0x56>
    195e:	b7 01       	movw	r22, r14
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <fputc>
    1966:	e7 cf       	rjmp	.-50     	; 0x1936 <vfprintf+0x24>
    1968:	91 2c       	mov	r9, r1
    196a:	21 2c       	mov	r2, r1
    196c:	31 2c       	mov	r3, r1
    196e:	ff e1       	ldi	r31, 0x1F	; 31
    1970:	f3 15       	cp	r31, r3
    1972:	38 f0       	brcs	.+14     	; 0x1982 <vfprintf+0x70>
    1974:	8b 32       	cpi	r24, 0x2B	; 43
    1976:	11 f1       	breq	.+68     	; 0x19bc <vfprintf+0xaa>
    1978:	90 f4       	brcc	.+36     	; 0x199e <vfprintf+0x8c>
    197a:	80 32       	cpi	r24, 0x20	; 32
    197c:	09 f1       	breq	.+66     	; 0x19c0 <vfprintf+0xae>
    197e:	83 32       	cpi	r24, 0x23	; 35
    1980:	29 f1       	breq	.+74     	; 0x19cc <vfprintf+0xba>
    1982:	37 fc       	sbrc	r3, 7
    1984:	3c c0       	rjmp	.+120    	; 0x19fe <vfprintf+0xec>
    1986:	20 ed       	ldi	r18, 0xD0	; 208
    1988:	28 0f       	add	r18, r24
    198a:	2a 30       	cpi	r18, 0x0A	; 10
    198c:	50 f5       	brcc	.+84     	; 0x19e2 <vfprintf+0xd0>
    198e:	36 fe       	sbrs	r3, 6
    1990:	20 c0       	rjmp	.+64     	; 0x19d2 <vfprintf+0xc0>
    1992:	8a e0       	ldi	r24, 0x0A	; 10
    1994:	98 9e       	mul	r9, r24
    1996:	20 0d       	add	r18, r0
    1998:	11 24       	eor	r1, r1
    199a:	92 2e       	mov	r9, r18
    199c:	06 c0       	rjmp	.+12     	; 0x19aa <vfprintf+0x98>
    199e:	8d 32       	cpi	r24, 0x2D	; 45
    19a0:	91 f0       	breq	.+36     	; 0x19c6 <vfprintf+0xb4>
    19a2:	80 33       	cpi	r24, 0x30	; 48
    19a4:	71 f7       	brne	.-36     	; 0x1982 <vfprintf+0x70>
    19a6:	68 94       	set
    19a8:	30 f8       	bld	r3, 0
    19aa:	f3 01       	movw	r30, r6
    19ac:	93 fd       	sbrc	r25, 3
    19ae:	85 91       	lpm	r24, Z+
    19b0:	93 ff       	sbrs	r25, 3
    19b2:	81 91       	ld	r24, Z+
    19b4:	3f 01       	movw	r6, r30
    19b6:	81 11       	cpse	r24, r1
    19b8:	da cf       	rjmp	.-76     	; 0x196e <vfprintf+0x5c>
    19ba:	21 c0       	rjmp	.+66     	; 0x19fe <vfprintf+0xec>
    19bc:	68 94       	set
    19be:	31 f8       	bld	r3, 1
    19c0:	68 94       	set
    19c2:	32 f8       	bld	r3, 2
    19c4:	f2 cf       	rjmp	.-28     	; 0x19aa <vfprintf+0x98>
    19c6:	68 94       	set
    19c8:	33 f8       	bld	r3, 3
    19ca:	ef cf       	rjmp	.-34     	; 0x19aa <vfprintf+0x98>
    19cc:	68 94       	set
    19ce:	34 f8       	bld	r3, 4
    19d0:	ec cf       	rjmp	.-40     	; 0x19aa <vfprintf+0x98>
    19d2:	ea e0       	ldi	r30, 0x0A	; 10
    19d4:	2e 9e       	mul	r2, r30
    19d6:	20 0d       	add	r18, r0
    19d8:	11 24       	eor	r1, r1
    19da:	22 2e       	mov	r2, r18
    19dc:	68 94       	set
    19de:	35 f8       	bld	r3, 5
    19e0:	e4 cf       	rjmp	.-56     	; 0x19aa <vfprintf+0x98>
    19e2:	8e 32       	cpi	r24, 0x2E	; 46
    19e4:	29 f4       	brne	.+10     	; 0x19f0 <vfprintf+0xde>
    19e6:	36 fc       	sbrc	r3, 6
    19e8:	04 c1       	rjmp	.+520    	; 0x1bf2 <vfprintf+0x2e0>
    19ea:	68 94       	set
    19ec:	36 f8       	bld	r3, 6
    19ee:	dd cf       	rjmp	.-70     	; 0x19aa <vfprintf+0x98>
    19f0:	8c 36       	cpi	r24, 0x6C	; 108
    19f2:	19 f4       	brne	.+6      	; 0x19fa <vfprintf+0xe8>
    19f4:	68 94       	set
    19f6:	37 f8       	bld	r3, 7
    19f8:	d8 cf       	rjmp	.-80     	; 0x19aa <vfprintf+0x98>
    19fa:	88 36       	cpi	r24, 0x68	; 104
    19fc:	b1 f2       	breq	.-84     	; 0x19aa <vfprintf+0x98>
    19fe:	98 2f       	mov	r25, r24
    1a00:	9f 7d       	andi	r25, 0xDF	; 223
    1a02:	95 54       	subi	r25, 0x45	; 69
    1a04:	93 30       	cpi	r25, 0x03	; 3
    1a06:	e0 f0       	brcs	.+56     	; 0x1a40 <vfprintf+0x12e>
    1a08:	83 36       	cpi	r24, 0x63	; 99
    1a0a:	a1 f1       	breq	.+104    	; 0x1a74 <vfprintf+0x162>
    1a0c:	83 37       	cpi	r24, 0x73	; 115
    1a0e:	c1 f1       	breq	.+112    	; 0x1a80 <vfprintf+0x16e>
    1a10:	83 35       	cpi	r24, 0x53	; 83
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <vfprintf+0x104>
    1a14:	63 c0       	rjmp	.+198    	; 0x1adc <vfprintf+0x1ca>
    1a16:	28 01       	movw	r4, r16
    1a18:	f2 e0       	ldi	r31, 0x02	; 2
    1a1a:	4f 0e       	add	r4, r31
    1a1c:	51 1c       	adc	r5, r1
    1a1e:	f8 01       	movw	r30, r16
    1a20:	c0 80       	ld	r12, Z
    1a22:	d1 80       	ldd	r13, Z+1	; 0x01
    1a24:	69 2d       	mov	r22, r9
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	36 fc       	sbrc	r3, 6
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <vfprintf+0x11e>
    1a2c:	6f ef       	ldi	r22, 0xFF	; 255
    1a2e:	7f ef       	ldi	r23, 0xFF	; 255
    1a30:	c6 01       	movw	r24, r12
    1a32:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <strnlen_P>
    1a36:	4c 01       	movw	r8, r24
    1a38:	68 94       	set
    1a3a:	37 f8       	bld	r3, 7
    1a3c:	82 01       	movw	r16, r4
    1a3e:	0a c0       	rjmp	.+20     	; 0x1a54 <vfprintf+0x142>
    1a40:	0c 5f       	subi	r16, 0xFC	; 252
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	ff e3       	ldi	r31, 0x3F	; 63
    1a46:	f9 83       	std	Y+1, r31	; 0x01
    1a48:	88 24       	eor	r8, r8
    1a4a:	83 94       	inc	r8
    1a4c:	91 2c       	mov	r9, r1
    1a4e:	65 01       	movw	r12, r10
    1a50:	e8 94       	clt
    1a52:	37 f8       	bld	r3, 7
    1a54:	33 fe       	sbrs	r3, 3
    1a56:	2d c0       	rjmp	.+90     	; 0x1ab2 <vfprintf+0x1a0>
    1a58:	52 2c       	mov	r5, r2
    1a5a:	81 14       	cp	r8, r1
    1a5c:	91 04       	cpc	r9, r1
    1a5e:	71 f5       	brne	.+92     	; 0x1abc <vfprintf+0x1aa>
    1a60:	55 20       	and	r5, r5
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <vfprintf+0x154>
    1a64:	68 cf       	rjmp	.-304    	; 0x1936 <vfprintf+0x24>
    1a66:	b7 01       	movw	r22, r14
    1a68:	80 e2       	ldi	r24, 0x20	; 32
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <fputc>
    1a70:	5a 94       	dec	r5
    1a72:	f6 cf       	rjmp	.-20     	; 0x1a60 <vfprintf+0x14e>
    1a74:	f8 01       	movw	r30, r16
    1a76:	80 81       	ld	r24, Z
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	0e 5f       	subi	r16, 0xFE	; 254
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	e4 cf       	rjmp	.-56     	; 0x1a48 <vfprintf+0x136>
    1a80:	28 01       	movw	r4, r16
    1a82:	f2 e0       	ldi	r31, 0x02	; 2
    1a84:	4f 0e       	add	r4, r31
    1a86:	51 1c       	adc	r5, r1
    1a88:	f8 01       	movw	r30, r16
    1a8a:	c0 80       	ld	r12, Z
    1a8c:	d1 80       	ldd	r13, Z+1	; 0x01
    1a8e:	69 2d       	mov	r22, r9
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	36 fc       	sbrc	r3, 6
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <vfprintf+0x188>
    1a96:	6f ef       	ldi	r22, 0xFF	; 255
    1a98:	7f ef       	ldi	r23, 0xFF	; 255
    1a9a:	c6 01       	movw	r24, r12
    1a9c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <strnlen>
    1aa0:	4c 01       	movw	r8, r24
    1aa2:	82 01       	movw	r16, r4
    1aa4:	d5 cf       	rjmp	.-86     	; 0x1a50 <vfprintf+0x13e>
    1aa6:	b7 01       	movw	r22, r14
    1aa8:	80 e2       	ldi	r24, 0x20	; 32
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <fputc>
    1ab0:	2a 94       	dec	r2
    1ab2:	28 14       	cp	r2, r8
    1ab4:	19 04       	cpc	r1, r9
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <vfprintf+0x1a8>
    1ab8:	b0 f7       	brcc	.-20     	; 0x1aa6 <vfprintf+0x194>
    1aba:	ce cf       	rjmp	.-100    	; 0x1a58 <vfprintf+0x146>
    1abc:	f6 01       	movw	r30, r12
    1abe:	37 fc       	sbrc	r3, 7
    1ac0:	85 91       	lpm	r24, Z+
    1ac2:	37 fe       	sbrs	r3, 7
    1ac4:	81 91       	ld	r24, Z+
    1ac6:	6f 01       	movw	r12, r30
    1ac8:	b7 01       	movw	r22, r14
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <fputc>
    1ad0:	51 10       	cpse	r5, r1
    1ad2:	5a 94       	dec	r5
    1ad4:	f1 e0       	ldi	r31, 0x01	; 1
    1ad6:	8f 1a       	sub	r8, r31
    1ad8:	91 08       	sbc	r9, r1
    1ada:	bf cf       	rjmp	.-130    	; 0x1a5a <vfprintf+0x148>
    1adc:	84 36       	cpi	r24, 0x64	; 100
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <vfprintf+0x1d4>
    1ae0:	89 36       	cpi	r24, 0x69	; 105
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <vfprintf+0x1d4>
    1ae4:	77 c0       	rjmp	.+238    	; 0x1bd4 <vfprintf+0x2c2>
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	37 fe       	sbrs	r3, 7
    1aea:	6b c0       	rjmp	.+214    	; 0x1bc2 <vfprintf+0x2b0>
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	0c 5f       	subi	r16, 0xFC	; 252
    1af6:	1f 4f       	sbci	r17, 0xFF	; 255
    1af8:	f3 2d       	mov	r31, r3
    1afa:	ff 76       	andi	r31, 0x6F	; 111
    1afc:	3f 2e       	mov	r3, r31
    1afe:	97 ff       	sbrs	r25, 7
    1b00:	09 c0       	rjmp	.+18     	; 0x1b14 <vfprintf+0x202>
    1b02:	90 95       	com	r25
    1b04:	80 95       	com	r24
    1b06:	70 95       	com	r23
    1b08:	61 95       	neg	r22
    1b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b10:	68 94       	set
    1b12:	37 f8       	bld	r3, 7
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	a5 01       	movw	r20, r10
    1b1a:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__ultoa_invert>
    1b1e:	c8 2e       	mov	r12, r24
    1b20:	ca 18       	sub	r12, r10
    1b22:	8c 2c       	mov	r8, r12
    1b24:	43 2c       	mov	r4, r3
    1b26:	36 fe       	sbrs	r3, 6
    1b28:	0c c0       	rjmp	.+24     	; 0x1b42 <vfprintf+0x230>
    1b2a:	e8 94       	clt
    1b2c:	40 f8       	bld	r4, 0
    1b2e:	c9 14       	cp	r12, r9
    1b30:	40 f4       	brcc	.+16     	; 0x1b42 <vfprintf+0x230>
    1b32:	34 fe       	sbrs	r3, 4
    1b34:	05 c0       	rjmp	.+10     	; 0x1b40 <vfprintf+0x22e>
    1b36:	32 fc       	sbrc	r3, 2
    1b38:	03 c0       	rjmp	.+6      	; 0x1b40 <vfprintf+0x22e>
    1b3a:	f3 2d       	mov	r31, r3
    1b3c:	fe 7e       	andi	r31, 0xEE	; 238
    1b3e:	4f 2e       	mov	r4, r31
    1b40:	89 2c       	mov	r8, r9
    1b42:	44 fe       	sbrs	r4, 4
    1b44:	95 c0       	rjmp	.+298    	; 0x1c70 <vfprintf+0x35e>
    1b46:	fe 01       	movw	r30, r28
    1b48:	ec 0d       	add	r30, r12
    1b4a:	f1 1d       	adc	r31, r1
    1b4c:	80 81       	ld	r24, Z
    1b4e:	80 33       	cpi	r24, 0x30	; 48
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <vfprintf+0x242>
    1b52:	87 c0       	rjmp	.+270    	; 0x1c62 <vfprintf+0x350>
    1b54:	24 2d       	mov	r18, r4
    1b56:	29 7e       	andi	r18, 0xE9	; 233
    1b58:	42 2e       	mov	r4, r18
    1b5a:	84 2d       	mov	r24, r4
    1b5c:	88 70       	andi	r24, 0x08	; 8
    1b5e:	58 2e       	mov	r5, r24
    1b60:	43 fc       	sbrc	r4, 3
    1b62:	95 c0       	rjmp	.+298    	; 0x1c8e <vfprintf+0x37c>
    1b64:	40 fe       	sbrs	r4, 0
    1b66:	8f c0       	rjmp	.+286    	; 0x1c86 <vfprintf+0x374>
    1b68:	9c 2c       	mov	r9, r12
    1b6a:	82 14       	cp	r8, r2
    1b6c:	18 f4       	brcc	.+6      	; 0x1b74 <vfprintf+0x262>
    1b6e:	2c 0c       	add	r2, r12
    1b70:	92 2c       	mov	r9, r2
    1b72:	98 18       	sub	r9, r8
    1b74:	44 fe       	sbrs	r4, 4
    1b76:	91 c0       	rjmp	.+290    	; 0x1c9a <vfprintf+0x388>
    1b78:	b7 01       	movw	r22, r14
    1b7a:	80 e3       	ldi	r24, 0x30	; 48
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <fputc>
    1b82:	42 fe       	sbrs	r4, 2
    1b84:	09 c0       	rjmp	.+18     	; 0x1b98 <vfprintf+0x286>
    1b86:	88 e7       	ldi	r24, 0x78	; 120
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	41 fe       	sbrs	r4, 1
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <vfprintf+0x280>
    1b8e:	88 e5       	ldi	r24, 0x58	; 88
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	b7 01       	movw	r22, r14
    1b94:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <fputc>
    1b98:	c9 14       	cp	r12, r9
    1b9a:	08 f4       	brcc	.+2      	; 0x1b9e <vfprintf+0x28c>
    1b9c:	8a c0       	rjmp	.+276    	; 0x1cb2 <vfprintf+0x3a0>
    1b9e:	ca 94       	dec	r12
    1ba0:	d1 2c       	mov	r13, r1
    1ba2:	9f ef       	ldi	r25, 0xFF	; 255
    1ba4:	c9 1a       	sub	r12, r25
    1ba6:	d9 0a       	sbc	r13, r25
    1ba8:	ca 0c       	add	r12, r10
    1baa:	db 1c       	adc	r13, r11
    1bac:	f6 01       	movw	r30, r12
    1bae:	82 91       	ld	r24, -Z
    1bb0:	6f 01       	movw	r12, r30
    1bb2:	b7 01       	movw	r22, r14
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <fputc>
    1bba:	ac 14       	cp	r10, r12
    1bbc:	bd 04       	cpc	r11, r13
    1bbe:	b1 f7       	brne	.-20     	; 0x1bac <vfprintf+0x29a>
    1bc0:	4f cf       	rjmp	.-354    	; 0x1a60 <vfprintf+0x14e>
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	07 2e       	mov	r0, r23
    1bc8:	00 0c       	add	r0, r0
    1bca:	88 0b       	sbc	r24, r24
    1bcc:	99 0b       	sbc	r25, r25
    1bce:	0e 5f       	subi	r16, 0xFE	; 254
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	92 cf       	rjmp	.-220    	; 0x1af8 <vfprintf+0x1e6>
    1bd4:	d3 2c       	mov	r13, r3
    1bd6:	e8 94       	clt
    1bd8:	d4 f8       	bld	r13, 4
    1bda:	2a e0       	ldi	r18, 0x0A	; 10
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	85 37       	cpi	r24, 0x75	; 117
    1be0:	39 f1       	breq	.+78     	; 0x1c30 <vfprintf+0x31e>
    1be2:	23 2d       	mov	r18, r3
    1be4:	29 7f       	andi	r18, 0xF9	; 249
    1be6:	d2 2e       	mov	r13, r18
    1be8:	8f 36       	cpi	r24, 0x6F	; 111
    1bea:	01 f1       	breq	.+64     	; 0x1c2c <vfprintf+0x31a>
    1bec:	48 f4       	brcc	.+18     	; 0x1c00 <vfprintf+0x2ee>
    1bee:	88 35       	cpi	r24, 0x58	; 88
    1bf0:	a9 f0       	breq	.+42     	; 0x1c1c <vfprintf+0x30a>
    1bf2:	f7 01       	movw	r30, r14
    1bf4:	86 81       	ldd	r24, Z+6	; 0x06
    1bf6:	97 81       	ldd	r25, Z+7	; 0x07
    1bf8:	2b 96       	adiw	r28, 0x0b	; 11
    1bfa:	e2 e1       	ldi	r30, 0x12	; 18
    1bfc:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__epilogue_restores__>
    1c00:	80 37       	cpi	r24, 0x70	; 112
    1c02:	49 f0       	breq	.+18     	; 0x1c16 <vfprintf+0x304>
    1c04:	88 37       	cpi	r24, 0x78	; 120
    1c06:	a9 f7       	brne	.-22     	; 0x1bf2 <vfprintf+0x2e0>
    1c08:	d4 fe       	sbrs	r13, 4
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <vfprintf+0x2fe>
    1c0c:	68 94       	set
    1c0e:	d2 f8       	bld	r13, 2
    1c10:	20 e1       	ldi	r18, 0x10	; 16
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	0d c0       	rjmp	.+26     	; 0x1c30 <vfprintf+0x31e>
    1c16:	68 94       	set
    1c18:	d4 f8       	bld	r13, 4
    1c1a:	f6 cf       	rjmp	.-20     	; 0x1c08 <vfprintf+0x2f6>
    1c1c:	34 fe       	sbrs	r3, 4
    1c1e:	03 c0       	rjmp	.+6      	; 0x1c26 <vfprintf+0x314>
    1c20:	82 2f       	mov	r24, r18
    1c22:	86 60       	ori	r24, 0x06	; 6
    1c24:	d8 2e       	mov	r13, r24
    1c26:	20 e1       	ldi	r18, 0x10	; 16
    1c28:	32 e0       	ldi	r19, 0x02	; 2
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <vfprintf+0x31e>
    1c2c:	28 e0       	ldi	r18, 0x08	; 8
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	f8 01       	movw	r30, r16
    1c32:	d7 fe       	sbrs	r13, 7
    1c34:	0f c0       	rjmp	.+30     	; 0x1c54 <vfprintf+0x342>
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	0c 5f       	subi	r16, 0xFC	; 252
    1c40:	1f 4f       	sbci	r17, 0xFF	; 255
    1c42:	a5 01       	movw	r20, r10
    1c44:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__ultoa_invert>
    1c48:	c8 2e       	mov	r12, r24
    1c4a:	ca 18       	sub	r12, r10
    1c4c:	3d 2c       	mov	r3, r13
    1c4e:	e8 94       	clt
    1c50:	37 f8       	bld	r3, 7
    1c52:	67 cf       	rjmp	.-306    	; 0x1b22 <vfprintf+0x210>
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	0e 5f       	subi	r16, 0xFE	; 254
    1c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c60:	f0 cf       	rjmp	.-32     	; 0x1c42 <vfprintf+0x330>
    1c62:	42 fc       	sbrc	r4, 2
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <vfprintf+0x358>
    1c66:	83 94       	inc	r8
    1c68:	78 cf       	rjmp	.-272    	; 0x1b5a <vfprintf+0x248>
    1c6a:	83 94       	inc	r8
    1c6c:	83 94       	inc	r8
    1c6e:	75 cf       	rjmp	.-278    	; 0x1b5a <vfprintf+0x248>
    1c70:	84 2d       	mov	r24, r4
    1c72:	86 78       	andi	r24, 0x86	; 134
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <vfprintf+0x366>
    1c76:	71 cf       	rjmp	.-286    	; 0x1b5a <vfprintf+0x248>
    1c78:	f6 cf       	rjmp	.-20     	; 0x1c66 <vfprintf+0x354>
    1c7a:	b7 01       	movw	r22, r14
    1c7c:	80 e2       	ldi	r24, 0x20	; 32
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <fputc>
    1c84:	83 94       	inc	r8
    1c86:	82 14       	cp	r8, r2
    1c88:	c0 f3       	brcs	.-16     	; 0x1c7a <vfprintf+0x368>
    1c8a:	51 2c       	mov	r5, r1
    1c8c:	73 cf       	rjmp	.-282    	; 0x1b74 <vfprintf+0x262>
    1c8e:	52 2c       	mov	r5, r2
    1c90:	58 18       	sub	r5, r8
    1c92:	82 14       	cp	r8, r2
    1c94:	08 f4       	brcc	.+2      	; 0x1c98 <vfprintf+0x386>
    1c96:	6e cf       	rjmp	.-292    	; 0x1b74 <vfprintf+0x262>
    1c98:	f8 cf       	rjmp	.-16     	; 0x1c8a <vfprintf+0x378>
    1c9a:	84 2d       	mov	r24, r4
    1c9c:	86 78       	andi	r24, 0x86	; 134
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <vfprintf+0x390>
    1ca0:	7b cf       	rjmp	.-266    	; 0x1b98 <vfprintf+0x286>
    1ca2:	8b e2       	ldi	r24, 0x2B	; 43
    1ca4:	41 fe       	sbrs	r4, 1
    1ca6:	80 e2       	ldi	r24, 0x20	; 32
    1ca8:	47 fc       	sbrc	r4, 7
    1caa:	8d e2       	ldi	r24, 0x2D	; 45
    1cac:	b7 01       	movw	r22, r14
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	71 cf       	rjmp	.-286    	; 0x1b94 <vfprintf+0x282>
    1cb2:	b7 01       	movw	r22, r14
    1cb4:	80 e3       	ldi	r24, 0x30	; 48
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <fputc>
    1cbc:	9a 94       	dec	r9
    1cbe:	6c cf       	rjmp	.-296    	; 0x1b98 <vfprintf+0x286>
    1cc0:	8f ef       	ldi	r24, 0xFF	; 255
    1cc2:	9f ef       	ldi	r25, 0xFF	; 255
    1cc4:	99 cf       	rjmp	.-206    	; 0x1bf8 <vfprintf+0x2e6>

00001cc6 <strnlen_P>:
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	05 90       	lpm	r0, Z+
    1cca:	61 50       	subi	r22, 0x01	; 1
    1ccc:	70 40       	sbci	r23, 0x00	; 0
    1cce:	01 10       	cpse	r0, r1
    1cd0:	d8 f7       	brcc	.-10     	; 0x1cc8 <strnlen_P+0x2>
    1cd2:	80 95       	com	r24
    1cd4:	90 95       	com	r25
    1cd6:	8e 0f       	add	r24, r30
    1cd8:	9f 1f       	adc	r25, r31
    1cda:	08 95       	ret

00001cdc <strnlen>:
    1cdc:	fc 01       	movw	r30, r24
    1cde:	61 50       	subi	r22, 0x01	; 1
    1ce0:	70 40       	sbci	r23, 0x00	; 0
    1ce2:	01 90       	ld	r0, Z+
    1ce4:	01 10       	cpse	r0, r1
    1ce6:	d8 f7       	brcc	.-10     	; 0x1cde <strnlen+0x2>
    1ce8:	80 95       	com	r24
    1cea:	90 95       	com	r25
    1cec:	8e 0f       	add	r24, r30
    1cee:	9f 1f       	adc	r25, r31
    1cf0:	08 95       	ret

00001cf2 <fputc>:
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	18 2f       	mov	r17, r24
    1cfc:	09 2f       	mov	r16, r25
    1cfe:	eb 01       	movw	r28, r22
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	81 fd       	sbrc	r24, 1
    1d04:	09 c0       	rjmp	.+18     	; 0x1d18 <fputc+0x26>
    1d06:	1f ef       	ldi	r17, 0xFF	; 255
    1d08:	0f ef       	ldi	r16, 0xFF	; 255
    1d0a:	81 2f       	mov	r24, r17
    1d0c:	90 2f       	mov	r25, r16
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	08 95       	ret
    1d18:	82 ff       	sbrs	r24, 2
    1d1a:	14 c0       	rjmp	.+40     	; 0x1d44 <fputc+0x52>
    1d1c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d1e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d20:	8c 81       	ldd	r24, Y+4	; 0x04
    1d22:	9d 81       	ldd	r25, Y+5	; 0x05
    1d24:	28 17       	cp	r18, r24
    1d26:	39 07       	cpc	r19, r25
    1d28:	3c f4       	brge	.+14     	; 0x1d38 <fputc+0x46>
    1d2a:	e8 81       	ld	r30, Y
    1d2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d2e:	cf 01       	movw	r24, r30
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	99 83       	std	Y+1, r25	; 0x01
    1d34:	88 83       	st	Y, r24
    1d36:	10 83       	st	Z, r17
    1d38:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	9f 83       	std	Y+7, r25	; 0x07
    1d40:	8e 83       	std	Y+6, r24	; 0x06
    1d42:	e3 cf       	rjmp	.-58     	; 0x1d0a <fputc+0x18>
    1d44:	e8 85       	ldd	r30, Y+8	; 0x08
    1d46:	f9 85       	ldd	r31, Y+9	; 0x09
    1d48:	81 2f       	mov	r24, r17
    1d4a:	09 95       	icall
    1d4c:	89 2b       	or	r24, r25
    1d4e:	a1 f3       	breq	.-24     	; 0x1d38 <fputc+0x46>
    1d50:	da cf       	rjmp	.-76     	; 0x1d06 <fputc+0x14>

00001d52 <__ultoa_invert>:
    1d52:	fa 01       	movw	r30, r20
    1d54:	aa 27       	eor	r26, r26
    1d56:	28 30       	cpi	r18, 0x08	; 8
    1d58:	51 f1       	breq	.+84     	; 0x1dae <__ultoa_invert+0x5c>
    1d5a:	20 31       	cpi	r18, 0x10	; 16
    1d5c:	81 f1       	breq	.+96     	; 0x1dbe <__ultoa_invert+0x6c>
    1d5e:	e8 94       	clt
    1d60:	6f 93       	push	r22
    1d62:	6e 7f       	andi	r22, 0xFE	; 254
    1d64:	6e 5f       	subi	r22, 0xFE	; 254
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	af 4f       	sbci	r26, 0xFF	; 255
    1d6e:	b1 e0       	ldi	r27, 0x01	; 1
    1d70:	3e d0       	rcall	.+124    	; 0x1dee <__ultoa_invert+0x9c>
    1d72:	b4 e0       	ldi	r27, 0x04	; 4
    1d74:	3c d0       	rcall	.+120    	; 0x1dee <__ultoa_invert+0x9c>
    1d76:	67 0f       	add	r22, r23
    1d78:	78 1f       	adc	r23, r24
    1d7a:	89 1f       	adc	r24, r25
    1d7c:	9a 1f       	adc	r25, r26
    1d7e:	a1 1d       	adc	r26, r1
    1d80:	68 0f       	add	r22, r24
    1d82:	79 1f       	adc	r23, r25
    1d84:	8a 1f       	adc	r24, r26
    1d86:	91 1d       	adc	r25, r1
    1d88:	a1 1d       	adc	r26, r1
    1d8a:	6a 0f       	add	r22, r26
    1d8c:	71 1d       	adc	r23, r1
    1d8e:	81 1d       	adc	r24, r1
    1d90:	91 1d       	adc	r25, r1
    1d92:	a1 1d       	adc	r26, r1
    1d94:	20 d0       	rcall	.+64     	; 0x1dd6 <__ultoa_invert+0x84>
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <__ultoa_invert+0x48>
    1d98:	68 94       	set
    1d9a:	3f 91       	pop	r19
    1d9c:	2a e0       	ldi	r18, 0x0A	; 10
    1d9e:	26 9f       	mul	r18, r22
    1da0:	11 24       	eor	r1, r1
    1da2:	30 19       	sub	r19, r0
    1da4:	30 5d       	subi	r19, 0xD0	; 208
    1da6:	31 93       	st	Z+, r19
    1da8:	de f6       	brtc	.-74     	; 0x1d60 <__ultoa_invert+0xe>
    1daa:	cf 01       	movw	r24, r30
    1dac:	08 95       	ret
    1dae:	46 2f       	mov	r20, r22
    1db0:	47 70       	andi	r20, 0x07	; 7
    1db2:	40 5d       	subi	r20, 0xD0	; 208
    1db4:	41 93       	st	Z+, r20
    1db6:	b3 e0       	ldi	r27, 0x03	; 3
    1db8:	0f d0       	rcall	.+30     	; 0x1dd8 <__ultoa_invert+0x86>
    1dba:	c9 f7       	brne	.-14     	; 0x1dae <__ultoa_invert+0x5c>
    1dbc:	f6 cf       	rjmp	.-20     	; 0x1daa <__ultoa_invert+0x58>
    1dbe:	46 2f       	mov	r20, r22
    1dc0:	4f 70       	andi	r20, 0x0F	; 15
    1dc2:	40 5d       	subi	r20, 0xD0	; 208
    1dc4:	4a 33       	cpi	r20, 0x3A	; 58
    1dc6:	18 f0       	brcs	.+6      	; 0x1dce <__ultoa_invert+0x7c>
    1dc8:	49 5d       	subi	r20, 0xD9	; 217
    1dca:	31 fd       	sbrc	r19, 1
    1dcc:	40 52       	subi	r20, 0x20	; 32
    1dce:	41 93       	st	Z+, r20
    1dd0:	02 d0       	rcall	.+4      	; 0x1dd6 <__ultoa_invert+0x84>
    1dd2:	a9 f7       	brne	.-22     	; 0x1dbe <__ultoa_invert+0x6c>
    1dd4:	ea cf       	rjmp	.-44     	; 0x1daa <__ultoa_invert+0x58>
    1dd6:	b4 e0       	ldi	r27, 0x04	; 4
    1dd8:	a6 95       	lsr	r26
    1dda:	97 95       	ror	r25
    1ddc:	87 95       	ror	r24
    1dde:	77 95       	ror	r23
    1de0:	67 95       	ror	r22
    1de2:	ba 95       	dec	r27
    1de4:	c9 f7       	brne	.-14     	; 0x1dd8 <__ultoa_invert+0x86>
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	61 05       	cpc	r22, r1
    1dea:	71 05       	cpc	r23, r1
    1dec:	08 95       	ret
    1dee:	9b 01       	movw	r18, r22
    1df0:	ac 01       	movw	r20, r24
    1df2:	0a 2e       	mov	r0, r26
    1df4:	06 94       	lsr	r0
    1df6:	57 95       	ror	r21
    1df8:	47 95       	ror	r20
    1dfa:	37 95       	ror	r19
    1dfc:	27 95       	ror	r18
    1dfe:	ba 95       	dec	r27
    1e00:	c9 f7       	brne	.-14     	; 0x1df4 <__ultoa_invert+0xa2>
    1e02:	62 0f       	add	r22, r18
    1e04:	73 1f       	adc	r23, r19
    1e06:	84 1f       	adc	r24, r20
    1e08:	95 1f       	adc	r25, r21
    1e0a:	a0 1d       	adc	r26, r0
    1e0c:	08 95       	ret

00001e0e <__prologue_saves__>:
    1e0e:	2f 92       	push	r2
    1e10:	3f 92       	push	r3
    1e12:	4f 92       	push	r4
    1e14:	5f 92       	push	r5
    1e16:	6f 92       	push	r6
    1e18:	7f 92       	push	r7
    1e1a:	8f 92       	push	r8
    1e1c:	9f 92       	push	r9
    1e1e:	af 92       	push	r10
    1e20:	bf 92       	push	r11
    1e22:	cf 92       	push	r12
    1e24:	df 92       	push	r13
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	ca 1b       	sub	r28, r26
    1e38:	db 0b       	sbc	r29, r27
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	09 94       	ijmp

00001e46 <__epilogue_restores__>:
    1e46:	2a 88       	ldd	r2, Y+18	; 0x12
    1e48:	39 88       	ldd	r3, Y+17	; 0x11
    1e4a:	48 88       	ldd	r4, Y+16	; 0x10
    1e4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e50:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e52:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e54:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e56:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e58:	b9 84       	ldd	r11, Y+9	; 0x09
    1e5a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e5c:	df 80       	ldd	r13, Y+7	; 0x07
    1e5e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e60:	fd 80       	ldd	r15, Y+5	; 0x05
    1e62:	0c 81       	ldd	r16, Y+4	; 0x04
    1e64:	1b 81       	ldd	r17, Y+3	; 0x03
    1e66:	aa 81       	ldd	r26, Y+2	; 0x02
    1e68:	b9 81       	ldd	r27, Y+1	; 0x01
    1e6a:	ce 0f       	add	r28, r30
    1e6c:	d1 1d       	adc	r29, r1
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	ed 01       	movw	r28, r26
    1e7a:	08 95       	ret

00001e7c <_exit>:
    1e7c:	f8 94       	cli

00001e7e <__stop_program>:
    1e7e:	ff cf       	rjmp	.-2      	; 0x1e7e <__stop_program>
