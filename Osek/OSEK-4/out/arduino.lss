
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ae  00800100  0000203e  000020d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000203e  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000143  008002ae  008002ae  00002280  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  000022d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018105  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000353e  00000000  00000000  0001aa1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000048e5  00000000  00000000  0001df5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000105c  00000000  00000000  00022840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000042c6  00000000  00000000  0002389c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000077a8  00000000  00000000  00027b62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e0  00000000  00000000  0002f30a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__vector_1>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__vector_11>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__vector_18>
      4c:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__vector_19>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	a4 05       	cpc	r26, r4

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	12 e0       	ldi	r17, 0x02	; 2
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ee e3       	ldi	r30, 0x3E	; 62
      ce:	f0 e2       	ldi	r31, 0x20	; 32
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ae 3a       	cpi	r26, 0xAE	; 174
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	ae ea       	ldi	r26, 0xAE	; 174
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a1 3f       	cpi	r26, 0xF1	; 241
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	cd e5       	ldi	r28, 0x5D	; 93
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	21 97       	sbiw	r28, 0x01	; 1
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 17 10 	call	0x202e	; 0x202e <__tablejump2__>
      fc:	cc 35       	cpi	r28, 0x5C	; 92
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 25 02 	call	0x44a	; 0x44a <main>
     106:	0c 94 1d 10 	jmp	0x203a	; 0x203a <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__vector_default>
	...

00000110 <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     110:	2f 92       	push	r2
     112:	3f 92       	push	r3
     114:	4f 92       	push	r4
     116:	5f 92       	push	r5
     118:	6f 92       	push	r6
     11a:	7f 92       	push	r7
     11c:	8f 92       	push	r8
     11e:	9f 92       	push	r9
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	e4 2f       	mov	r30, r20
     136:	f5 2f       	mov	r31, r21
     138:	41 90       	ld	r4, Z+
     13a:	50 80       	ld	r5, Z
     13c:	4f 92       	push	r4
     13e:	5f 92       	push	r5
     140:	e4 2f       	mov	r30, r20
     142:	f5 2f       	mov	r31, r21
     144:	4d b6       	in	r4, 0x3d	; 61
     146:	5e b6       	in	r5, 0x3e	; 62
     148:	41 92       	st	Z+, r4
     14a:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     14c:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>

00000150 <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     150:	e6 2f       	mov	r30, r22
     152:	f7 2f       	mov	r31, r23
     154:	41 90       	ld	r4, Z+
     156:	50 80       	ld	r5, Z
     158:	4d be       	out	0x3d, r4	; 61
     15a:	5e be       	out	0x3e, r5	; 62
     15c:	5f 90       	pop	r5
     15e:	4f 90       	pop	r4
     160:	e6 2f       	mov	r30, r22
     162:	f7 2f       	mov	r31, r23
     164:	41 92       	st	Z+, r4
     166:	50 82       	st	Z, r5
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	bf 90       	pop	r11
     17a:	af 90       	pop	r10
     17c:	9f 90       	pop	r9
     17e:	8f 90       	pop	r8
     180:	7f 90       	pop	r7
     182:	6f 90       	pop	r6
     184:	5f 90       	pop	r5
     186:	4f 90       	pop	r4
     188:	3f 90       	pop	r3
     18a:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     18c:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <osEE_scheduler_task_wrapper_restore>

00000190 <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     190:	e6 2f       	mov	r30, r22
    mov r31, r23
     192:	f7 2f       	mov	r31, r23
    ld  r20, z+
     194:	41 91       	ld	r20, Z+
    ld  r21, z
     196:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     198:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     19a:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     19c:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <osEE_scheduler_task_wrapper_run>

000001a0 <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     1a0:	2f 92       	push	r2
     1a2:	3f 92       	push	r3
     1a4:	4f 92       	push	r4
     1a6:	5f 92       	push	r5
     1a8:	6f 92       	push	r6
     1aa:	7f 92       	push	r7
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	e4 2f       	mov	r30, r20
     1c6:	f5 2f       	mov	r31, r21
     1c8:	41 90       	ld	r4, Z+
     1ca:	50 80       	ld	r5, Z
     1cc:	4f 92       	push	r4
     1ce:	5f 92       	push	r5
     1d0:	e4 2f       	mov	r30, r20
     1d2:	f5 2f       	mov	r31, r21
     1d4:	4d b6       	in	r4, 0x3d	; 61
     1d6:	5e b6       	in	r5, 0x3e	; 62
     1d8:	41 92       	st	Z+, r4
     1da:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     1dc:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

000001e0 <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     1e0:	e8 2f       	mov	r30, r24
    mov r31, r25
     1e2:	f9 2f       	mov	r31, r25
    ld  r20, z+
     1e4:	41 91       	ld	r20, Z+
    ld  r21, z
     1e6:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     1e8:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     1ea:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     1ec:	e6 2f       	mov	r30, r22
    mov r31, r23
     1ee:	f7 2f       	mov	r31, r23

    ijmp
     1f0:	09 94       	ijmp
	...

000001f4 <StartupHook>:
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	84 e0       	ldi	r24, 0x04	; 4
     1f8:	0e 94 9c 03 	call	0x738	; 0x738 <pinMode>
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	84 e0       	ldi	r24, 0x04	; 4
     200:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	85 e0       	ldi	r24, 0x05	; 5
     208:	0e 94 9c 03 	call	0x738	; 0x738 <pinMode>
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	85 e0       	ldi	r24, 0x05	; 5
     210:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     214:	61 e0       	ldi	r22, 0x01	; 1
     216:	86 e0       	ldi	r24, 0x06	; 6
     218:	0e 94 9c 03 	call	0x738	; 0x738 <pinMode>
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	86 e0       	ldi	r24, 0x06	; 6
     220:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	87 e0       	ldi	r24, 0x07	; 7
     228:	0e 94 9c 03 	call	0x738	; 0x738 <pinMode>
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	87 e0       	ldi	r24, 0x07	; 7
     230:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	83 e0       	ldi	r24, 0x03	; 3
     238:	0e 94 9c 03 	call	0x738	; 0x738 <pinMode>
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	0e 94 9c 03 	call	0x738	; 0x738 <pinMode>
     24c:	e9 e6       	ldi	r30, 0x69	; 105
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	82 60       	ori	r24, 0x02	; 2
     254:	80 83       	st	Z, r24
     256:	e8 9a       	sbi	0x1d, 0	; 29
     258:	26 e0       	ldi	r18, 0x06	; 6
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	52 ec       	ldi	r21, 0xC2	; 194
     25e:	61 e0       	ldi	r22, 0x01	; 1
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	8a eb       	ldi	r24, 0xBA	; 186
     264:	92 e0       	ldi	r25, 0x02	; 2
     266:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <_ZN14HardwareSerial5beginEmh>

0000026a <error_led>:
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	84 e0       	ldi	r24, 0x04	; 4
     26e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	85 e0       	ldi	r24, 0x05	; 5
     276:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	86 e0       	ldi	r24, 0x06	; 6
     27e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	87 e0       	ldi	r24, 0x07	; 7
     286:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	83 e0       	ldi	r24, 0x03	; 3
     28e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     292:	6a ef       	ldi	r22, 0xFA	; 250
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <delay>
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	84 e0       	ldi	r24, 0x04	; 4
     2a2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	85 e0       	ldi	r24, 0x05	; 5
     2aa:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	86 e0       	ldi	r24, 0x06	; 6
     2b2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	87 e0       	ldi	r24, 0x07	; 7
     2ba:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	83 e0       	ldi	r24, 0x03	; 3
     2c2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     2c6:	69 e1       	ldi	r22, 0x19	; 25
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <delay>

000002d2 <ErrorHook>:
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	ec 01       	movw	r28, r24
     2dc:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <osEE_get_service_id>
     2e0:	8c 01       	movw	r16, r24
     2e2:	c4 30       	cpi	r28, 0x04	; 4
     2e4:	d1 05       	cpc	r29, r1
     2e6:	09 f4       	brne	.+2      	; 0x2ea <ErrorHook+0x18>
     2e8:	53 c0       	rjmp	.+166    	; 0x390 <ErrorHook+0xbe>
     2ea:	e8 f4       	brcc	.+58     	; 0x326 <ErrorHook+0x54>
     2ec:	c1 30       	cpi	r28, 0x01	; 1
     2ee:	d1 05       	cpc	r29, r1
     2f0:	a1 f1       	breq	.+104    	; 0x35a <ErrorHook+0x88>
     2f2:	c3 30       	cpi	r28, 0x03	; 3
     2f4:	d1 05       	cpc	r29, r1
     2f6:	e9 f1       	breq	.+122    	; 0x372 <ErrorHook+0xa0>
     2f8:	4a e0       	ldi	r20, 0x0A	; 10
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	be 01       	movw	r22, r28
     2fe:	8a eb       	ldi	r24, 0xBA	; 186
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN5Print5printEii>
     306:	69 e6       	ldi	r22, 0x69	; 105
     308:	71 e0       	ldi	r23, 0x01	; 1
     30a:	8a eb       	ldi	r24, 0xBA	; 186
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEPKc>
     312:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <osEE_get_service_id>
     316:	4a e0       	ldi	r20, 0x0A	; 10
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	bc 01       	movw	r22, r24
     31c:	8a eb       	ldi	r24, 0xBA	; 186
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN5Print7printlnEii>
     324:	3b c0       	rjmp	.+118    	; 0x39c <ErrorHook+0xca>
     326:	c7 30       	cpi	r28, 0x07	; 7
     328:	d1 05       	cpc	r29, r1
     32a:	f1 f1       	breq	.+124    	; 0x3a8 <ErrorHook+0xd6>
     32c:	ce 30       	cpi	r28, 0x0E	; 14
     32e:	d1 05       	cpc	r29, r1
     330:	19 f7       	brne	.-58     	; 0x2f8 <ErrorHook+0x26>
     332:	6a e9       	ldi	r22, 0x9A	; 154
     334:	71 e0       	ldi	r23, 0x01	; 1
     336:	8a eb       	ldi	r24, 0xBA	; 186
     338:	92 e0       	ldi	r25, 0x02	; 2
     33a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEPKc>
     33e:	06 32       	cpi	r16, 0x26	; 38
     340:	11 05       	cpc	r17, r1
     342:	09 f0       	breq	.+2      	; 0x346 <ErrorHook+0x74>
     344:	41 c0       	rjmp	.+130    	; 0x3c8 <ErrorHook+0xf6>
     346:	6e ea       	ldi	r22, 0xAE	; 174
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	8a eb       	ldi	r24, 0xBA	; 186
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	0c 94 20 06 	jmp	0xc40	; 0xc40 <_ZN5Print7printlnEPKc>
     35a:	4a e0       	ldi	r20, 0x0A	; 10
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	8a eb       	ldi	r24, 0xBA	; 186
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <_ZN5Print7printlnEii>
     372:	62 e6       	ldi	r22, 0x62	; 98
     374:	71 e0       	ldi	r23, 0x01	; 1
     376:	8a eb       	ldi	r24, 0xBA	; 186
     378:	92 e0       	ldi	r25, 0x02	; 2
     37a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEPKc>
     37e:	4a e0       	ldi	r20, 0x0A	; 10
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	b8 01       	movw	r22, r16
     384:	8a eb       	ldi	r24, 0xBA	; 186
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN5Print7printlnEii>
     38c:	0e 94 35 01 	call	0x26a	; 0x26a <error_led>
     390:	6b e6       	ldi	r22, 0x6B	; 107
     392:	71 e0       	ldi	r23, 0x01	; 1
     394:	8a eb       	ldi	r24, 0xBA	; 186
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEPKc>
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	0c 94 35 01 	jmp	0x26a	; 0x26a <error_led>
     3a8:	66 e7       	ldi	r22, 0x76	; 118
     3aa:	71 e0       	ldi	r23, 0x01	; 1
     3ac:	8a eb       	ldi	r24, 0xBA	; 186
     3ae:	92 e0       	ldi	r25, 0x02	; 2
     3b0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEPKc>
     3b4:	08 32       	cpi	r16, 0x28	; 40
     3b6:	11 05       	cpc	r17, r1
     3b8:	89 f7       	brne	.-30     	; 0x39c <ErrorHook+0xca>
     3ba:	62 e8       	ldi	r22, 0x82	; 130
     3bc:	71 e0       	ldi	r23, 0x01	; 1
     3be:	8a eb       	ldi	r24, 0xBA	; 186
     3c0:	92 e0       	ldi	r25, 0x02	; 2
     3c2:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZN5Print7printlnEPKc>
     3c6:	ea cf       	rjmp	.-44     	; 0x39c <ErrorHook+0xca>
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	08 95       	ret

000003d2 <idle_hook>:
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	00 d0       	rcall	.+0      	; 0x3dc <idle_hook+0xa>
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	8d b7       	in	r24, 0x3d	; 61
     3e2:	9e b7       	in	r25, 0x3e	; 62
     3e4:	9a 83       	std	Y+2, r25	; 0x02
     3e6:	89 83       	std	Y+1, r24	; 0x01
     3e8:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <__data_end>
     3ec:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <__data_end+0x1>
     3f0:	89 2b       	or	r24, r25
     3f2:	a9 f4       	brne	.+42     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <__data_end+0x1>
     3fc:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__data_end>
     400:	f8 94       	cli
     402:	83 e4       	ldi	r24, 0x43	; 67
     404:	94 e0       	ldi	r25, 0x04	; 4
     406:	89 2b       	or	r24, r25
     408:	11 f0       	breq	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40a:	0e 94 43 04 	call	0x886	; 0x886 <_Z14serialEventRunv>
     40e:	78 94       	sei
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	08 95       	ret
     41e:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <__data_end>
     422:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <__data_end+0x1>
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	9a 81       	ldd	r25, Y+2	; 0x02
     42a:	28 17       	cp	r18, r24
     42c:	39 07       	cpc	r19, r25
     42e:	41 f3       	breq	.-48     	; 0x400 <__LOCK_REGION_LENGTH__>
     430:	f8 94       	cli
     432:	83 ec       	ldi	r24, 0xC3	; 195
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 2e 02 	call	0x45c	; 0x45c <serial_print>
     43a:	03 e4       	ldi	r16, 0x43	; 67
     43c:	14 e0       	ldi	r17, 0x04	; 4
     43e:	01 15       	cp	r16, r1
     440:	11 05       	cpc	r17, r1
     442:	e9 f3       	breq	.-6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     444:	0e 94 43 04 	call	0x886	; 0x886 <_Z14serialEventRunv>
     448:	fa cf       	rjmp	.-12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>

0000044a <main>:
     44a:	0e 94 38 03 	call	0x670	; 0x670 <init>
     44e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <startupmode>
     452:	0e 94 11 07 	call	0xe22	; 0xe22 <StartOS>
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	08 95       	ret

0000045c <serial_print>:
     45c:	f8 94       	cli
     45e:	fc 01       	movw	r30, r24
     460:	01 90       	ld	r0, Z+
     462:	00 20       	and	r0, r0
     464:	e9 f7       	brne	.-6      	; 0x460 <serial_print+0x4>
     466:	31 97       	sbiw	r30, 0x01	; 1
     468:	af 01       	movw	r20, r30
     46a:	48 1b       	sub	r20, r24
     46c:	59 0b       	sbc	r21, r25
     46e:	bc 01       	movw	r22, r24
     470:	8a eb       	ldi	r24, 0xBA	; 186
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN5Print5writeEPKhj>
     478:	78 94       	sei
     47a:	08 95       	ret

0000047c <ButtonISR>:
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	68 ee       	ldi	r22, 0xE8	; 232
     482:	73 e0       	ldi	r23, 0x03	; 3
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	0e 94 36 08 	call	0x106c	; 0x106c <SetRelAlarm>
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	0c 94 22 09 	jmp	0x1244	; 0x1244 <SetEvent>

00000494 <long_operation>:
     494:	cf 93       	push	r28
     496:	c8 2f       	mov	r28, r24
     498:	f8 94       	cli
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     4a0:	78 94       	sei
     4a2:	64 ef       	ldi	r22, 0xF4	; 244
     4a4:	71 e0       	ldi	r23, 0x01	; 1
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 ff 02 	call	0x5fe	; 0x5fe <delay>
     4ae:	f8 94       	cli
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	8c 2f       	mov	r24, r28
     4b4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <digitalWrite>
     4b8:	78 94       	sei
     4ba:	64 ef       	ldi	r22, 0xF4	; 244
     4bc:	71 e0       	ldi	r23, 0x01	; 1
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	cf 91       	pop	r28
     4c4:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <delay>

000004c8 <FuncTask1>:
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <FuncTask1+0x6>
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 9b 08 	call	0x1136	; 0x1136 <WaitEvent>
     4da:	be 01       	movw	r22, r28
     4dc:	6f 5f       	subi	r22, 0xFF	; 255
     4de:	7f 4f       	sbci	r23, 0xFF	; 255
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	0e 94 b6 09 	call	0x136c	; 0x136c <GetEvent>
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	80 ff       	sbrs	r24, 0
     4ea:	08 c0       	rjmp	.+16     	; 0x4fc <FuncTask1+0x34>
     4ec:	84 e0       	ldi	r24, 0x04	; 4
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 4a 02 	call	0x494	; 0x494 <long_operation>
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 2b 0a 	call	0x1456	; 0x1456 <ClearEvent>
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	80 ff       	sbrs	r24, 0
     500:	e8 cf       	rjmp	.-48     	; 0x4d2 <FuncTask1+0xa>
     502:	87 e0       	ldi	r24, 0x07	; 7
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 4a 02 	call	0x494	; 0x494 <long_operation>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <ClearEvent>
     512:	df cf       	rjmp	.-66     	; 0x4d2 <FuncTask1+0xa>

00000514 <FuncTask2>:
     514:	83 e0       	ldi	r24, 0x03	; 3
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 4a 02 	call	0x494	; 0x494 <long_operation>
     51c:	0c 94 04 08 	jmp	0x1008	; 0x1008 <TerminateTask>

00000520 <__vector_16>:
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	2f 93       	push	r18
     52c:	3f 93       	push	r19
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <timer0_millis>
     53a:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <timer0_millis+0x1>
     53e:	a0 91 b4 02 	lds	r26, 0x02B4	; 0x8002b4 <timer0_millis+0x2>
     542:	b0 91 b5 02 	lds	r27, 0x02B5	; 0x8002b5 <timer0_millis+0x3>
     546:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <timer0_fract>
     54a:	23 e0       	ldi	r18, 0x03	; 3
     54c:	23 0f       	add	r18, r19
     54e:	2d 37       	cpi	r18, 0x7D	; 125
     550:	58 f5       	brcc	.+86     	; 0x5a8 <__vector_16+0x88>
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	a1 1d       	adc	r26, r1
     556:	b1 1d       	adc	r27, r1
     558:	20 93 b1 02 	sts	0x02B1, r18	; 0x8002b1 <timer0_fract>
     55c:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <timer0_millis>
     560:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <timer0_millis+0x1>
     564:	a0 93 b4 02 	sts	0x02B4, r26	; 0x8002b4 <timer0_millis+0x2>
     568:	b0 93 b5 02 	sts	0x02B5, r27	; 0x8002b5 <timer0_millis+0x3>
     56c:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <timer0_overflow_count>
     570:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <timer0_overflow_count+0x1>
     574:	a0 91 b8 02 	lds	r26, 0x02B8	; 0x8002b8 <timer0_overflow_count+0x2>
     578:	b0 91 b9 02 	lds	r27, 0x02B9	; 0x8002b9 <timer0_overflow_count+0x3>
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	a1 1d       	adc	r26, r1
     580:	b1 1d       	adc	r27, r1
     582:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <timer0_overflow_count>
     586:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <timer0_overflow_count+0x1>
     58a:	a0 93 b8 02 	sts	0x02B8, r26	; 0x8002b8 <timer0_overflow_count+0x2>
     58e:	b0 93 b9 02 	sts	0x02B9, r27	; 0x8002b9 <timer0_overflow_count+0x3>
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	3f 91       	pop	r19
     59c:	2f 91       	pop	r18
     59e:	0f 90       	pop	r0
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	0f 90       	pop	r0
     5a4:	1f 90       	pop	r1
     5a6:	18 95       	reti
     5a8:	26 e8       	ldi	r18, 0x86	; 134
     5aa:	23 0f       	add	r18, r19
     5ac:	02 96       	adiw	r24, 0x02	; 2
     5ae:	a1 1d       	adc	r26, r1
     5b0:	b1 1d       	adc	r27, r1
     5b2:	d2 cf       	rjmp	.-92     	; 0x558 <__vector_16+0x38>

000005b4 <micros>:
     5b4:	3f b7       	in	r19, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <timer0_overflow_count>
     5bc:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <timer0_overflow_count+0x1>
     5c0:	a0 91 b8 02 	lds	r26, 0x02B8	; 0x8002b8 <timer0_overflow_count+0x2>
     5c4:	b0 91 b9 02 	lds	r27, 0x02B9	; 0x8002b9 <timer0_overflow_count+0x3>
     5c8:	26 b5       	in	r18, 0x26	; 38
     5ca:	a8 9b       	sbis	0x15, 0	; 21
     5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <micros+0x24>
     5ce:	2f 3f       	cpi	r18, 0xFF	; 255
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <micros+0x24>
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	a1 1d       	adc	r26, r1
     5d6:	b1 1d       	adc	r27, r1
     5d8:	3f bf       	out	0x3f, r19	; 63
     5da:	ba 2f       	mov	r27, r26
     5dc:	a9 2f       	mov	r26, r25
     5de:	98 2f       	mov	r25, r24
     5e0:	88 27       	eor	r24, r24
     5e2:	bc 01       	movw	r22, r24
     5e4:	cd 01       	movw	r24, r26
     5e6:	62 0f       	add	r22, r18
     5e8:	71 1d       	adc	r23, r1
     5ea:	81 1d       	adc	r24, r1
     5ec:	91 1d       	adc	r25, r1
     5ee:	42 e0       	ldi	r20, 0x02	; 2
     5f0:	66 0f       	add	r22, r22
     5f2:	77 1f       	adc	r23, r23
     5f4:	88 1f       	adc	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	4a 95       	dec	r20
     5fa:	d1 f7       	brne	.-12     	; 0x5f0 <micros+0x3c>
     5fc:	08 95       	ret

000005fe <delay>:
     5fe:	8f 92       	push	r8
     600:	9f 92       	push	r9
     602:	af 92       	push	r10
     604:	bf 92       	push	r11
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
     612:	0e 94 da 02 	call	0x5b4	; 0x5b4 <micros>
     616:	4b 01       	movw	r8, r22
     618:	5c 01       	movw	r10, r24
     61a:	c1 14       	cp	r12, r1
     61c:	d1 04       	cpc	r13, r1
     61e:	e1 04       	cpc	r14, r1
     620:	f1 04       	cpc	r15, r1
     622:	e9 f0       	breq	.+58     	; 0x65e <delay+0x60>
     624:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <yield>
     628:	0e 94 da 02 	call	0x5b4	; 0x5b4 <micros>
     62c:	68 19       	sub	r22, r8
     62e:	79 09       	sbc	r23, r9
     630:	8a 09       	sbc	r24, r10
     632:	9b 09       	sbc	r25, r11
     634:	68 3e       	cpi	r22, 0xE8	; 232
     636:	73 40       	sbci	r23, 0x03	; 3
     638:	81 05       	cpc	r24, r1
     63a:	91 05       	cpc	r25, r1
     63c:	70 f3       	brcs	.-36     	; 0x61a <delay+0x1c>
     63e:	21 e0       	ldi	r18, 0x01	; 1
     640:	c2 1a       	sub	r12, r18
     642:	d1 08       	sbc	r13, r1
     644:	e1 08       	sbc	r14, r1
     646:	f1 08       	sbc	r15, r1
     648:	88 ee       	ldi	r24, 0xE8	; 232
     64a:	88 0e       	add	r8, r24
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	98 1e       	adc	r9, r24
     650:	a1 1c       	adc	r10, r1
     652:	b1 1c       	adc	r11, r1
     654:	c1 14       	cp	r12, r1
     656:	d1 04       	cpc	r13, r1
     658:	e1 04       	cpc	r14, r1
     65a:	f1 04       	cpc	r15, r1
     65c:	29 f7       	brne	.-54     	; 0x628 <delay+0x2a>
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	df 90       	pop	r13
     664:	cf 90       	pop	r12
     666:	bf 90       	pop	r11
     668:	af 90       	pop	r10
     66a:	9f 90       	pop	r9
     66c:	8f 90       	pop	r8
     66e:	08 95       	ret

00000670 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     670:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     672:	84 b5       	in	r24, 0x24	; 36
     674:	82 60       	ori	r24, 0x02	; 2
     676:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     678:	84 b5       	in	r24, 0x24	; 36
     67a:	81 60       	ori	r24, 0x01	; 1
     67c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     67e:	85 b5       	in	r24, 0x25	; 37
     680:	82 60       	ori	r24, 0x02	; 2
     682:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     684:	85 b5       	in	r24, 0x25	; 37
     686:	81 60       	ori	r24, 0x01	; 1
     688:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     68a:	ee e6       	ldi	r30, 0x6E	; 110
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
     690:	81 60       	ori	r24, 0x01	; 1
     692:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     694:	e1 e8       	ldi	r30, 0x81	; 129
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     69a:	80 81       	ld	r24, Z
     69c:	82 60       	ori	r24, 0x02	; 2
     69e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     6a0:	80 81       	ld	r24, Z
     6a2:	81 60       	ori	r24, 0x01	; 1
     6a4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     6a6:	e0 e8       	ldi	r30, 0x80	; 128
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	81 60       	ori	r24, 0x01	; 1
     6ae:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     6b0:	e1 eb       	ldi	r30, 0xB1	; 177
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	84 60       	ori	r24, 0x04	; 4
     6b8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     6ba:	e0 eb       	ldi	r30, 0xB0	; 176
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	80 81       	ld	r24, Z
     6c0:	81 60       	ori	r24, 0x01	; 1
     6c2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     6c4:	ea e7       	ldi	r30, 0x7A	; 122
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	84 60       	ori	r24, 0x04	; 4
     6cc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     6ce:	80 81       	ld	r24, Z
     6d0:	82 60       	ori	r24, 0x02	; 2
     6d2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     6d4:	80 81       	ld	r24, Z
     6d6:	81 60       	ori	r24, 0x01	; 1
     6d8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     6da:	80 81       	ld	r24, Z
     6dc:	80 68       	ori	r24, 0x80	; 128
     6de:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     6e0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
#endif
}
     6e4:	08 95       	ret

000006e6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     6e6:	83 30       	cpi	r24, 0x03	; 3
     6e8:	81 f0       	breq	.+32     	; 0x70a <turnOffPWM+0x24>
     6ea:	28 f4       	brcc	.+10     	; 0x6f6 <turnOffPWM+0x10>
     6ec:	81 30       	cpi	r24, 0x01	; 1
     6ee:	99 f0       	breq	.+38     	; 0x716 <turnOffPWM+0x30>
     6f0:	82 30       	cpi	r24, 0x02	; 2
     6f2:	a9 f0       	breq	.+42     	; 0x71e <turnOffPWM+0x38>
     6f4:	08 95       	ret
     6f6:	87 30       	cpi	r24, 0x07	; 7
     6f8:	a9 f0       	breq	.+42     	; 0x724 <turnOffPWM+0x3e>
     6fa:	88 30       	cpi	r24, 0x08	; 8
     6fc:	c9 f0       	breq	.+50     	; 0x730 <turnOffPWM+0x4a>
     6fe:	84 30       	cpi	r24, 0x04	; 4
     700:	b1 f4       	brne	.+44     	; 0x72e <turnOffPWM+0x48>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     702:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     706:	8f 7d       	andi	r24, 0xDF	; 223
     708:	03 c0       	rjmp	.+6      	; 0x710 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     70a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     70e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     710:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     714:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     716:	84 b5       	in	r24, 0x24	; 36
     718:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     71a:	84 bd       	out	0x24, r24	; 36
     71c:	08 95       	ret
     71e:	84 b5       	in	r24, 0x24	; 36
     720:	8f 7d       	andi	r24, 0xDF	; 223
     722:	fb cf       	rjmp	.-10     	; 0x71a <turnOffPWM+0x34>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     724:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     728:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     72a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
     72e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     730:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     734:	8f 7d       	andi	r24, 0xDF	; 223
     736:	f9 cf       	rjmp	.-14     	; 0x72a <turnOffPWM+0x44>

00000738 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	fc 01       	movw	r30, r24
     740:	e4 58       	subi	r30, 0x84	; 132
     742:	ff 4f       	sbci	r31, 0xFF	; 255
     744:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     746:	80 57       	subi	r24, 0x70	; 112
     748:	9f 4f       	sbci	r25, 0xFF	; 255
     74a:	fc 01       	movw	r30, r24
     74c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     74e:	88 23       	and	r24, r24
     750:	c9 f0       	breq	.+50     	; 0x784 <pinMode+0x4c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	fc 01       	movw	r30, r24
     75a:	e2 55       	subi	r30, 0x52	; 82
     75c:	ff 4f       	sbci	r31, 0xFF	; 255
     75e:	a5 91       	lpm	r26, Z+
     760:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     762:	fc 01       	movw	r30, r24
     764:	ec 55       	subi	r30, 0x5C	; 92
     766:	ff 4f       	sbci	r31, 0xFF	; 255
     768:	c5 91       	lpm	r28, Z+
     76a:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     76c:	61 11       	cpse	r22, r1
     76e:	0d c0       	rjmp	.+26     	; 0x78a <pinMode+0x52>
		uint8_t oldSREG = SREG;
     770:	9f b7       	in	r25, 0x3f	; 63
                cli();
     772:	f8 94       	cli
		*reg &= ~bit;
     774:	8c 91       	ld	r24, X
     776:	20 95       	com	r18
     778:	82 23       	and	r24, r18
     77a:	8c 93       	st	X, r24
		*out &= ~bit;
     77c:	88 81       	ld	r24, Y
     77e:	28 23       	and	r18, r24
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out |= bit;
     780:	28 83       	st	Y, r18
		SREG = oldSREG;
     782:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     78a:	62 30       	cpi	r22, 0x02	; 2
     78c:	51 f4       	brne	.+20     	; 0x7a2 <pinMode+0x6a>
		uint8_t oldSREG = SREG;
     78e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     790:	f8 94       	cli
		*reg &= ~bit;
     792:	3c 91       	ld	r19, X
     794:	82 2f       	mov	r24, r18
     796:	80 95       	com	r24
     798:	83 23       	and	r24, r19
     79a:	8c 93       	st	X, r24
		*out |= bit;
     79c:	e8 81       	ld	r30, Y
     79e:	2e 2b       	or	r18, r30
     7a0:	ef cf       	rjmp	.-34     	; 0x780 <pinMode+0x48>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     7a2:	8f b7       	in	r24, 0x3f	; 63
                cli();
     7a4:	f8 94       	cli
		*reg |= bit;
     7a6:	ec 91       	ld	r30, X
     7a8:	2e 2b       	or	r18, r30
     7aa:	2c 93       	st	X, r18
		SREG = oldSREG;
     7ac:	8f bf       	out	0x3f, r24	; 63
     7ae:	ea cf       	rjmp	.-44     	; 0x784 <pinMode+0x4c>

000007b0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     7b6:	28 2f       	mov	r18, r24
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	f9 01       	movw	r30, r18
     7bc:	e8 59       	subi	r30, 0x98	; 152
     7be:	ff 4f       	sbci	r31, 0xFF	; 255
     7c0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     7c2:	f9 01       	movw	r30, r18
     7c4:	e4 58       	subi	r30, 0x84	; 132
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     7ca:	f9 01       	movw	r30, r18
     7cc:	e0 57       	subi	r30, 0x70	; 112
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     7d2:	cc 23       	and	r28, r28
     7d4:	a9 f0       	breq	.+42     	; 0x800 <digitalWrite+0x50>
     7d6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     7d8:	81 11       	cpse	r24, r1
     7da:	0e 94 73 03 	call	0x6e6	; 0x6e6 <turnOffPWM>

	out = portOutputRegister(port);
     7de:	ec 2f       	mov	r30, r28
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	ec 55       	subi	r30, 0x5C	; 92
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	a5 91       	lpm	r26, Z+
     7ec:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     7ee:	8f b7       	in	r24, 0x3f	; 63
	cli();
     7f0:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     7f2:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     7f4:	11 11       	cpse	r17, r1
     7f6:	08 c0       	rjmp	.+16     	; 0x808 <digitalWrite+0x58>
		*out &= ~bit;
     7f8:	d0 95       	com	r29
     7fa:	de 23       	and	r29, r30
	} else {
		*out |= bit;
     7fc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     7fe:	8f bf       	out	0x3f, r24	; 63
}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	08 95       	ret
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
     808:	de 2b       	or	r29, r30
     80a:	f8 cf       	rjmp	.-16     	; 0x7fc <digitalWrite+0x4c>

0000080c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     80c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     80e:	91 8d       	ldd	r25, Z+25	; 0x19
     810:	22 8d       	ldd	r18, Z+26	; 0x1a
     812:	89 2f       	mov	r24, r25
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	80 5c       	subi	r24, 0xC0	; 192
     818:	9f 4f       	sbci	r25, 0xFF	; 255
     81a:	82 1b       	sub	r24, r18
     81c:	91 09       	sbc	r25, r1
}
     81e:	8f 73       	andi	r24, 0x3F	; 63
     820:	99 27       	eor	r25, r25
     822:	08 95       	ret

00000824 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     824:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     826:	91 8d       	ldd	r25, Z+25	; 0x19
     828:	82 8d       	ldd	r24, Z+26	; 0x1a
     82a:	98 17       	cp	r25, r24
     82c:	31 f0       	breq	.+12     	; 0x83a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     82e:	82 8d       	ldd	r24, Z+26	; 0x1a
     830:	e8 0f       	add	r30, r24
     832:	f1 1d       	adc	r31, r1
     834:	85 8d       	ldd	r24, Z+29	; 0x1d
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     83e:	08 95       	ret

00000840 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     840:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     842:	91 8d       	ldd	r25, Z+25	; 0x19
     844:	82 8d       	ldd	r24, Z+26	; 0x1a
     846:	98 17       	cp	r25, r24
     848:	61 f0       	breq	.+24     	; 0x862 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     84a:	a2 8d       	ldd	r26, Z+26	; 0x1a
     84c:	ae 0f       	add	r26, r30
     84e:	bf 2f       	mov	r27, r31
     850:	b1 1d       	adc	r27, r1
     852:	5d 96       	adiw	r26, 0x1d	; 29
     854:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     856:	92 8d       	ldd	r25, Z+26	; 0x1a
     858:	9f 5f       	subi	r25, 0xFF	; 255
     85a:	9f 73       	andi	r25, 0x3F	; 63
     85c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     866:	08 95       	ret

00000868 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     868:	fc 01       	movw	r30, r24
     86a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     86c:	44 8d       	ldd	r20, Z+28	; 0x1c
     86e:	25 2f       	mov	r18, r21
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	84 2f       	mov	r24, r20
     874:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     876:	82 1b       	sub	r24, r18
     878:	93 0b       	sbc	r25, r19
     87a:	54 17       	cp	r21, r20
     87c:	10 f0       	brcs	.+4      	; 0x882 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     87e:	cf 96       	adiw	r24, 0x3f	; 63
     880:	08 95       	ret
  return tail - head - 1;
     882:	01 97       	sbiw	r24, 0x01	; 1
}
     884:	08 95       	ret

00000886 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     886:	8a e9       	ldi	r24, 0x9A	; 154
     888:	95 e0       	ldi	r25, 0x05	; 5
     88a:	89 2b       	or	r24, r25
     88c:	49 f0       	breq	.+18     	; 0x8a0 <_Z14serialEventRunv+0x1a>
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	89 2b       	or	r24, r25
     894:	29 f0       	breq	.+10     	; 0x8a0 <_Z14serialEventRunv+0x1a>
     896:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z17Serial0_availablev>
     89a:	81 11       	cpse	r24, r1
     89c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     8a0:	08 95       	ret

000008a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     8a2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     8a4:	a4 8d       	ldd	r26, Z+28	; 0x1c
     8a6:	a8 0f       	add	r26, r24
     8a8:	b9 2f       	mov	r27, r25
     8aa:	b1 1d       	adc	r27, r1
     8ac:	a3 5a       	subi	r26, 0xA3	; 163
     8ae:	bf 4f       	sbci	r27, 0xFF	; 255
     8b0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     8b2:	84 8d       	ldd	r24, Z+28	; 0x1c
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	8f 73       	andi	r24, 0x3F	; 63
     8ba:	99 27       	eor	r25, r25
     8bc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     8be:	a6 89       	ldd	r26, Z+22	; 0x16
     8c0:	b7 89       	ldd	r27, Z+23	; 0x17
     8c2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     8c4:	a0 89       	ldd	r26, Z+16	; 0x10
     8c6:	b1 89       	ldd	r27, Z+17	; 0x11
     8c8:	8c 91       	ld	r24, X
     8ca:	83 70       	andi	r24, 0x03	; 3
     8cc:	80 64       	ori	r24, 0x40	; 64
     8ce:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     8d0:	93 8d       	ldd	r25, Z+27	; 0x1b
     8d2:	84 8d       	ldd	r24, Z+28	; 0x1c
     8d4:	98 13       	cpse	r25, r24
     8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     8d8:	02 88       	ldd	r0, Z+18	; 0x12
     8da:	f3 89       	ldd	r31, Z+19	; 0x13
     8dc:	e0 2d       	mov	r30, r0
     8de:	80 81       	ld	r24, Z
     8e0:	8f 7d       	andi	r24, 0xDF	; 223
     8e2:	80 83       	st	Z, r24
  }
}
     8e4:	08 95       	ret

000008e6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     8ec:	88 8d       	ldd	r24, Y+24	; 0x18
     8ee:	88 23       	and	r24, r24
     8f0:	b9 f0       	breq	.+46     	; 0x920 <__stack+0x21>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     8f2:	aa 89       	ldd	r26, Y+18	; 0x12
     8f4:	bb 89       	ldd	r27, Y+19	; 0x13
     8f6:	e8 89       	ldd	r30, Y+16	; 0x10
     8f8:	f9 89       	ldd	r31, Y+17	; 0x11
     8fa:	8c 91       	ld	r24, X
     8fc:	85 fd       	sbrc	r24, 5
     8fe:	03 c0       	rjmp	.+6      	; 0x906 <__stack+0x7>
     900:	80 81       	ld	r24, Z
     902:	86 fd       	sbrc	r24, 6
     904:	0d c0       	rjmp	.+26     	; 0x920 <__stack+0x21>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	07 fc       	sbrc	r0, 7
     90a:	f7 cf       	rjmp	.-18     	; 0x8fa <_ZN14HardwareSerial5flushEv+0x14>
     90c:	8c 91       	ld	r24, X
     90e:	85 ff       	sbrs	r24, 5
     910:	f2 cf       	rjmp	.-28     	; 0x8f6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     912:	80 81       	ld	r24, Z
     914:	85 ff       	sbrs	r24, 5
     916:	ed cf       	rjmp	.-38     	; 0x8f2 <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
     918:	ce 01       	movw	r24, r28
     91a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     91e:	e9 cf       	rjmp	.-46     	; 0x8f2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ec 01       	movw	r28, r24
  _written = true;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     938:	9b 8d       	ldd	r25, Y+27	; 0x1b
     93a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     93c:	98 13       	cpse	r25, r24
     93e:	1a c0       	rjmp	.+52     	; 0x974 <_ZN14HardwareSerial5writeEh+0x4e>
     940:	e8 89       	ldd	r30, Y+16	; 0x10
     942:	f9 89       	ldd	r31, Y+17	; 0x11
     944:	80 81       	ld	r24, Z
     946:	85 ff       	sbrs	r24, 5
     948:	15 c0       	rjmp	.+42     	; 0x974 <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     94a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     94c:	f8 94       	cli
      *_udr = c;
     94e:	ee 89       	ldd	r30, Y+22	; 0x16
     950:	ff 89       	ldd	r31, Y+23	; 0x17
     952:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     954:	e8 89       	ldd	r30, Y+16	; 0x10
     956:	f9 89       	ldd	r31, Y+17	; 0x11
     958:	80 81       	ld	r24, Z
     95a:	83 70       	andi	r24, 0x03	; 3
     95c:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     95e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     960:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	08 95       	ret
     974:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     976:	0b 8d       	ldd	r16, Y+27	; 0x1b
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	0f 5f       	subi	r16, 0xFF	; 255
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	0f 73       	andi	r16, 0x3F	; 63
     980:	11 27       	eor	r17, r17
     982:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     984:	8c 8d       	ldd	r24, Y+28	; 0x1c
     986:	8e 11       	cpse	r24, r14
     988:	0c c0       	rjmp	.+24     	; 0x9a2 <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	07 fc       	sbrc	r0, 7
     98e:	fa cf       	rjmp	.-12     	; 0x984 <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     990:	e8 89       	ldd	r30, Y+16	; 0x10
     992:	f9 89       	ldd	r31, Y+17	; 0x11
     994:	80 81       	ld	r24, Z
     996:	85 ff       	sbrs	r24, 5
     998:	f5 cf       	rjmp	.-22     	; 0x984 <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
     99a:	ce 01       	movw	r24, r28
     99c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     9a0:	f1 cf       	rjmp	.-30     	; 0x984 <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     9a2:	eb 8d       	ldd	r30, Y+27	; 0x1b
     9a4:	ec 0f       	add	r30, r28
     9a6:	fd 2f       	mov	r31, r29
     9a8:	f1 1d       	adc	r31, r1
     9aa:	e3 5a       	subi	r30, 0xA3	; 163
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     9b0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9b2:	f8 94       	cli
    _tx_buffer_head = i;
     9b4:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     9b6:	ea 89       	ldd	r30, Y+18	; 0x12
     9b8:	fb 89       	ldd	r31, Y+19	; 0x13
     9ba:	80 81       	ld	r24, Z
     9bc:	80 62       	ori	r24, 0x20	; 32
     9be:	cf cf       	rjmp	.-98     	; 0x95e <_ZN14HardwareSerial5writeEh+0x38>

000009c0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     9c0:	cf 92       	push	r12
     9c2:	df 92       	push	r13
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ec 01       	movw	r28, r24
     9d0:	6a 01       	movw	r12, r20
     9d2:	7b 01       	movw	r14, r22
     9d4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     9d6:	e8 89       	ldd	r30, Y+16	; 0x10
     9d8:	f9 89       	ldd	r31, Y+17	; 0x11
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     9de:	c1 14       	cp	r12, r1
     9e0:	81 ee       	ldi	r24, 0xE1	; 225
     9e2:	d8 06       	cpc	r13, r24
     9e4:	e1 04       	cpc	r14, r1
     9e6:	f1 04       	cpc	r15, r1
     9e8:	a1 f0       	breq	.+40     	; 0xa12 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	79 e0       	ldi	r23, 0x09	; 9
     9ee:	8d e3       	ldi	r24, 0x3D	; 61
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	a7 01       	movw	r20, r14
     9f4:	96 01       	movw	r18, r12
     9f6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__udivmodsi4>
     9fa:	21 50       	subi	r18, 0x01	; 1
     9fc:	31 09       	sbc	r19, r1
     9fe:	41 09       	sbc	r20, r1
     a00:	51 09       	sbc	r21, r1
     a02:	56 95       	lsr	r21
     a04:	47 95       	ror	r20
     a06:	37 95       	ror	r19
     a08:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     a0a:	21 15       	cp	r18, r1
     a0c:	80 e1       	ldi	r24, 0x10	; 16
     a0e:	38 07       	cpc	r19, r24
     a10:	98 f0       	brcs	.+38     	; 0xa38 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
     a12:	e8 89       	ldd	r30, Y+16	; 0x10
     a14:	f9 89       	ldd	r31, Y+17	; 0x11
     a16:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     a18:	60 e8       	ldi	r22, 0x80	; 128
     a1a:	74 e8       	ldi	r23, 0x84	; 132
     a1c:	8e e1       	ldi	r24, 0x1E	; 30
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a7 01       	movw	r20, r14
     a22:	96 01       	movw	r18, r12
     a24:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__udivmodsi4>
     a28:	21 50       	subi	r18, 0x01	; 1
     a2a:	31 09       	sbc	r19, r1
     a2c:	41 09       	sbc	r20, r1
     a2e:	51 09       	sbc	r21, r1
     a30:	56 95       	lsr	r21
     a32:	47 95       	ror	r20
     a34:	37 95       	ror	r19
     a36:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     a38:	ec 85       	ldd	r30, Y+12	; 0x0c
     a3a:	fd 85       	ldd	r31, Y+13	; 0x0d
     a3c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     a3e:	ee 85       	ldd	r30, Y+14	; 0x0e
     a40:	ff 85       	ldd	r31, Y+15	; 0x0f
     a42:	20 83       	st	Z, r18

  _written = false;
     a44:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     a46:	ec 89       	ldd	r30, Y+20	; 0x14
     a48:	fd 89       	ldd	r31, Y+21	; 0x15
     a4a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     a4c:	ea 89       	ldd	r30, Y+18	; 0x12
     a4e:	fb 89       	ldd	r31, Y+19	; 0x13
     a50:	80 81       	ld	r24, Z
     a52:	80 61       	ori	r24, 0x10	; 16
     a54:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     a56:	ea 89       	ldd	r30, Y+18	; 0x12
     a58:	fb 89       	ldd	r31, Y+19	; 0x13
     a5a:	80 81       	ld	r24, Z
     a5c:	88 60       	ori	r24, 0x08	; 8
     a5e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     a60:	ea 89       	ldd	r30, Y+18	; 0x12
     a62:	fb 89       	ldd	r31, Y+19	; 0x13
     a64:	80 81       	ld	r24, Z
     a66:	80 68       	ori	r24, 0x80	; 128
     a68:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     a6a:	ea 89       	ldd	r30, Y+18	; 0x12
     a6c:	fb 89       	ldd	r31, Y+19	; 0x13
     a6e:	80 81       	ld	r24, Z
     a70:	8f 7d       	andi	r24, 0xDF	; 223
     a72:	80 83       	st	Z, r24
}
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	df 90       	pop	r13
     a80:	cf 90       	pop	r12
     a82:	08 95       	ret

00000a84 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     a84:	1f 92       	push	r1
     a86:	0f 92       	push	r0
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	0f 92       	push	r0
     a8c:	11 24       	eor	r1, r1
     a8e:	2f 93       	push	r18
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
     a94:	ef 93       	push	r30
     a96:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     a98:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <Serial+0x10>
     a9c:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <Serial+0x11>
     aa0:	80 81       	ld	r24, Z
     aa2:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <Serial+0x16>
     aa6:	f0 91 d1 02 	lds	r31, 0x02D1	; 0x8002d1 <Serial+0x17>
     aaa:	82 fd       	sbrc	r24, 2
     aac:	1b c0       	rjmp	.+54     	; 0xae4 <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     aae:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     ab0:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <Serial+0x19>
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
     ab6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     ab8:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <Serial+0x1a>
     abc:	82 17       	cp	r24, r18
     abe:	41 f0       	breq	.+16     	; 0xad0 <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
     ac0:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <Serial+0x19>
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	e6 54       	subi	r30, 0x46	; 70
     ac8:	fd 4f       	sbci	r31, 0xFD	; 253
     aca:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     acc:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <Serial+0x19>
    Serial._rx_complete_irq();
  }
     ad0:	ff 91       	pop	r31
     ad2:	ef 91       	pop	r30
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	2f 91       	pop	r18
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     ae4:	80 81       	ld	r24, Z
     ae6:	f4 cf       	rjmp	.-24     	; 0xad0 <__vector_18+0x4c>

00000ae8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	0f 92       	push	r0
     af0:	11 24       	eor	r1, r1
     af2:	2f 93       	push	r18
     af4:	3f 93       	push	r19
     af6:	4f 93       	push	r20
     af8:	5f 93       	push	r21
     afa:	6f 93       	push	r22
     afc:	7f 93       	push	r23
     afe:	8f 93       	push	r24
     b00:	9f 93       	push	r25
     b02:	af 93       	push	r26
     b04:	bf 93       	push	r27
     b06:	ef 93       	push	r30
     b08:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     b0a:	8a eb       	ldi	r24, 0xBA	; 186
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     b12:	ff 91       	pop	r31
     b14:	ef 91       	pop	r30
     b16:	bf 91       	pop	r27
     b18:	af 91       	pop	r26
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	7f 91       	pop	r23
     b20:	6f 91       	pop	r22
     b22:	5f 91       	pop	r21
     b24:	4f 91       	pop	r20
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	0f 90       	pop	r0
     b30:	1f 90       	pop	r1
     b32:	18 95       	reti

00000b34 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     b34:	8a eb       	ldi	r24, 0xBA	; 186
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN14HardwareSerial9availableEv>
     b3c:	21 e0       	ldi	r18, 0x01	; 1
     b3e:	89 2b       	or	r24, r25
     b40:	09 f4       	brne	.+2      	; 0xb44 <_Z17Serial0_availablev+0x10>
     b42:	20 e0       	ldi	r18, 0x00	; 0
}
     b44:	82 2f       	mov	r24, r18
     b46:	08 95       	ret

00000b48 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b48:	ea eb       	ldi	r30, 0xBA	; 186
     b4a:	f2 e0       	ldi	r31, 0x02	; 2
     b4c:	13 82       	std	Z+3, r1	; 0x03
     b4e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     b50:	88 ee       	ldi	r24, 0xE8	; 232
     b52:	93 e0       	ldi	r25, 0x03	; 3
     b54:	a0 e0       	ldi	r26, 0x00	; 0
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	84 83       	std	Z+4, r24	; 0x04
     b5a:	95 83       	std	Z+5, r25	; 0x05
     b5c:	a6 83       	std	Z+6, r26	; 0x06
     b5e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     b60:	80 ea       	ldi	r24, 0xA0	; 160
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	91 83       	std	Z+1, r25	; 0x01
     b66:	80 83       	st	Z, r24
     b68:	85 ec       	ldi	r24, 0xC5	; 197
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	95 87       	std	Z+13, r25	; 0x0d
     b6e:	84 87       	std	Z+12, r24	; 0x0c
     b70:	84 ec       	ldi	r24, 0xC4	; 196
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	97 87       	std	Z+15, r25	; 0x0f
     b76:	86 87       	std	Z+14, r24	; 0x0e
     b78:	80 ec       	ldi	r24, 0xC0	; 192
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	91 8b       	std	Z+17, r25	; 0x11
     b7e:	80 8b       	std	Z+16, r24	; 0x10
     b80:	81 ec       	ldi	r24, 0xC1	; 193
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	93 8b       	std	Z+19, r25	; 0x13
     b86:	82 8b       	std	Z+18, r24	; 0x12
     b88:	82 ec       	ldi	r24, 0xC2	; 194
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	95 8b       	std	Z+21, r25	; 0x15
     b8e:	84 8b       	std	Z+20, r24	; 0x14
     b90:	86 ec       	ldi	r24, 0xC6	; 198
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	97 8b       	std	Z+23, r25	; 0x17
     b96:	86 8b       	std	Z+22, r24	; 0x16
     b98:	11 8e       	std	Z+25, r1	; 0x19
     b9a:	12 8e       	std	Z+26, r1	; 0x1a
     b9c:	13 8e       	std	Z+27, r1	; 0x1b
     b9e:	14 8e       	std	Z+28, r1	; 0x1c
     ba0:	08 95       	ret

00000ba2 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     ba2:	af 92       	push	r10
     ba4:	bf 92       	push	r11
     ba6:	cf 92       	push	r12
     ba8:	df 92       	push	r13
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	6c 01       	movw	r12, r24
     bb8:	7b 01       	movw	r14, r22
     bba:	8b 01       	movw	r16, r22
     bbc:	04 0f       	add	r16, r20
     bbe:	15 1f       	adc	r17, r21
     bc0:	eb 01       	movw	r28, r22
     bc2:	5e 01       	movw	r10, r28
     bc4:	ae 18       	sub	r10, r14
     bc6:	bf 08       	sbc	r11, r15
     bc8:	c0 17       	cp	r28, r16
     bca:	d1 07       	cpc	r29, r17
     bcc:	59 f0       	breq	.+22     	; 0xbe4 <_ZN5Print5writeEPKhj+0x42>
     bce:	69 91       	ld	r22, Y+
     bd0:	d6 01       	movw	r26, r12
     bd2:	ed 91       	ld	r30, X+
     bd4:	fc 91       	ld	r31, X
     bd6:	01 90       	ld	r0, Z+
     bd8:	f0 81       	ld	r31, Z
     bda:	e0 2d       	mov	r30, r0
     bdc:	c6 01       	movw	r24, r12
     bde:	09 95       	icall
     be0:	89 2b       	or	r24, r25
     be2:	79 f7       	brne	.-34     	; 0xbc2 <_ZN5Print5writeEPKhj+0x20>
     be4:	c5 01       	movw	r24, r10
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	cf 90       	pop	r12
     bf6:	bf 90       	pop	r11
     bf8:	af 90       	pop	r10
     bfa:	08 95       	ret

00000bfc <_ZN5Print5writeEPKc.part.2>:
     bfc:	fb 01       	movw	r30, r22
     bfe:	01 90       	ld	r0, Z+
     c00:	00 20       	and	r0, r0
     c02:	e9 f7       	brne	.-6      	; 0xbfe <_ZN5Print5writeEPKc.part.2+0x2>
     c04:	31 97       	sbiw	r30, 0x01	; 1
     c06:	af 01       	movw	r20, r30
     c08:	46 1b       	sub	r20, r22
     c0a:	57 0b       	sbc	r21, r23
     c0c:	dc 01       	movw	r26, r24
     c0e:	ed 91       	ld	r30, X+
     c10:	fc 91       	ld	r31, X
     c12:	02 80       	ldd	r0, Z+2	; 0x02
     c14:	f3 81       	ldd	r31, Z+3	; 0x03
     c16:	e0 2d       	mov	r30, r0
     c18:	09 94       	ijmp

00000c1a <_ZN5Print5printEPKc>:
     c1a:	61 15       	cp	r22, r1
     c1c:	71 05       	cpc	r23, r1
     c1e:	11 f0       	breq	.+4      	; 0xc24 <_ZN5Print5printEPKc+0xa>
     c20:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <_ZN5Print5writeEPKc.part.2>
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	08 95       	ret

00000c2a <_ZN5Print5printEc>:
     c2a:	dc 01       	movw	r26, r24
     c2c:	ed 91       	ld	r30, X+
     c2e:	fc 91       	ld	r31, X
     c30:	01 90       	ld	r0, Z+
     c32:	f0 81       	ld	r31, Z
     c34:	e0 2d       	mov	r30, r0
     c36:	09 94       	ijmp

00000c38 <_ZN5Print7printlnEv>:
     c38:	6c ed       	ldi	r22, 0xDC	; 220
     c3a:	71 e0       	ldi	r23, 0x01	; 1
     c3c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <_ZN5Print5writeEPKc.part.2>

00000c40 <_ZN5Print7printlnEPKc>:
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	8c 01       	movw	r16, r24
     c4a:	d0 e0       	ldi	r29, 0x00	; 0
     c4c:	c0 e0       	ldi	r28, 0x00	; 0
     c4e:	61 15       	cp	r22, r1
     c50:	71 05       	cpc	r23, r1
     c52:	19 f0       	breq	.+6      	; 0xc5a <_ZN5Print7printlnEPKc+0x1a>
     c54:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN5Print5writeEPKc.part.2>
     c58:	ec 01       	movw	r28, r24
     c5a:	c8 01       	movw	r24, r16
     c5c:	0e 94 1c 06 	call	0xc38	; 0xc38 <_ZN5Print7printlnEv>
     c60:	8c 0f       	add	r24, r28
     c62:	9d 1f       	adc	r25, r29
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	08 95       	ret

00000c6e <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     c6e:	8f 92       	push	r8
     c70:	9f 92       	push	r9
     c72:	af 92       	push	r10
     c74:	bf 92       	push	r11
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	a1 97       	sbiw	r28, 0x21	; 33
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	7c 01       	movw	r14, r24
     c94:	fa 01       	movw	r30, r20
     c96:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     c98:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     c9a:	22 30       	cpi	r18, 0x02	; 2
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <_ZN5Print11printNumberEmh+0x32>
     c9e:	2a e0       	ldi	r18, 0x0A	; 10
     ca0:	8e 01       	movw	r16, r28
     ca2:	0f 5d       	subi	r16, 0xDF	; 223
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     ca6:	82 2e       	mov	r8, r18
     ca8:	91 2c       	mov	r9, r1
     caa:	b1 2c       	mov	r11, r1
     cac:	a1 2c       	mov	r10, r1
     cae:	bf 01       	movw	r22, r30
     cb0:	a5 01       	movw	r20, r10
     cb2:	94 01       	movw	r18, r8
     cb4:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__udivmodsi4>
    n /= base;
     cb8:	f9 01       	movw	r30, r18
     cba:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     cbc:	6a 30       	cpi	r22, 0x0A	; 10
     cbe:	0c f5       	brge	.+66     	; 0xd02 <_ZN5Print11printNumberEmh+0x94>
     cc0:	60 5d       	subi	r22, 0xD0	; 208
     cc2:	d8 01       	movw	r26, r16
     cc4:	6e 93       	st	-X, r22
     cc6:	8d 01       	movw	r16, r26
  } while(n);
     cc8:	23 2b       	or	r18, r19
     cca:	24 2b       	or	r18, r20
     ccc:	25 2b       	or	r18, r21
     cce:	79 f7       	brne	.-34     	; 0xcae <_ZN5Print11printNumberEmh+0x40>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	10 97       	sbiw	r26, 0x00	; 0
     cd6:	21 f0       	breq	.+8      	; 0xce0 <_ZN5Print11printNumberEmh+0x72>
     cd8:	bd 01       	movw	r22, r26
     cda:	c7 01       	movw	r24, r14
     cdc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN5Print5writeEPKc.part.2>

  return write(str);
}
     ce0:	a1 96       	adiw	r28, 0x21	; 33
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	bf 90       	pop	r11
     cfa:	af 90       	pop	r10
     cfc:	9f 90       	pop	r9
     cfe:	8f 90       	pop	r8
     d00:	08 95       	ret

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     d02:	69 5c       	subi	r22, 0xC9	; 201
     d04:	de cf       	rjmp	.-68     	; 0xcc2 <_ZN5Print11printNumberEmh+0x54>

00000d06 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     d06:	cf 92       	push	r12
     d08:	df 92       	push	r13
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
  if (base == 0) {
     d16:	21 15       	cp	r18, r1
     d18:	31 05       	cpc	r19, r1
     d1a:	81 f4       	brne	.+32     	; 0xd3c <_ZN5Print5printEli+0x36>
    return write(n);
     d1c:	dc 01       	movw	r26, r24
     d1e:	ed 91       	ld	r30, X+
     d20:	fc 91       	ld	r31, X
     d22:	01 90       	ld	r0, Z+
     d24:	f0 81       	ld	r31, Z
     d26:	e0 2d       	mov	r30, r0
     d28:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     d3a:	09 94       	ijmp
  } else if (base == 10) {
     d3c:	2a 30       	cpi	r18, 0x0A	; 10
     d3e:	31 05       	cpc	r19, r1
     d40:	01 f5       	brne	.+64     	; 0xd82 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     d42:	2a e0       	ldi	r18, 0x0A	; 10
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     d44:	77 ff       	sbrs	r23, 7
     d46:	1d c0       	rjmp	.+58     	; 0xd82 <_ZN5Print5printEli+0x7c>
     d48:	6a 01       	movw	r12, r20
     d4a:	7b 01       	movw	r14, r22
     d4c:	ec 01       	movw	r28, r24
      int t = print('-');
     d4e:	6d e2       	ldi	r22, 0x2D	; 45
     d50:	0e 94 15 06 	call	0xc2a	; 0xc2a <_ZN5Print5printEc>
     d54:	8c 01       	movw	r16, r24
      n = -n;
     d56:	44 27       	eor	r20, r20
     d58:	55 27       	eor	r21, r21
     d5a:	ba 01       	movw	r22, r20
     d5c:	4c 19       	sub	r20, r12
     d5e:	5d 09       	sbc	r21, r13
     d60:	6e 09       	sbc	r22, r14
     d62:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
     d64:	2a e0       	ldi	r18, 0x0A	; 10
     d66:	ce 01       	movw	r24, r28
     d68:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN5Print11printNumberEmh>
     d6c:	80 0f       	add	r24, r16
     d6e:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	08 95       	ret
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     d92:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <_ZN5Print11printNumberEmh>

00000d96 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     d96:	9a 01       	movw	r18, r20
  return print((long) n, base);
     d98:	ab 01       	movw	r20, r22
     d9a:	77 0f       	add	r23, r23
     d9c:	66 0b       	sbc	r22, r22
     d9e:	77 0b       	sbc	r23, r23
     da0:	0c 94 83 06 	jmp	0xd06	; 0xd06 <_ZN5Print5printEli>

00000da4 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     dae:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN5Print5printEii>
     db2:	8c 01       	movw	r16, r24
  n += println();
     db4:	ce 01       	movw	r24, r28
     db6:	0e 94 1c 06 	call	0xc38	; 0xc38 <_ZN5Print7printlnEv>
  return n;
}
     dba:	80 0f       	add	r24, r16
     dbc:	91 1f       	adc	r25, r17
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     dc8:	08 95       	ret

00000dca <osEE_check_disableint>:

  if (!osEE_is_valid_alarm_id(p_kdb, AlarmID)) {
    ev = E_OS_ID;
  } else
  if (Info == NULL) {
    ev = E_OS_PARAM_POINTER;
     dca:	fc 01       	movw	r30, r24
     dcc:	81 8d       	ldd	r24, Z+25	; 0x19
     dce:	81 11       	cpse	r24, r1
     dd0:	0b c0       	rjmp	.+22     	; 0xde8 <osEE_check_disableint+0x1e>
     dd2:	82 8d       	ldd	r24, Z+26	; 0x1a
     dd4:	81 11       	cpse	r24, r1
     dd6:	08 c0       	rjmp	.+16     	; 0xde8 <osEE_check_disableint+0x1e>
     dd8:	21 e0       	ldi	r18, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	83 8d       	ldd	r24, Z+27	; 0x1b
     dde:	81 11       	cpse	r24, r1
     de0:	01 c0       	rjmp	.+2      	; 0xde4 <osEE_check_disableint+0x1a>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	82 2f       	mov	r24, r18
     de6:	08 95       	ret
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	08 95       	ret

00000dee <osEE_call_error_hook>:
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	ec 01       	movw	r28, r24
     df8:	0d 89       	ldd	r16, Y+21	; 0x15
     dfa:	1e 89       	ldd	r17, Y+22	; 0x16
     dfc:	03 30       	cpi	r16, 0x03	; 3
     dfe:	11 05       	cpc	r17, r1
     e00:	59 f0       	breq	.+22     	; 0xe18 <osEE_call_error_hook+0x2a>
     e02:	cb 01       	movw	r24, r22
     e04:	23 e0       	ldi	r18, 0x03	; 3
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	3e 8b       	std	Y+22, r19	; 0x16
     e0a:	2d 8b       	std	Y+21, r18	; 0x15
     e0c:	7c 87       	std	Y+12, r23	; 0x0c
     e0e:	6b 87       	std	Y+11, r22	; 0x0b
     e10:	0e 94 69 01 	call	0x2d2	; 0x2d2 <ErrorHook>
     e14:	1e 8b       	std	Y+22, r17	; 0x16
     e16:	0d 8b       	std	Y+21, r16	; 0x15
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <StartOS>:
     e22:	4f 92       	push	r4
     e24:	5f 92       	push	r5
     e26:	6f 92       	push	r6
     e28:	7f 92       	push	r7
     e2a:	8f 92       	push	r8
     e2c:	9f 92       	push	r9
     e2e:	af 92       	push	r10
     e30:	bf 92       	push	r11
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	00 d0       	rcall	.+0      	; 0xe44 <StartOS+0x22>
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	88 2e       	mov	r8, r24
     e4a:	00 91 f5 01 	lds	r16, 0x01F5	; 0x8001f5 <CDB>
     e4e:	10 91 f6 01 	lds	r17, 0x01F6	; 0x8001f6 <CDB+0x1>
     e52:	ff b6       	in	r15, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	d8 01       	movw	r26, r16
     e58:	18 96       	adiw	r26, 0x08	; 8
     e5a:	8d 91       	ld	r24, X+
     e5c:	9c 91       	ld	r25, X
     e5e:	19 97       	sbiw	r26, 0x09	; 9
     e60:	89 2b       	or	r24, r25
     e62:	09 f0       	breq	.+2      	; 0xe66 <StartOS+0x44>
     e64:	b0 c0       	rjmp	.+352    	; 0xfc6 <StartOS+0x1a4>
     e66:	83 e5       	ldi	r24, 0x53	; 83
     e68:	9d e0       	ldi	r25, 0x0D	; 13
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <osEE_avr8_system_timer_init>
     e72:	a0 90 f9 01 	lds	r10, 0x01F9	; 0x8001f9 <CDB+0x4>
     e76:	b0 90 fa 01 	lds	r11, 0x01FA	; 0x8001fa <CDB+0x5>
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	f8 01       	movw	r30, r16
     e80:	91 87       	std	Z+9, r25	; 0x09
     e82:	80 87       	std	Z+8, r24	; 0x08
     e84:	82 86       	std	Z+10, r8	; 0x0a
     e86:	e5 88       	ldd	r14, Z+21	; 0x15
     e88:	f6 88       	ldd	r15, Z+22	; 0x16
     e8a:	87 e0       	ldi	r24, 0x07	; 7
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	96 8b       	std	Z+22, r25	; 0x16
     e90:	85 8b       	std	Z+21, r24	; 0x15
     e92:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <StartupHook>
     e96:	d8 01       	movw	r26, r16
     e98:	56 96       	adiw	r26, 0x16	; 22
     e9a:	fc 92       	st	X, r15
     e9c:	ee 92       	st	-X, r14
     e9e:	55 97       	sbiw	r26, 0x15	; 21
     ea0:	e0 90 01 02 	lds	r14, 0x0201	; 0x800201 <CDB+0xc>
     ea4:	f0 90 02 02 	lds	r15, 0x0202	; 0x800202 <CDB+0xd>
     ea8:	d1 2c       	mov	r13, r1
     eaa:	c1 2c       	mov	r12, r1
     eac:	b4 e0       	ldi	r27, 0x04	; 4
     eae:	8b 9e       	mul	r8, r27
     eb0:	40 01       	movw	r8, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	e8 0c       	add	r14, r8
     eb6:	f9 1c       	adc	r15, r9
     eb8:	37 01       	movw	r6, r14
     eba:	e2 e0       	ldi	r30, 0x02	; 2
     ebc:	6e 0e       	add	r6, r30
     ebe:	71 1c       	adc	r7, r1
     ec0:	46 e0       	ldi	r20, 0x06	; 6
     ec2:	54 2e       	mov	r5, r20
     ec4:	f3 01       	movw	r30, r6
     ec6:	80 81       	ld	r24, Z
     ec8:	91 81       	ldd	r25, Z+1	; 0x01
     eca:	c8 16       	cp	r12, r24
     ecc:	d9 06       	cpc	r13, r25
     ece:	e0 f1       	brcs	.+120    	; 0xf48 <StartOS+0x126>
     ed0:	e0 90 fd 01 	lds	r14, 0x01FD	; 0x8001fd <CDB+0x8>
     ed4:	f0 90 fe 01 	lds	r15, 0x01FE	; 0x8001fe <CDB+0x9>
     ed8:	38 01       	movw	r6, r16
     eda:	f2 e0       	ldi	r31, 0x02	; 2
     edc:	6f 0e       	add	r6, r31
     ede:	71 1c       	adc	r7, r1
     ee0:	d1 2c       	mov	r13, r1
     ee2:	c1 2c       	mov	r12, r1
     ee4:	e8 0c       	add	r14, r8
     ee6:	f9 1c       	adc	r15, r9
     ee8:	27 01       	movw	r4, r14
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	48 0e       	add	r4, r24
     eee:	51 1c       	adc	r5, r1
     ef0:	88 24       	eor	r8, r8
     ef2:	83 94       	inc	r8
     ef4:	91 2c       	mov	r9, r1
     ef6:	f2 01       	movw	r30, r4
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	c8 16       	cp	r12, r24
     efe:	d9 06       	cpc	r13, r25
     f00:	e8 f1       	brcs	.+122    	; 0xf7c <StartOS+0x15a>
     f02:	d8 01       	movw	r26, r16
     f04:	18 96       	adiw	r26, 0x08	; 8
     f06:	8d 91       	ld	r24, X+
     f08:	9c 91       	ld	r25, X
     f0a:	19 97       	sbiw	r26, 0x09	; 9
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	31 f4       	brne	.+12     	; 0xf1c <StartOS+0xfa>
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	19 96       	adiw	r26, 0x09	; 9
     f16:	9c 93       	st	X, r25
     f18:	8e 93       	st	-X, r24
     f1a:	18 97       	sbiw	r26, 0x08	; 8
     f1c:	f8 01       	movw	r30, r16
     f1e:	80 85       	ldd	r24, Z+8	; 0x08
     f20:	91 85       	ldd	r25, Z+9	; 0x09
     f22:	02 97       	sbiw	r24, 0x02	; 2
     f24:	41 f4       	brne	.+16     	; 0xf36 <StartOS+0x114>
     f26:	d5 01       	movw	r26, r10
     f28:	12 96       	adiw	r26, 0x02	; 2
     f2a:	6d 91       	ld	r22, X+
     f2c:	7c 91       	ld	r23, X
     f2e:	ab 01       	movw	r20, r22
     f30:	c5 01       	movw	r24, r10
     f32:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>
     f36:	f8 01       	movw	r30, r16
     f38:	80 85       	ldd	r24, Z+8	; 0x08
     f3a:	91 85       	ldd	r25, Z+9	; 0x09
     f3c:	02 97       	sbiw	r24, 0x02	; 2
     f3e:	09 f4       	brne	.+2      	; 0xf42 <StartOS+0x120>
     f40:	78 94       	sei
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	4d c0       	rjmp	.+154    	; 0xfe2 <StartOS+0x1c0>
     f48:	d7 01       	movw	r26, r14
     f4a:	ed 91       	ld	r30, X+
     f4c:	fc 91       	ld	r31, X
     f4e:	5c 9c       	mul	r5, r12
     f50:	c0 01       	movw	r24, r0
     f52:	5d 9c       	mul	r5, r13
     f54:	90 0d       	add	r25, r0
     f56:	11 24       	eor	r1, r1
     f58:	e8 0f       	add	r30, r24
     f5a:	f9 1f       	adc	r31, r25
     f5c:	a0 81       	ld	r26, Z
     f5e:	b1 81       	ldd	r27, Z+1	; 0x01
     f60:	24 81       	ldd	r18, Z+4	; 0x04
     f62:	35 81       	ldd	r19, Z+5	; 0x05
     f64:	42 81       	ldd	r20, Z+2	; 0x02
     f66:	53 81       	ldd	r21, Z+3	; 0x03
     f68:	bd 01       	movw	r22, r26
     f6a:	12 96       	adiw	r26, 0x02	; 2
     f6c:	8d 91       	ld	r24, X+
     f6e:	9c 91       	ld	r25, X
     f70:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <osEE_alarm_set_rel>
     f74:	bf ef       	ldi	r27, 0xFF	; 255
     f76:	cb 1a       	sub	r12, r27
     f78:	db 0a       	sbc	r13, r27
     f7a:	a4 cf       	rjmp	.-184    	; 0xec4 <StartOS+0xa2>
     f7c:	d7 01       	movw	r26, r14
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	c6 01       	movw	r24, r12
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	e8 0f       	add	r30, r24
     f8a:	f9 1f       	adc	r31, r25
     f8c:	40 81       	ld	r20, Z
     f8e:	51 81       	ldd	r21, Z+1	; 0x01
     f90:	da 01       	movw	r26, r20
     f92:	14 96       	adiw	r26, 0x04	; 4
     f94:	ed 91       	ld	r30, X+
     f96:	fc 91       	ld	r31, X
     f98:	80 81       	ld	r24, Z
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	80 83       	st	Z, r24
     f9e:	93 82       	std	Z+3, r9	; 0x03
     fa0:	82 82       	std	Z+2, r8	; 0x02
     fa2:	f8 01       	movw	r30, r16
     fa4:	64 81       	ldd	r22, Z+4	; 0x04
     fa6:	75 81       	ldd	r23, Z+5	; 0x05
     fa8:	db 01       	movw	r26, r22
     faa:	8d 91       	ld	r24, X+
     fac:	9c 91       	ld	r25, X
     fae:	11 97       	sbiw	r26, 0x01	; 1
     fb0:	95 83       	std	Z+5, r25	; 0x05
     fb2:	84 83       	std	Z+4, r24	; 0x04
     fb4:	1d 92       	st	X+, r1
     fb6:	1c 92       	st	X, r1
     fb8:	c3 01       	movw	r24, r6
     fba:	0e 94 90 0b 	call	0x1720	; 0x1720 <osEE_scheduler_rq_insert>
     fbe:	bf ef       	ldi	r27, 0xFF	; 255
     fc0:	cb 1a       	sub	r12, r27
     fc2:	db 0a       	sbc	r13, r27
     fc4:	98 cf       	rjmp	.-208    	; 0xef6 <StartOS+0xd4>
     fc6:	88 e3       	ldi	r24, 0x38	; 56
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	1e 96       	adiw	r26, 0x0e	; 14
     fcc:	9c 93       	st	X, r25
     fce:	8e 93       	st	-X, r24
     fd0:	1d 97       	sbiw	r26, 0x0d	; 13
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	c8 01       	movw	r24, r16
     fd8:	0e 94 f7 06 	call	0xdee	; 0xdee <osEE_call_error_hook>
     fdc:	ff be       	out	0x3f, r15	; 63
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	9f 90       	pop	r9
     ffc:	8f 90       	pop	r8
     ffe:	7f 90       	pop	r7
    1000:	6f 90       	pop	r6
    1002:	5f 90       	pop	r5
    1004:	4f 90       	pop	r4
    1006:	08 95       	ret

00001008 <TerminateTask>:
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <CDB>
    1012:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <CDB+0x1>
    1016:	dc 01       	movw	r26, r24
    1018:	ed 91       	ld	r30, X+
    101a:	fc 91       	ld	r31, X
    101c:	27 81       	ldd	r18, Z+7	; 0x07
    101e:	30 85       	ldd	r19, Z+8	; 0x08
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	88 f4       	brcc	.+34     	; 0x1048 <TerminateTask+0x40>
    1026:	a4 81       	ldd	r26, Z+4	; 0x04
    1028:	b5 81       	ldd	r27, Z+5	; 0x05
    102a:	14 96       	adiw	r26, 0x04	; 4
    102c:	2d 91       	ld	r18, X+
    102e:	3c 91       	ld	r19, X
    1030:	c6 e0       	ldi	r28, 0x06	; 6
    1032:	d0 e0       	ldi	r29, 0x00	; 0
    1034:	23 2b       	or	r18, r19
    1036:	51 f4       	brne	.+20     	; 0x104c <TerminateTask+0x44>
    1038:	8f b7       	in	r24, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	68 e7       	ldi	r22, 0x78	; 120
    103e:	7a e0       	ldi	r23, 0x0A	; 10
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <osEE_hal_terminate_ctx>
    1048:	c2 e0       	ldi	r28, 0x02	; 2
    104a:	d0 e0       	ldi	r29, 0x00	; 0
    104c:	1f b7       	in	r17, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	22 e0       	ldi	r18, 0x02	; 2
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	fc 01       	movw	r30, r24
    1056:	36 87       	std	Z+14, r19	; 0x0e
    1058:	25 87       	std	Z+13, r18	; 0x0d
    105a:	be 01       	movw	r22, r28
    105c:	0e 94 f7 06 	call	0xdee	; 0xdee <osEE_call_error_hook>
    1060:	1f bf       	out	0x3f, r17	; 63
    1062:	ce 01       	movw	r24, r28
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	08 95       	ret

0000106c <SetRelAlarm>:
    106c:	bf 92       	push	r11
    106e:	cf 92       	push	r12
    1070:	df 92       	push	r13
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	6b 01       	movw	r12, r22
    1080:	8a 01       	movw	r16, r20
    1082:	e8 2e       	mov	r14, r24
    1084:	f1 2c       	mov	r15, r1
    1086:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <KDB+0x14>
    108a:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <KDB+0x15>
    108e:	e8 16       	cp	r14, r24
    1090:	f9 06       	cpc	r15, r25
    1092:	b0 f5       	brcc	.+108    	; 0x1100 <SetRelAlarm+0x94>
    1094:	67 2b       	or	r22, r23
    1096:	09 f4       	brne	.+2      	; 0x109a <SetRelAlarm+0x2e>
    1098:	4b c0       	rjmp	.+150    	; 0x1130 <SetRelAlarm+0xc4>
    109a:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <KDB+0x12>
    109e:	f0 91 f2 01 	lds	r31, 0x01F2	; 0x8001f2 <KDB+0x13>
    10a2:	c7 01       	movw	r24, r14
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	e8 0f       	add	r30, r24
    10aa:	f9 1f       	adc	r31, r25
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	fb 01       	movw	r30, r22
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	fc 01       	movw	r30, r24
    10b8:	22 81       	ldd	r18, Z+2	; 0x02
    10ba:	33 81       	ldd	r19, Z+3	; 0x03
    10bc:	2c 15       	cp	r18, r12
    10be:	3d 05       	cpc	r19, r13
    10c0:	b8 f1       	brcs	.+110    	; 0x1130 <SetRelAlarm+0xc4>
    10c2:	45 2b       	or	r20, r21
    10c4:	41 f0       	breq	.+16     	; 0x10d6 <SetRelAlarm+0x6a>
    10c6:	46 81       	ldd	r20, Z+6	; 0x06
    10c8:	57 81       	ldd	r21, Z+7	; 0x07
    10ca:	04 17       	cp	r16, r20
    10cc:	15 07       	cpc	r17, r21
    10ce:	80 f1       	brcs	.+96     	; 0x1130 <SetRelAlarm+0xc4>
    10d0:	20 17       	cp	r18, r16
    10d2:	31 07       	cpc	r19, r17
    10d4:	68 f1       	brcs	.+90     	; 0x1130 <SetRelAlarm+0xc4>
    10d6:	bf b6       	in	r11, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	98 01       	movw	r18, r16
    10dc:	a6 01       	movw	r20, r12
    10de:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <osEE_alarm_set_rel>
    10e2:	ec 01       	movw	r28, r24
    10e4:	bf be       	out	0x3f, r11	; 63
    10e6:	89 2b       	or	r24, r25
    10e8:	69 f4       	brne	.+26     	; 0x1104 <SetRelAlarm+0x98>
    10ea:	ce 01       	movw	r24, r28
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	cf 90       	pop	r12
    10fc:	bf 90       	pop	r11
    10fe:	08 95       	ret
    1100:	c3 e0       	ldi	r28, 0x03	; 3
    1102:	d0 e0       	ldi	r29, 0x00	; 0
    1104:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <CDB>
    1108:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <CDB+0x1>
    110c:	bf b6       	in	r11, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	88 e2       	ldi	r24, 0x28	; 40
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	96 87       	std	Z+14, r25	; 0x0e
    1116:	85 87       	std	Z+13, r24	; 0x0d
    1118:	f0 8a       	std	Z+16, r15	; 0x10
    111a:	e7 86       	std	Z+15, r14	; 0x0f
    111c:	d2 8a       	std	Z+18, r13	; 0x12
    111e:	c1 8a       	std	Z+17, r12	; 0x11
    1120:	14 8b       	std	Z+20, r17	; 0x14
    1122:	03 8b       	std	Z+19, r16	; 0x13
    1124:	be 01       	movw	r22, r28
    1126:	cf 01       	movw	r24, r30
    1128:	0e 94 f7 06 	call	0xdee	; 0xdee <osEE_call_error_hook>
    112c:	bf be       	out	0x3f, r11	; 63
    112e:	dd cf       	rjmp	.-70     	; 0x10ea <SetRelAlarm+0x7e>
    1130:	c8 e0       	ldi	r28, 0x08	; 8
    1132:	d0 e0       	ldi	r29, 0x00	; 0
    1134:	e7 cf       	rjmp	.-50     	; 0x1104 <SetRelAlarm+0x98>

00001136 <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    1136:	9f 92       	push	r9
    1138:	af 92       	push	r10
    113a:	bf 92       	push	r11
    113c:	cf 92       	push	r12
    113e:	df 92       	push	r13
    1140:	ef 92       	push	r14
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	00 d0       	rcall	.+0      	; 0x114e <WaitEvent+0x18>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	6c 01       	movw	r12, r24
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    1154:	e0 90 f5 01 	lds	r14, 0x01F5	; 0x8001f5 <CDB>
    1158:	f0 90 f6 01 	lds	r15, 0x01F6	; 0x8001f6 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    115c:	c7 01       	movw	r24, r14
    115e:	0e 94 e5 06 	call	0xdca	; 0xdca <osEE_check_disableint>
    1162:	89 2b       	or	r24, r25
    1164:	09 f0       	breq	.+2      	; 0x1168 <WaitEvent+0x32>
    1166:	45 c0       	rjmp	.+138    	; 0x11f2 <WaitEvent+0xbc>
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    1168:	d7 01       	movw	r26, r14
    116a:	ad 90       	ld	r10, X+
    116c:	bc 90       	ld	r11, X
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    116e:	f5 01       	movw	r30, r10
    1170:	87 81       	ldd	r24, Z+7	; 0x07
    1172:	90 85       	ldd	r25, Z+8	; 0x08
#else
    || (p_ccb->os_context > OSEE_TASK_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    1174:	02 e0       	ldi	r16, 0x02	; 2
    1176:	10 e0       	ldi	r17, 0x00	; 0
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	91 05       	cpc	r25, r1
    117c:	e0 f5       	brcc	.+120    	; 0x11f6 <WaitEvent+0xc0>
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    117e:	04 81       	ldd	r16, Z+4	; 0x04
    1180:	15 81       	ldd	r17, Z+5	; 0x05
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
#if (defined(OSEE_HAS_MUTEX))
  if (p_curr_tcb->p_first_mtx != NULL) {
    1182:	d8 01       	movw	r26, r16
    1184:	14 96       	adiw	r26, 0x04	; 4
    1186:	2d 91       	ld	r18, X+
    1188:	3c 91       	ld	r19, X
    118a:	15 97       	sbiw	r26, 0x05	; 5
    118c:	23 2b       	or	r18, r19
    118e:	09 f0       	breq	.+2      	; 0x1192 <WaitEvent+0x5c>
    1190:	53 c0       	rjmp	.+166    	; 0x1238 <WaitEvent+0x102>
#endif /* !OSEE_SINGLECORE */
    {
      ev = E_OS_RESOURCE;
    }
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	09 f0       	breq	.+2      	; 0x1198 <WaitEvent+0x62>
    1196:	53 c0       	rjmp	.+166    	; 0x123e <WaitEvent+0x108>
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_MUTEX */
#endif /* OSEE_HAS_CHECKS */
  /* Check if we have to wait */
  if ((p_curr_tcb->event_mask & Mask) == 0U) {
    1198:	18 96       	adiw	r26, 0x08	; 8
    119a:	8d 91       	ld	r24, X+
    119c:	9c 91       	ld	r25, X
    119e:	8c 21       	and	r24, r12
    11a0:	9d 21       	and	r25, r13
    11a2:	89 2b       	or	r24, r25
    11a4:	19 f5       	brne	.+70     	; 0x11ec <WaitEvent+0xb6>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    11a6:	9f b6       	in	r9, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    11a8:	f8 94       	cli
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();

    /* Set the waiting mask */
    p_curr_tcb->wait_mask = Mask;
    11aa:	f8 01       	movw	r30, r16
    11ac:	d7 82       	std	Z+7, r13	; 0x07
    11ae:	c6 82       	std	Z+6, r12	; 0x06

    /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
    osEE_lock_core(p_cdb);

    p_to =  osEE_scheduler_task_block_current(osEE_get_kernel(),
    11b0:	ae 01       	movw	r20, r28
    11b2:	4f 5f       	subi	r20, 0xFF	; 255
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	65 ef       	ldi	r22, 0xF5	; 245
    11b8:	71 e0       	ldi	r23, 0x01	; 1
    11ba:	8f ed       	ldi	r24, 0xDF	; 223
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	0e 94 2b 0c 	call	0x1856	; 0x1856 <osEE_scheduler_task_block_current>
              p_cdb, &p_blocked_sn);

    /* Release the SN, I will allocate a new one when the TASK will be
     * reinserted into be reinserted in RQ */
    osEE_sn_release(&p_ccb->p_free_sn, p_blocked_sn);
    11c2:	e9 81       	ldd	r30, Y+1	; 0x01
    11c4:	fa 81       	ldd	r31, Y+2	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    11c6:	d7 01       	movw	r26, r14
    11c8:	14 96       	adiw	r26, 0x04	; 4
    11ca:	2d 91       	ld	r18, X+
    11cc:	3c 91       	ld	r19, X
    11ce:	15 97       	sbiw	r26, 0x05	; 5
    11d0:	31 83       	std	Z+1, r19	; 0x01
    11d2:	20 83       	st	Z, r18
  (*pp_first)       = p_to_free;
    11d4:	15 96       	adiw	r26, 0x05	; 5
    11d6:	fc 93       	st	X, r31
    11d8:	ee 93       	st	-X, r30
    11da:	14 97       	sbiw	r26, 0x04	; 4

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_to);
    11dc:	bc 01       	movw	r22, r24
    11de:	c5 01       	movw	r24, r10
    11e0:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <osEE_change_context_from_running>

    /* Reset the waiting mask */
    p_curr_tcb->wait_mask = 0U;
    11e4:	f8 01       	movw	r30, r16
    11e6:	17 82       	std	Z+7, r1	; 0x07
    11e8:	16 82       	std	Z+6, r1	; 0x06
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    11ea:	9f be       	out	0x3f, r9	; 63

    osEE_end_primitive(flags);

    ev = E_OK;
  } else {
    ev = E_OK;
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	00 e0       	ldi	r16, 0x00	; 0
  }
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <WaitEvent+0xe4>
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    11f2:	0c e0       	ldi	r16, 0x0C	; 12
    11f4:	10 e0       	ldi	r17, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    11f6:	bf b6       	in	r11, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    11f8:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    11fa:	82 e2       	ldi	r24, 0x22	; 34
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	d7 01       	movw	r26, r14
    1200:	1e 96       	adiw	r26, 0x0e	; 14
    1202:	9c 93       	st	X, r25
    1204:	8e 93       	st	-X, r24
    1206:	1d 97       	sbiw	r26, 0x0d	; 13
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    1208:	50 96       	adiw	r26, 0x10	; 16
    120a:	dc 92       	st	X, r13
    120c:	ce 92       	st	-X, r12
    120e:	1f 97       	sbiw	r26, 0x0f	; 15
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_set_service_id(p_ccb, OSServiceId_WaitEvent);
    param.num_param = Mask;
    osEE_set_api_param1(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    1210:	b8 01       	movw	r22, r16
    1212:	c7 01       	movw	r24, r14
    1214:	0e 94 f7 06 	call	0xdee	; 0xdee <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1218:	bf be       	out	0x3f, r11	; 63
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
    121a:	c8 01       	movw	r24, r16
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	df 90       	pop	r13
    122e:	cf 90       	pop	r12
    1230:	bf 90       	pop	r11
    1232:	af 90       	pop	r10
    1234:	9f 90       	pop	r9
    1236:	08 95       	ret
    if (p_curr_tcb->p_first_mtx->mtx_type == OSEE_MUTEX_SPINLOCK) {
      ev = E_OS_SPINLOCK
    } else
#endif /* !OSEE_SINGLECORE */
    {
      ev = E_OS_RESOURCE;
    1238:	06 e0       	ldi	r16, 0x06	; 6
    123a:	10 e0       	ldi	r17, 0x00	; 0
    123c:	dc cf       	rjmp	.-72     	; 0x11f6 <WaitEvent+0xc0>
    }
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    ev = E_OS_ACCESS;
    123e:	01 e0       	ldi	r16, 0x01	; 1
    1240:	10 e0       	ldi	r17, 0x00	; 0
    1242:	d9 cf       	rjmp	.-78     	; 0x11f6 <WaitEvent+0xc0>

00001244 <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    1244:	df 92       	push	r13
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	18 2f       	mov	r17, r24
    1254:	7b 01       	movw	r14, r22
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_curr_cdb  = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_ccb  = p_curr_cdb->p_ccb;
    1256:	c0 91 f5 01 	lds	r28, 0x01F5	; 0x8001f5 <CDB>
    125a:	d0 91 f6 01 	lds	r29, 0x01F6	; 0x8001f6 <CDB+0x1>
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
/* SetEvent is callable by Task and ISR2 */
  if (osEE_check_disableint(p_curr_ccb)) {
    125e:	ce 01       	movw	r24, r28
    1260:	0e 94 e5 06 	call	0xdca	; 0xdca <osEE_check_disableint>
    1264:	21 2f       	mov	r18, r17
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	89 2b       	or	r24, r25
    126a:	09 f0       	breq	.+2      	; 0x126e <SetEvent+0x2a>
    126c:	76 c0       	rjmp	.+236    	; 0x135a <SetEvent+0x116>
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type > OSEE_TASK_TYPE_ISR2)
    126e:	e8 81       	ld	r30, Y
    1270:	f9 81       	ldd	r31, Y+1	; 0x01
    1272:	87 81       	ldd	r24, Z+7	; 0x07
    1274:	90 85       	ldd	r25, Z+8	; 0x08
    1276:	03 97       	sbiw	r24, 0x03	; 3
    1278:	08 f0       	brcs	.+2      	; 0x127c <SetEvent+0x38>
    127a:	72 c0       	rjmp	.+228    	; 0x1360 <SetEvent+0x11c>
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    127c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <KDB+0x6>
    1280:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <KDB+0x7>
    1284:	28 17       	cp	r18, r24
    1286:	39 07       	cpc	r19, r25
    1288:	08 f0       	brcs	.+2      	; 0x128c <SetEvent+0x48>
    128a:	6d c0       	rjmp	.+218    	; 0x1366 <SetEvent+0x122>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
    128c:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <KDB+0x2>
    1290:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <KDB+0x3>
    1294:	c9 01       	movw	r24, r18
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	e8 0f       	add	r30, r24
    129c:	f9 1f       	adc	r31, r25
    129e:	a0 81       	ld	r26, Z
    12a0:	b1 81       	ldd	r27, Z+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_waking_up = p_tdb_waking_up->p_tcb;
    12a2:	14 96       	adiw	r26, 0x04	; 4
    12a4:	ed 91       	ld	r30, X+
    12a6:	fc 91       	ld	r31, X
    12a8:	15 97       	sbiw	r26, 0x05	; 5
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    12aa:	1f b7       	in	r17, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    12ac:	f8 94       	cli

    /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
    osEE_lock_core(p_cdb_waking_up);

#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
    12ae:	17 96       	adiw	r26, 0x07	; 7
    12b0:	8d 91       	ld	r24, X+
    12b2:	9c 91       	ld	r25, X
    12b4:	18 97       	sbiw	r26, 0x08	; 8
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	99 f0       	breq	.+38     	; 0x12e0 <SetEvent+0x9c>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    12ba:	1f bf       	out	0x3f, r17	; 63
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_ACCESS;
    12bc:	01 e0       	ldi	r16, 0x01	; 1
    12be:	10 e0       	ldi	r17, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    12c0:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    12c2:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    12c4:	8c e1       	ldi	r24, 0x1C	; 28
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9e 87       	std	Y+14, r25	; 0x0e
    12ca:	8d 87       	std	Y+13, r24	; 0x0d
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    12cc:	38 8b       	std	Y+16, r19	; 0x10
    12ce:	2f 87       	std	Y+15, r18	; 0x0f
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param2 = api_param;
    12d0:	fa 8a       	std	Y+18, r15	; 0x12
    12d2:	e9 8a       	std	Y+17, r14	; 0x11
    osEE_set_service_id(p_curr_ccb, OSServiceId_SetEvent);
    param.num_param = TaskID;
    osEE_set_api_param1(p_curr_ccb, param);
    param.num_param = Mask;
    osEE_set_api_param2(p_curr_ccb, param);
    osEE_call_error_hook(p_curr_ccb, ev);
    12d4:	b8 01       	movw	r22, r16
    12d6:	ce 01       	movw	r24, r28
    12d8:	0e 94 f7 06 	call	0xdee	; 0xdee <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    12dc:	df be       	out	0x3f, r13	; 63
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
    12de:	34 c0       	rjmp	.+104    	; 0x1348 <SetEvent+0x104>
    if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_waking_up->status == OSEE_TASK_SUSPENDED) {
    12e0:	42 81       	ldd	r20, Z+2	; 0x02
    12e2:	53 81       	ldd	r21, Z+3	; 0x03
    12e4:	41 15       	cp	r20, r1
    12e6:	51 05       	cpc	r21, r1
    12e8:	21 f4       	brne	.+8      	; 0x12f2 <SetEvent+0xae>
    12ea:	1f bf       	out	0x3f, r17	; 63
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_STATE;
    12ec:	07 e0       	ldi	r16, 0x07	; 7
    12ee:	10 e0       	ldi	r17, 0x00	; 0
    12f0:	e7 cf       	rjmp	.-50     	; 0x12c0 <SetEvent+0x7c>
    } else
#endif /* OSEE_HAS_CHECKS */
    {
      /* Set the event mask only if the task is not suspended */
      p_tcb_waking_up->event_mask |= Mask;
    12f2:	80 85       	ldd	r24, Z+8	; 0x08
    12f4:	91 85       	ldd	r25, Z+9	; 0x09
    12f6:	8e 29       	or	r24, r14
    12f8:	9f 29       	or	r25, r15
    12fa:	91 87       	std	Z+9, r25	; 0x09
    12fc:	80 87       	std	Z+8, r24	; 0x08

      if (((p_tcb_waking_up->wait_mask & Mask) != 0U) &&
    12fe:	86 81       	ldd	r24, Z+6	; 0x06
    1300:	97 81       	ldd	r25, Z+7	; 0x07
    1302:	e8 22       	and	r14, r24
    1304:	f9 22       	and	r15, r25
    1306:	ef 28       	or	r14, r15
    1308:	e1 f0       	breq	.+56     	; 0x1342 <SetEvent+0xfe>
    130a:	43 30       	cpi	r20, 0x03	; 3
    130c:	51 05       	cpc	r21, r1
    130e:	c9 f4       	brne	.+50     	; 0x1342 <SetEvent+0xfe>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    1310:	ec 81       	ldd	r30, Y+4	; 0x04
    1312:	fd 81       	ldd	r31, Y+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    1314:	80 81       	ld	r24, Z
    1316:	91 81       	ldd	r25, Z+1	; 0x01
    1318:	9d 83       	std	Y+5, r25	; 0x05
    131a:	8c 83       	std	Y+4, r24	; 0x04
  p_sn_allocated->p_next  = NULL;
    131c:	11 82       	std	Z+1, r1	; 0x01
    131e:	10 82       	st	Z, r1
          (p_tcb_waking_up->status == OSEE_TASK_WAITING))
      {
        CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
          p_sn = osEE_sn_alloc(&p_cdb_waking_up->p_ccb->p_free_sn);

        p_sn->p_tdb = p_tdb_waking_up;
    1320:	b3 83       	std	Z+3, r27	; 0x03
    1322:	a2 83       	std	Z+2, r26	; 0x02

        /* Release the TASK (and the SN) */
        if (osEE_scheduler_task_unblocked(p_kdb, p_cdb_waking_up, p_sn))
    1324:	af 01       	movw	r20, r30
    1326:	65 ef       	ldi	r22, 0xF5	; 245
    1328:	71 e0       	ldi	r23, 0x01	; 1
    132a:	8f ed       	ldi	r24, 0xDF	; 223
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <osEE_scheduler_task_unblocked>
    1332:	89 2b       	or	r24, r25
    1334:	31 f0       	breq	.+12     	; 0x1342 <SetEvent+0xfe>
        {
          (void)osEE_scheduler_task_preemption_point(p_kdb, p_cdb_waking_up);
    1336:	65 ef       	ldi	r22, 0xF5	; 245
    1338:	71 e0       	ldi	r23, 0x01	; 1
    133a:	8f ed       	ldi	r24, 0xDF	; 223
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <osEE_scheduler_task_preemption_point>
    1342:	1f bf       	out	0x3f, r17	; 63
      }

      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);

      ev = E_OK;
    1344:	10 e0       	ldi	r17, 0x00	; 0
    1346:	00 e0       	ldi	r16, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    1348:	c8 01       	movw	r24, r16
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	08 95       	ret
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
/* SetEvent is callable by Task and ISR2 */
  if (osEE_check_disableint(p_curr_ccb)) {
    ev = E_OS_DISABLEDINT;
    135a:	0c e0       	ldi	r16, 0x0C	; 12
    135c:	10 e0       	ldi	r17, 0x00	; 0
    135e:	b0 cf       	rjmp	.-160    	; 0x12c0 <SetEvent+0x7c>
#else
    || (p_curr_ccb->os_context > OSEE_TASK_ISR2_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    1360:	02 e0       	ldi	r16, 0x02	; 2
    1362:	10 e0       	ldi	r17, 0x00	; 0
    1364:	ad cf       	rjmp	.-166    	; 0x12c0 <SetEvent+0x7c>
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    1366:	03 e0       	ldi	r16, 0x03	; 3
    1368:	10 e0       	ldi	r17, 0x00	; 0
    136a:	aa cf       	rjmp	.-172    	; 0x12c0 <SetEvent+0x7c>

0000136c <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	c8 2f       	mov	r28, r24
    137c:	7b 01       	movw	r14, r22
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    137e:	00 91 f5 01 	lds	r16, 0x01F5	; 0x8001f5 <CDB>
    1382:	10 91 f6 01 	lds	r17, 0x01F6	; 0x8001f6 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    1386:	c8 01       	movw	r24, r16
    1388:	0e 94 e5 06 	call	0xdca	; 0xdca <osEE_check_disableint>
    138c:	2c 2f       	mov	r18, r28
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	89 2b       	or	r24, r25
    1392:	e1 f5       	brne	.+120    	; 0x140c <GetEvent+0xa0>
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type > OSEE_TASK_TYPE_ISR2)
    1394:	d8 01       	movw	r26, r16
    1396:	ed 91       	ld	r30, X+
    1398:	fc 91       	ld	r31, X
    139a:	87 81       	ldd	r24, Z+7	; 0x07
    139c:	90 85       	ldd	r25, Z+8	; 0x08
    139e:	03 97       	sbiw	r24, 0x03	; 3
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <GetEvent+0x38>
    13a2:	4d c0       	rjmp	.+154    	; 0x143e <GetEvent+0xd2>
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    13a4:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <KDB+0x6>
    13a8:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <KDB+0x7>
    13ac:	28 17       	cp	r18, r24
    13ae:	39 07       	cpc	r19, r25
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <GetEvent+0x48>
    13b2:	48 c0       	rjmp	.+144    	; 0x1444 <GetEvent+0xd8>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
    13b4:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <KDB+0x2>
    13b8:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <KDB+0x3>
    13bc:	c9 01       	movw	r24, r18
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	e8 0f       	add	r30, r24
    13c4:	f9 1f       	adc	r31, r25
    13c6:	01 90       	ld	r0, Z+
    13c8:	f0 81       	ld	r31, Z
    13ca:	e0 2d       	mov	r30, r0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    /* XXX: We will accept an harmless race condition here for TASKs that want
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
    13cc:	87 81       	ldd	r24, Z+7	; 0x07
    13ce:	90 85       	ldd	r25, Z+8	; 0x08
      ev = E_OS_ACCESS;
    13d0:	c1 e0       	ldi	r28, 0x01	; 1
    13d2:	d0 e0       	ldi	r29, 0x00	; 0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    /* XXX: We will accept an harmless race condition here for TASKs that want
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	e1 f4       	brne	.+56     	; 0x1410 <GetEvent+0xa4>
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    13d8:	04 80       	ldd	r0, Z+4	; 0x04
    13da:	f5 81       	ldd	r31, Z+5	; 0x05
    13dc:	e0 2d       	mov	r30, r0
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
    13de:	82 81       	ldd	r24, Z+2	; 0x02
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	89 2b       	or	r24, r25
    13e4:	91 f1       	breq	.+100    	; 0x144a <GetEvent+0xde>
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
    13e6:	e1 14       	cp	r14, r1
    13e8:	f1 04       	cpc	r15, r1
    13ea:	91 f1       	breq	.+100    	; 0x1450 <GetEvent+0xe4>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      (*Event) = p_tcb_event->event_mask;
    13ec:	80 85       	ldd	r24, Z+8	; 0x08
    13ee:	91 85       	ldd	r25, Z+9	; 0x09
    13f0:	f7 01       	movw	r30, r14
    13f2:	91 83       	std	Z+1, r25	; 0x01
    13f4:	80 83       	st	Z, r24

      ev = E_OK;
    13f6:	d0 e0       	ldi	r29, 0x00	; 0
    13f8:	c0 e0       	ldi	r28, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    13fa:	ce 01       	movw	r24, r28
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	08 95       	ret
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    140c:	cc e0       	ldi	r28, 0x0C	; 12
    140e:	d0 e0       	ldi	r29, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1410:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1412:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	d8 01       	movw	r26, r16
    141a:	1e 96       	adiw	r26, 0x0e	; 14
    141c:	9c 93       	st	X, r25
    141e:	8e 93       	st	-X, r24
    1420:	1d 97       	sbiw	r26, 0x0d	; 13
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    1422:	50 96       	adiw	r26, 0x10	; 16
    1424:	3c 93       	st	X, r19
    1426:	2e 93       	st	-X, r18
    1428:	1f 97       	sbiw	r26, 0x0f	; 15
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param2 = api_param;
    142a:	52 96       	adiw	r26, 0x12	; 18
    142c:	fc 92       	st	X, r15
    142e:	ee 92       	st	-X, r14
    1430:	51 97       	sbiw	r26, 0x11	; 17
    osEE_set_service_id(p_ccb, OSServiceId_GetEvent);
    param.num_param = TaskID;
    osEE_set_api_param1(p_ccb, param);
    param.p_param   = Event;
    osEE_set_api_param2(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    1432:	be 01       	movw	r22, r28
    1434:	c8 01       	movw	r24, r16
    1436:	0e 94 f7 06 	call	0xdee	; 0xdee <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    143a:	df be       	out	0x3f, r13	; 63
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
    143c:	de cf       	rjmp	.-68     	; 0x13fa <GetEvent+0x8e>
        (os_context != OSEE_PRETASKHOOK_CTX) &&
        (os_context != OSEE_POSTTASKHOOK_CTX))
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    143e:	c2 e0       	ldi	r28, 0x02	; 2
    1440:	d0 e0       	ldi	r29, 0x00	; 0
    1442:	e6 cf       	rjmp	.-52     	; 0x1410 <GetEvent+0xa4>
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    1444:	c3 e0       	ldi	r28, 0x03	; 3
    1446:	d0 e0       	ldi	r29, 0x00	; 0
    1448:	e3 cf       	rjmp	.-58     	; 0x1410 <GetEvent+0xa4>
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    144a:	c7 e0       	ldi	r28, 0x07	; 7
    144c:	d0 e0       	ldi	r29, 0x00	; 0
    144e:	e0 cf       	rjmp	.-64     	; 0x1410 <GetEvent+0xa4>
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
    1450:	ce e0       	ldi	r28, 0x0E	; 14
    1452:	d0 e0       	ldi	r29, 0x00	; 0
    1454:	dd cf       	rjmp	.-70     	; 0x1410 <GetEvent+0xa4>

00001456 <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    1456:	df 92       	push	r13
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	7c 01       	movw	r14, r24
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    1466:	00 91 f5 01 	lds	r16, 0x01F5	; 0x8001f5 <CDB>
    146a:	10 91 f6 01 	lds	r17, 0x01F6	; 0x8001f6 <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    146e:	c8 01       	movw	r24, r16
    1470:	0e 94 e5 06 	call	0xdca	; 0xdca <osEE_check_disableint>
    1474:	89 2b       	or	r24, r25
    1476:	21 f5       	brne	.+72     	; 0x14c0 <ClearEvent+0x6a>
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    1478:	d8 01       	movw	r26, r16
    147a:	ed 91       	ld	r30, X+
    147c:	fc 91       	ld	r31, X
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    147e:	87 81       	ldd	r24, Z+7	; 0x07
    1480:	90 85       	ldd	r25, Z+8	; 0x08
#else
    || (p_ccb->os_context > OSEE_TASK_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    1482:	c2 e0       	ldi	r28, 0x02	; 2
    1484:	d0 e0       	ldi	r29, 0x00	; 0
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    1486:	82 30       	cpi	r24, 0x02	; 2
    1488:	91 05       	cpc	r25, r1
    148a:	e0 f4       	brcc	.+56     	; 0x14c4 <ClearEvent+0x6e>
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    ev = E_OS_ACCESS;
    148c:	c1 e0       	ldi	r28, 0x01	; 1
    148e:	d0 e0       	ldi	r29, 0x00	; 0
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	c1 f4       	brne	.+48     	; 0x14c4 <ClearEvent+0x6e>
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    1494:	04 80       	ldd	r0, Z+4	; 0x04
    1496:	f5 81       	ldd	r31, Z+5	; 0x05
    1498:	e0 2d       	mov	r30, r0
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* clear the event */
    p_curr_tcb->event_mask &= ~Mask;
    149a:	e0 94       	com	r14
    149c:	f0 94       	com	r15
    149e:	80 85       	ldd	r24, Z+8	; 0x08
    14a0:	91 85       	ldd	r25, Z+9	; 0x09
    14a2:	e8 22       	and	r14, r24
    14a4:	f9 22       	and	r15, r25
    14a6:	f1 86       	std	Z+9, r15	; 0x09
    14a8:	e0 86       	std	Z+8, r14	; 0x08

    ev = E_OK;
    14aa:	d0 e0       	ldi	r29, 0x00	; 0
    14ac:	c0 e0       	ldi	r28, 0x00	; 0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
    14ae:	ce 01       	movw	r24, r28
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	df 90       	pop	r13
    14be:	08 95       	ret
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    14c0:	cc e0       	ldi	r28, 0x0C	; 12
    14c2:	d0 e0       	ldi	r29, 0x00	; 0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    14c4:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    14c6:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OSServiceIdType, AUTOMATIC)           service_id
)
{
#if (defined(OSEE_USEPARAMETERACCESS)) && (!defined(OSEE_HAS_ORTI))
  p_ccb->service_id = service_id;
    14c8:	8e e1       	ldi	r24, 0x1E	; 30
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	f8 01       	movw	r30, r16
    14ce:	96 87       	std	Z+14, r25	; 0x0e
    14d0:	85 87       	std	Z+13, r24	; 0x0d
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(OsEE_api_param, AUTOMATIC)            api_param
)
{
#if (defined(OSEE_USEPARAMETERACCESS))
  p_ccb->api_param1 = api_param;
    14d2:	f0 8a       	std	Z+16, r15	; 0x10
    14d4:	e7 86       	std	Z+15, r14	; 0x0f
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_set_service_id(p_ccb, OSServiceId_ClearEvent);
    param.num_param = Mask;
    osEE_set_api_param1(p_ccb, param);
    osEE_call_error_hook(p_ccb, ev);
    14d6:	be 01       	movw	r22, r28
    14d8:	c8 01       	movw	r24, r16
    14da:	0e 94 f7 06 	call	0xdee	; 0xdee <osEE_call_error_hook>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    14de:	df be       	out	0x3f, r13	; 63
  }
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
    14e0:	e6 cf       	rjmp	.-52     	; 0x14ae <ClearEvent+0x58>

000014e2 <osEE_get_service_id>:
#if (defined(OSEE_HAS_ORTI))
  return (OSServiceIdType)(
    ((OsEE_reg)osEE_get_curr_core()->p_ccb->service_id) & (~((OsEE_reg)0x1U))
  );
#else
  return osEE_get_curr_core()->p_ccb->service_id;
    14e2:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <CDB>
    14e6:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <CDB+0x1>
#endif /* OSEE_HAS_ORTI */
}
    14ea:	85 85       	ldd	r24, Z+13	; 0x0d
    14ec:	96 85       	ldd	r25, Z+14	; 0x0e
    14ee:	08 95       	ret

000014f0 <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <osEE_scheduler_task_end+0x6>
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
    14fa:	ae 01       	movw	r20, r28
    14fc:	4f 5f       	subi	r20, 0xFF	; 255
    14fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1500:	65 ef       	ldi	r22, 0xF5	; 245
    1502:	71 e0       	ldi	r23, 0x01	; 1
    1504:	8f ed       	ldi	r24, 0xDF	; 223
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	0e 94 82 0c 	call	0x1904	; 0x1904 <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    150c:	bc 01       	movw	r22, r24
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <osEE_scheduler_task_wrapper_restore>:
)
{
#if (defined(OSEE_HAS_PRETASKHOOK)) || (defined(OSEE_SCHEDULER_GLOBAL)) ||\
    (defined(OSEE_HAS_CONTEXT)) || (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1520:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <CDB>
    1524:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <CDB+0x1>

#endif /* OSEE_HAS_ORTI */
  /* Call PreTaskHook only if I'm scheduling a real TASK not an ISR2 or the
   * Idle TASK */
#if (defined(OSEE_HAS_PRETASKHOOK)) || (defined(OSEE_HAS_CONTEXT))
  if (p_tdb_to->task_type <= OSEE_TASK_TYPE_EXTENDED) {
    1528:	dc 01       	movw	r26, r24
    152a:	17 96       	adiw	r26, 0x07	; 7
    152c:	8d 91       	ld	r24, X+
    152e:	9c 91       	ld	r25, X
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	91 05       	cpc	r25, r1
    1534:	28 f4       	brcc	.+10     	; 0x1540 <osEE_scheduler_task_wrapper_restore+0x20>
      p_ccb->p_last_tdb_hook = p_tdb_to;
      osEE_call_pre_task_hook(p_ccb);
    }
#endif /* OSEE_HAS_PRETASKHOOK */
#if (defined(OSEE_HAS_CONTEXT))
    p_ccb->os_context = OSEE_TASK_CTX;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (defined(OSEE_HAS_CONTEXT))
  else if (p_tdb_to->task_type == OSEE_TASK_TYPE_ISR2) {
    p_ccb->os_context = OSEE_TASK_ISR2_CTX;
  } else {
    p_ccb->os_context = OSEE_IDLE_CTX;
    153a:	96 8b       	std	Z+22, r25	; 0x16
    153c:	85 8b       	std	Z+21, r24	; 0x15
    p_ccb->p_lock_to_be_released = NULL;
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
    153e:	08 95       	ret
#if (defined(OSEE_HAS_CONTEXT))
    p_ccb->os_context = OSEE_TASK_CTX;
#endif /* OSEE_HAS_CONTEXT */
  }
#if (defined(OSEE_HAS_CONTEXT))
  else if (p_tdb_to->task_type == OSEE_TASK_TYPE_ISR2) {
    1540:	82 30       	cpi	r24, 0x02	; 2
    1542:	91 05       	cpc	r25, r1
    1544:	d1 f3       	breq	.-12     	; 0x153a <osEE_scheduler_task_wrapper_restore+0x1a>
    p_ccb->os_context = OSEE_TASK_ISR2_CTX;
  } else {
    p_ccb->os_context = OSEE_IDLE_CTX;
    1546:	8a e0       	ldi	r24, 0x0A	; 10
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	f7 cf       	rjmp	.-18     	; 0x153a <osEE_scheduler_task_wrapper_restore+0x1a>

0000154c <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    154c:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
    154e:	ec 81       	ldd	r30, Y+4	; 0x04
    1550:	fd 81       	ldd	r31, Y+5	; 0x05
    1552:	11 81       	ldd	r17, Z+1	; 0x01
  osEE_scheduler_task_wrapper_restore(p_tdb_to);
    1554:	0e 94 90 0a 	call	0x1520	; 0x1520 <osEE_scheduler_task_wrapper_restore>

  if (task_prio < OSEE_ISR_ALL_PRIO) {
    1558:	1f 3f       	cpi	r17, 0xFF	; 255
    155a:	09 f0       	breq	.+2      	; 0x155e <osEE_scheduler_task_wrapper_run+0x12>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
    155c:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
    155e:	e9 85       	ldd	r30, Y+9	; 0x09
    1560:	fa 85       	ldd	r31, Y+10	; 0x0a
    1562:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1564:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1566:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
    1568:	68 e7       	ldi	r22, 0x78	; 120
    156a:	7a e0       	ldi	r23, 0x0A	; 10
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	9b 81       	ldd	r25, Y+3	; 0x03
    1570:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <osEE_hal_terminate_ctx>

00001574 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    157c:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    157e:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
    1580:	65 ef       	ldi	r22, 0xF5	; 245
    1582:	71 e0       	ldi	r23, 0x01	; 1
    1584:	8f ed       	ldi	r24, 0xDF	; 223
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    158c:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    158e:	00 91 f5 01 	lds	r16, 0x01F5	; 0x8001f5 <CDB>
    1592:	10 91 f6 01 	lds	r17, 0x01F6	; 0x8001f6 <CDB+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    1596:	c0 91 f7 01 	lds	r28, 0x01F7	; 0x8001f7 <CDB+0x2>
    159a:	d0 91 f8 01 	lds	r29, 0x01F8	; 0x8001f8 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    159e:	f8 01       	movw	r30, r16
    15a0:	80 85       	ldd	r24, Z+8	; 0x08
    15a2:	91 85       	ldd	r25, Z+9	; 0x09
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	91 05       	cpc	r25, r1
    15a8:	51 f0       	breq	.+20     	; 0x15be <osEE_idle_hook_wrapper+0x4a>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    15aa:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <CDB+0x4>
    15ae:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <CDB+0x5>
}
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    15ba:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    15be:	20 97       	sbiw	r28, 0x00	; 0
    15c0:	89 f3       	breq	.-30     	; 0x15a4 <osEE_idle_hook_wrapper+0x30>
      p_idle_hook();
    15c2:	fe 01       	movw	r30, r28
    15c4:	09 95       	icall
    15c6:	eb cf       	rjmp	.-42     	; 0x159e <osEE_idle_hook_wrapper+0x2a>

000015c8 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    15d0:	ec 01       	movw	r28, r24
    15d2:	a8 81       	ld	r26, Y
    15d4:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    15d6:	eb 01       	movw	r28, r22
    15d8:	e8 81       	ld	r30, Y
    15da:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    15dc:	16 96       	adiw	r26, 0x06	; 6
    15de:	cd 91       	ld	r28, X+
    15e0:	dc 91       	ld	r29, X
    15e2:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    15e4:	20 97       	sbiw	r28, 0x00	; 0
    15e6:	c1 f1       	breq	.+112    	; 0x1658 <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    15ec:	30 97       	sbiw	r30, 0x00	; 0
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <osEE_scheduler_core_rq_preempt_stk+0x2a>
    15f0:	3f c0       	rjmp	.+126    	; 0x1670 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    15f2:	ec 01       	movw	r28, r24
    15f4:	0c 81       	ldd	r16, Y+4	; 0x04
    15f6:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    15f8:	22 81       	ldd	r18, Z+2	; 0x02
    15fa:	33 81       	ldd	r19, Z+3	; 0x03
    15fc:	e9 01       	movw	r28, r18
    15fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1600:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    1602:	e8 01       	movw	r28, r16
    1604:	39 81       	ldd	r19, Y+1	; 0x01
    1606:	ea 01       	movw	r28, r20
    1608:	29 81       	ldd	r18, Y+1	; 0x01
    160a:	32 17       	cp	r19, r18
    160c:	88 f5       	brcc	.+98     	; 0x1670 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    160e:	22 e0       	ldi	r18, 0x02	; 2
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	e8 01       	movw	r28, r16
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    1614:	3b 83       	std	Y+3, r19	; 0x03
    1616:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    1618:	20 81       	ld	r18, Z
    161a:	31 81       	ldd	r19, Z+1	; 0x01
    161c:	eb 01       	movw	r28, r22
    161e:	39 83       	std	Y+1, r19	; 0x01
    1620:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    1622:	c2 81       	ldd	r28, Z+2	; 0x02
    1624:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    1626:	2c 81       	ldd	r18, Y+4	; 0x04
    1628:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    162a:	16 96       	adiw	r26, 0x06	; 6
    162c:	4d 91       	ld	r20, X+
    162e:	5c 91       	ld	r21, X
    1630:	17 97       	sbiw	r26, 0x07	; 7
    1632:	51 83       	std	Z+1, r21	; 0x01
    1634:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    1636:	17 96       	adiw	r26, 0x07	; 7
    1638:	fc 93       	st	X, r31
    163a:	ee 93       	st	-X, r30
    163c:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    163e:	cd 93       	st	X+, r28
    1640:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    1642:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    1644:	f9 01       	movw	r30, r18
    1646:	51 81       	ldd	r21, Z+1	; 0x01
    1648:	54 17       	cp	r21, r20
    164a:	08 f4       	brcc	.+2      	; 0x164e <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
    164c:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    1658:	30 97       	sbiw	r30, 0x00	; 0
    165a:	51 f0       	breq	.+20     	; 0x1670 <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    165c:	ec 01       	movw	r28, r24
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    1662:	ec 01       	movw	r28, r24
    1664:	4c 81       	ldd	r20, Y+4	; 0x04
    1666:	5d 81       	ldd	r21, Y+5	; 0x05
    1668:	22 e0       	ldi	r18, 0x02	; 2
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	ea 01       	movw	r28, r20
    166e:	d2 cf       	rjmp	.-92     	; 0x1614 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	80 e0       	ldi	r24, 0x00	; 0
    p_ret_sn  = NULL;
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
    1674:	ec cf       	rjmp	.-40     	; 0x164e <osEE_scheduler_core_rq_preempt_stk+0x86>

00001676 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    1686:	eb 01       	movw	r28, r22
    1688:	aa 81       	ldd	r26, Y+2	; 0x02
    168a:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    168c:	14 96       	adiw	r26, 0x04	; 4
    168e:	ed 91       	ld	r30, X+
    1690:	fc 91       	ld	r31, X
    1692:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1694:	41 15       	cp	r20, r1
    1696:	51 05       	cpc	r21, r1
    1698:	01 f1       	breq	.+64     	; 0x16da <osEE_sn_priority_insert+0x64>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    169a:	22 81       	ldd	r18, Z+2	; 0x02
    169c:	33 81       	ldd	r19, Z+3	; 0x03
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	d8 f0       	brcs	.+54     	; 0x16da <osEE_sn_priority_insert+0x64>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    16a4:	1b 96       	adiw	r26, 0x0b	; 11
    16a6:	2c 91       	ld	r18, X
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    16a8:	dc 01       	movw	r26, r24
    16aa:	ed 91       	ld	r30, X+
    16ac:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    16b2:	30 97       	sbiw	r30, 0x00	; 0
    16b4:	a1 f4       	brne	.+40     	; 0x16de <osEE_sn_priority_insert+0x68>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    16b6:	10 97       	sbiw	r26, 0x00	; 0
    16b8:	69 f1       	breq	.+90     	; 0x1714 <osEE_sn_priority_insert+0x9e>
    p_prev->p_next = p_sn_new;
    16ba:	6d 93       	st	X+, r22
    16bc:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
    16c2:	eb 01       	movw	r28, r22
    16c4:	f9 83       	std	Y+1, r31	; 0x01
    16c6:	e8 83       	st	Y, r30

  return head_changed;
}
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	1f 91       	pop	r17
    16ce:	0f 91       	pop	r16
    16d0:	ff 90       	pop	r15
    16d2:	ef 90       	pop	r14
    16d4:	df 90       	pop	r13
    16d6:	cf 90       	pop	r12
    16d8:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    16da:	21 81       	ldd	r18, Z+1	; 0x01
    16dc:	e5 cf       	rjmp	.-54     	; 0x16a8 <osEE_sn_priority_insert+0x32>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    16de:	02 81       	ldd	r16, Z+2	; 0x02
    16e0:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    16e2:	e8 01       	movw	r28, r16
    16e4:	cc 80       	ldd	r12, Y+4	; 0x04
    16e6:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    16e8:	41 15       	cp	r20, r1
    16ea:	51 05       	cpc	r21, r1
    16ec:	81 f0       	breq	.+32     	; 0x170e <osEE_sn_priority_insert+0x98>
    16ee:	e6 01       	movw	r28, r12
    16f0:	ea 80       	ldd	r14, Y+2	; 0x02
    16f2:	fb 80       	ldd	r15, Y+3	; 0x03
    16f4:	d2 e0       	ldi	r29, 0x02	; 2
    16f6:	ed 16       	cp	r14, r29
    16f8:	f1 04       	cpc	r15, r1
    16fa:	48 f0       	brcs	.+18     	; 0x170e <osEE_sn_priority_insert+0x98>
      prio_to_check = p_cur_tdb->ready_prio;
    16fc:	e8 01       	movw	r28, r16
    16fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
    1700:	32 17       	cp	r19, r18
    1702:	c8 f2       	brcs	.-78     	; 0x16b6 <osEE_sn_priority_insert+0x40>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    1704:	df 01       	movw	r26, r30
    1706:	01 90       	ld	r0, Z+
    1708:	f0 81       	ld	r31, Z
    170a:	e0 2d       	mov	r30, r0
    170c:	d2 cf       	rjmp	.-92     	; 0x16b2 <osEE_sn_priority_insert+0x3c>
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    170e:	e6 01       	movw	r28, r12
    1710:	39 81       	ldd	r19, Y+1	; 0x01
    1712:	f6 cf       	rjmp	.-20     	; 0x1700 <osEE_sn_priority_insert+0x8a>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    1714:	dc 01       	movw	r26, r24
    1716:	6d 93       	st	X+, r22
    1718:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	d1 cf       	rjmp	.-94     	; 0x16c2 <osEE_sn_priority_insert+0x4c>

00001720 <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    1720:	fb 01       	movw	r30, r22
    1722:	53 83       	std	Z+3, r21	; 0x03
    1724:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <osEE_sn_priority_insert>

0000172e <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    172e:	ef 92       	push	r14
    1730:	ff 92       	push	r15
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    173c:	fc 01       	movw	r30, r24
    173e:	c0 81       	ld	r28, Z
    1740:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    1742:	ee 80       	ldd	r14, Y+6	; 0x06
    1744:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    1746:	f7 01       	movw	r30, r14
    1748:	80 81       	ld	r24, Z
    174a:	91 81       	ldd	r25, Z+1	; 0x01
    174c:	9f 83       	std	Y+7, r25	; 0x07
    174e:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    1750:	c8 01       	movw	r24, r16
    1752:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    1756:	89 2b       	or	r24, r25
    1758:	41 f4       	brne	.+16     	; 0x176a <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    175a:	ee 81       	ldd	r30, Y+6	; 0x06
    175c:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    175e:	30 97       	sbiw	r30, 0x00	; 0
    1760:	61 f0       	breq	.+24     	; 0x177a <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
    1766:	99 83       	std	Y+1, r25	; 0x01
    1768:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    176a:	c7 01       	movw	r24, r14
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	ff 90       	pop	r15
    1776:	ef 90       	pop	r14
    1778:	08 95       	ret
      if ( p_curr_stk_sn != NULL ) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    177a:	f8 01       	movw	r30, r16
    177c:	84 81       	ldd	r24, Z+4	; 0x04
    177e:	95 81       	ldd	r25, Z+5	; 0x05
    1780:	f2 cf       	rjmp	.-28     	; 0x1766 <osEE_scheduler_core_pop_running+0x38>

00001782 <osEE_scheduler_task_activated>:
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act,
  CONST(OsEE_bool, AUTOMATIC)               is_preemption_point
)
{
    1782:	cf 92       	push	r12
    1784:	df 92       	push	r13
    1786:	ef 92       	push	r14
    1788:	ff 92       	push	r15
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act  = p_tdb_act->p_tcb;
    1792:	da 01       	movw	r26, r20
    1794:	14 96       	adiw	r26, 0x04	; 4
    1796:	cd 91       	ld	r28, X+
    1798:	dc 91       	ld	r29, X
    179a:	15 97       	sbiw	r26, 0x05	; 5

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act)
    179c:	98 81       	ld	r25, Y
    179e:	1d 96       	adiw	r26, 0x0d	; 13
    17a0:	8c 91       	ld	r24, X
    17a2:	98 17       	cp	r25, r24
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <osEE_scheduler_task_activated+0x26>
    17a6:	54 c0       	rjmp	.+168    	; 0x1850 <osEE_scheduler_task_activated+0xce>
  {
    CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
    17a8:	db 01       	movw	r26, r22
    17aa:	ed 91       	ld	r30, X+
    17ac:	fc 91       	ld	r31, X
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
    17ae:	00 81       	ld	r16, Z
    17b0:	11 81       	ldd	r17, Z+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
    17b2:	d8 01       	movw	r26, r16
    17b4:	14 96       	adiw	r26, 0x04	; 4
    17b6:	ed 90       	ld	r14, X+
    17b8:	fc 90       	ld	r15, X

    ++p_tcb_act->current_num_of_act;
    17ba:	9f 5f       	subi	r25, 0xFF	; 255
    17bc:	98 83       	st	Y, r25
    17be:	c4 80       	ldd	r12, Z+4	; 0x04
    17c0:	d5 80       	ldd	r13, Z+5	; 0x05
    17c2:	d6 01       	movw	r26, r12
    17c4:	6d 91       	ld	r22, X+
    17c6:	7c 91       	ld	r23, X
        osEE_hal_signal_core(p_tdb_act->orig_core_id);
      }
    } else
#endif /* !OSEE_SINGLECORE */
    /* Preemption Check */
    if ((is_preemption_point) &&
    17c8:	23 2b       	or	r18, r19
    17ca:	69 f1       	breq	.+90     	; 0x1826 <osEE_scheduler_task_activated+0xa4>
    17cc:	d7 01       	movw	r26, r14
    17ce:	11 96       	adiw	r26, 0x01	; 1
    17d0:	9c 91       	ld	r25, X
    17d2:	11 97       	sbiw	r26, 0x01	; 1
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	98 17       	cp	r25, r24
    17d8:	30 f5       	brcc	.+76     	; 0x1826 <osEE_scheduler_task_activated+0xa4>
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
  (*pp_fist)              = p_sn_allocated->p_next;
    17da:	75 83       	std	Z+5, r23	; 0x05
    17dc:	64 83       	std	Z+4, r22	; 0x04

      /* Call PostTaskHook before switching active TASK */
      osEE_call_post_task_hook(p_ccb);

      /* Set Previous TASK status as Ready but stacked */
      p_curr_tcb->status = OSEE_TASK_READY_STACKED;
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	13 96       	adiw	r26, 0x03	; 3
    17e4:	9c 93       	st	X, r25
    17e6:	8e 93       	st	-X, r24
    17e8:	12 97       	sbiw	r26, 0x02	; 2

      /* Set the activated TASK as current */
      p_new_stk->p_tdb            = p_tdb_act;
    17ea:	d6 01       	movw	r26, r12
    17ec:	13 96       	adiw	r26, 0x03	; 3
    17ee:	5c 93       	st	X, r21
    17f0:	4e 93       	st	-X, r20
    17f2:	12 97       	sbiw	r26, 0x02	; 2
      p_new_stk->p_next           = p_ccb->p_stk_sn;
    17f4:	86 81       	ldd	r24, Z+6	; 0x06
    17f6:	97 81       	ldd	r25, Z+7	; 0x07
    17f8:	8d 93       	st	X+, r24
    17fa:	9c 93       	st	X, r25
      p_ccb->p_stk_sn             = p_new_stk;
    17fc:	d7 82       	std	Z+7, r13	; 0x07
    17fe:	c6 82       	std	Z+6, r12	; 0x06
      p_ccb->p_curr               = p_tdb_act;
    1800:	51 83       	std	Z+1, r21	; 0x01
    1802:	40 83       	st	Z, r20
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    1804:	19 86       	std	Y+9, r1	; 0x09
    1806:	18 86       	std	Y+8, r1	; 0x08
      osEE_unlock_core(p_cdb);

#if (defined(OSEE_HAS_EVENTS))
      osEE_event_reset_mask(p_tdb_act->p_tcb);
#endif /* OSEE_HAS_EVENTS */
      osEE_change_context_from_running(p_curr, p_tdb_act);
    1808:	ba 01       	movw	r22, r20
    180a:	c8 01       	movw	r24, r16
    180c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <osEE_change_context_from_running>
    } else {
      /* Actually Insert the activated in READY Queue */
      osEE_scheduler_task_activated_insert_rq(p_cdb, p_ccb, p_tdb_act,
        p_tcb_act);
    }
    ev = E_OK;
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
  }
  return ev;
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	df 90       	pop	r13
    1822:	cf 90       	pop	r12
    1824:	08 95       	ret
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	9b 81       	ldd	r25, Y+3	; 0x03
    182a:	89 2b       	or	r24, r25
    182c:	31 f4       	brne	.+12     	; 0x183a <osEE_scheduler_task_activated+0xb8>
    p_tcb_act->status = OSEE_TASK_READY;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	9b 83       	std	Y+3, r25	; 0x03
    1834:	8a 83       	std	Y+2, r24	; 0x02
    1836:	19 86       	std	Y+9, r1	; 0x09
    1838:	18 86       	std	Y+8, r1	; 0x08
    183a:	75 83       	std	Z+5, r23	; 0x05
    183c:	64 83       	std	Z+4, r22	; 0x04
  p_sn_allocated->p_next  = NULL;
    183e:	d6 01       	movw	r26, r12
    1840:	1d 92       	st	X+, r1
    1842:	1c 92       	st	X, r1
    osEE_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    1844:	b6 01       	movw	r22, r12
    1846:	cf 01       	movw	r24, r30
    1848:	02 96       	adiw	r24, 0x02	; 2
    184a:	0e 94 90 0b 	call	0x1720	; 0x1720 <osEE_scheduler_rq_insert>
    184e:	e0 cf       	rjmp	.-64     	; 0x1810 <osEE_scheduler_task_activated+0x8e>
        p_tcb_act);
    }
    ev = E_OK;
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
    1850:	84 e0       	ldi	r24, 0x04	; 4
    1852:	90 e0       	ldi	r25, 0x00	; 0
  }
  return ev;
    1854:	df cf       	rjmp	.-66     	; 0x1814 <osEE_scheduler_task_activated+0x92>

00001856 <osEE_scheduler_task_block_current>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_SN *,  AUTOMATIC, OS_APPL_DATA)  p_sn_blocked
)
{
    1856:	ef 92       	push	r14
    1858:	ff 92       	push	r15
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	cb 01       	movw	r24, r22
    1864:	7a 01       	movw	r14, r20
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    1866:	db 01       	movw	r26, r22
    1868:	cd 91       	ld	r28, X+
    186a:	dc 91       	ld	r29, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_blocked = p_ccb->p_curr;
    186c:	fe 01       	movw	r30, r28
    186e:	01 91       	ld	r16, Z+
    1870:	11 91       	ld	r17, Z+
    1872:	bf 01       	movw	r22, r30

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  (*p_sn_blocked) = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    1874:	0e 94 97 0b 	call	0x172e	; 0x172e <osEE_scheduler_core_pop_running>
    1878:	d7 01       	movw	r26, r14
    187a:	8d 93       	st	X+, r24
    187c:	9c 93       	st	X, r25

  p_tdb_blocked->p_tcb->status = OSEE_TASK_WAITING;
    187e:	d8 01       	movw	r26, r16
    1880:	14 96       	adiw	r26, 0x04	; 4
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	83 e0       	ldi	r24, 0x03	; 3
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	93 83       	std	Z+3, r25	; 0x03
    188c:	82 83       	std	Z+2, r24	; 0x02

  osEE_unlock_core(p_cdb);

  return p_ccb->p_curr;
}
    188e:	88 81       	ld	r24, Y
    1890:	99 81       	ldd	r25, Y+1	; 0x01
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	08 95       	ret

000018a0 <osEE_scheduler_task_unblocked>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	fa 01       	movw	r30, r20
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
    18aa:	db 01       	movw	r26, r22
    18ac:	0d 91       	ld	r16, X+
    18ae:	1c 91       	ld	r17, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
    18b0:	42 81       	ldd	r20, Z+2	; 0x02
    18b2:	53 81       	ldd	r21, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
    18b4:	da 01       	movw	r26, r20
    18b6:	14 96       	adiw	r26, 0x04	; 4
    18b8:	cd 91       	ld	r28, X+
    18ba:	dc 91       	ld	r29, X
    18bc:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9b 83       	std	Y+3, r25	; 0x03
    18c4:	8a 83       	std	Y+2, r24	; 0x02
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
    18c6:	1b 96       	adiw	r26, 0x0b	; 11
    18c8:	8c 91       	ld	r24, X
    18ca:	89 83       	std	Y+1, r24	; 0x01

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    18cc:	bf 01       	movw	r22, r30
    18ce:	c8 01       	movw	r24, r16
    18d0:	02 96       	adiw	r24, 0x02	; 2
    18d2:	0e 94 90 0b 	call	0x1720	; 0x1720 <osEE_scheduler_rq_insert>
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	91 f4       	brne	.+36     	; 0x18fe <osEE_scheduler_task_unblocked+0x5e>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
    18da:	d8 01       	movw	r26, r16
    18dc:	ed 91       	ld	r30, X+
    18de:	fc 91       	ld	r31, X
    18e0:	04 80       	ldd	r0, Z+4	; 0x04
    18e2:	f5 81       	ldd	r31, Z+5	; 0x05
    18e4:	e0 2d       	mov	r30, r0

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    is_preemption = (p_tcb_released->current_prio >
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	39 81       	ldd	r19, Y+1	; 0x01
    18ec:	21 81       	ldd	r18, Z+1	; 0x01
    18ee:	23 17       	cp	r18, r19
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <osEE_scheduler_task_unblocked+0x54>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	08 95       	ret
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
    1902:	f8 cf       	rjmp	.-16     	; 0x18f4 <osEE_scheduler_task_unblocked+0x54>

00001904 <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    1904:	af 92       	push	r10
    1906:	bf 92       	push	r11
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    191a:	db 01       	movw	r26, r22
    191c:	cd 91       	ld	r28, X+
    191e:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    1920:	fe 01       	movw	r30, r28
    1922:	01 91       	ld	r16, Z+
    1924:	11 91       	ld	r17, Z+
    1926:	6f 01       	movw	r12, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    1928:	d8 01       	movw	r26, r16
    192a:	14 96       	adiw	r26, 0x04	; 4
    192c:	ed 90       	ld	r14, X+
    192e:	fc 90       	ld	r15, X

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    1930:	fa 01       	movw	r30, r20
    1932:	11 83       	std	Z+1, r17	; 0x01
    1934:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    1936:	d7 01       	movw	r26, r14
    1938:	12 96       	adiw	r26, 0x02	; 2
    193a:	8d 91       	ld	r24, X+
    193c:	9c 91       	ld	r25, X
    193e:	04 97       	sbiw	r24, 0x04	; 4
    1940:	a9 f5       	brne	.+106    	; 0x19ac <osEE_scheduler_task_terminated+0xa8>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    1942:	b6 01       	movw	r22, r12
    1944:	c5 01       	movw	r24, r10
    1946:	0e 94 97 0b 	call	0x172e	; 0x172e <osEE_scheduler_core_pop_running>
    194a:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    194c:	88 81       	ld	r24, Y
    194e:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    1950:	08 17       	cp	r16, r24
    1952:	19 07       	cpc	r17, r25
    1954:	31 f1       	breq	.+76     	; 0x19a2 <osEE_scheduler_task_terminated+0x9e>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    1956:	d8 01       	movw	r26, r16
    1958:	14 96       	adiw	r26, 0x04	; 4
    195a:	ed 91       	ld	r30, X+
    195c:	fc 91       	ld	r31, X
    195e:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    1960:	1b 96       	adiw	r26, 0x0b	; 11
    1962:	2c 91       	ld	r18, X
    1964:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    1966:	20 81       	ld	r18, Z
    1968:	21 50       	subi	r18, 0x01	; 1
    196a:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    196c:	21 11       	cpse	r18, r1
    196e:	14 c0       	rjmp	.+40     	; 0x1998 <osEE_scheduler_task_terminated+0x94>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    1970:	13 82       	std	Z+3, r1	; 0x03
    1972:	12 82       	std	Z+2, r1	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    1974:	2c 81       	ldd	r18, Y+4	; 0x04
    1976:	3d 81       	ldd	r19, Y+5	; 0x05
    1978:	da 01       	movw	r26, r20
    197a:	2d 93       	st	X+, r18
    197c:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    197e:	5d 83       	std	Y+5, r21	; 0x05
    1980:	4c 83       	std	Y+4, r20	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	ff 90       	pop	r15
    198c:	ef 90       	pop	r14
    198e:	df 90       	pop	r13
    1990:	cf 90       	pop	r12
    1992:	bf 90       	pop	r11
    1994:	af 90       	pop	r10
    1996:	08 95       	ret
  } else {
    p_tcb->status = OSEE_TASK_READY;
    1998:	21 e0       	ldi	r18, 0x01	; 1
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	33 83       	std	Z+3, r19	; 0x03
    199e:	22 83       	std	Z+2, r18	; 0x02
    19a0:	e9 cf       	rjmp	.-46     	; 0x1974 <osEE_scheduler_task_terminated+0x70>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    19a2:	f7 01       	movw	r30, r14
    19a4:	20 81       	ld	r18, Z
    19a6:	21 50       	subi	r18, 0x01	; 1
    19a8:	20 83       	st	Z, r18
    19aa:	e4 cf       	rjmp	.-56     	; 0x1974 <osEE_scheduler_task_terminated+0x70>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    19ac:	6e 81       	ldd	r22, Y+6	; 0x06
    19ae:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    19b0:	fb 01       	movw	r30, r22
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	9f 83       	std	Y+7, r25	; 0x07
    19b8:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    19ba:	d8 01       	movw	r26, r16
    19bc:	1b 96       	adiw	r26, 0x0b	; 11
    19be:	8c 91       	ld	r24, X
    19c0:	f7 01       	movw	r30, r14
    19c2:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	93 83       	std	Z+3, r25	; 0x03
    19ca:	82 83       	std	Z+2, r24	; 0x02
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transiction from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
    19cc:	80 81       	ld	r24, Z
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	11 f4       	brne	.+4      	; 0x19d6 <osEE_scheduler_task_terminated+0xd2>
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    19d2:	11 86       	std	Z+9, r1	; 0x09
    19d4:	10 86       	std	Z+8, r1	; 0x08
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    19d6:	a8 01       	movw	r20, r16
    19d8:	c6 01       	movw	r24, r12
    19da:	0e 94 90 0b 	call	0x1720	; 0x1720 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    19de:	b6 01       	movw	r22, r12
    19e0:	c5 01       	movw	r24, r10
    19e2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    19e6:	89 2b       	or	r24, r25
    19e8:	39 f4       	brne	.+14     	; 0x19f8 <osEE_scheduler_task_terminated+0xf4>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    19ea:	ee 81       	ldd	r30, Y+6	; 0x06
    19ec:	ff 81       	ldd	r31, Y+7	; 0x07
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    19f2:	99 83       	std	Y+1, r25	; 0x01
    19f4:	88 83       	st	Y, r24
    19f6:	c5 cf       	rjmp	.-118    	; 0x1982 <osEE_scheduler_task_terminated+0x7e>
        } else {
          p_tdb_to = p_ccb->p_curr;
    19f8:	88 81       	ld	r24, Y
    19fa:	99 81       	ldd	r25, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    19fc:	c2 cf       	rjmp	.-124    	; 0x1982 <osEE_scheduler_task_terminated+0x7e>

000019fe <osEE_scheduler_task_preemption_point>:
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb
)
{
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	cb 01       	movw	r24, r22
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1a04:	fb 01       	movw	r30, r22
    1a06:	c0 81       	ld	r28, Z
    1a08:	d1 81       	ldd	r29, Z+1	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    1a0a:	be 01       	movw	r22, r28
    1a0c:	6e 5f       	subi	r22, 0xFE	; 254
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <osEE_scheduler_core_rq_preempt_stk>

  if (p_prev != NULL) {
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	49 f0       	breq	.+18     	; 0x1a2a <osEE_scheduler_task_preemption_point+0x2c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_prev, p_curr);
    1a18:	68 81       	ld	r22, Y
    1a1a:	79 81       	ldd	r23, Y+1	; 0x01
    1a1c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
  }
  return is_preemption;
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	08 95       	ret
    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
  }
  return is_preemption;
    1a2e:	fa cf       	rjmp	.-12     	; 0x1a24 <osEE_scheduler_task_preemption_point+0x26>

00001a30 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb
)
{
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb  = p_cdb->p_ccb;
    1a34:	db 01       	movw	r26, r22
    1a36:	ed 91       	ld	r30, X+
    1a38:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
    1a3a:	80 81       	ld	r24, Z
    1a3c:	91 81       	ldd	r25, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
    1a3e:	26 81       	ldd	r18, Z+6	; 0x06
    1a40:	37 81       	ldd	r19, Z+7	; 0x07

  p_preempted->p_tcb->status    = OSEE_TASK_READY_STACKED;
    1a42:	ec 01       	movw	r28, r24
    1a44:	ac 81       	ldd	r26, Y+4	; 0x04
    1a46:	bd 81       	ldd	r27, Y+5	; 0x05
    1a48:	62 e0       	ldi	r22, 0x02	; 2
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	13 96       	adiw	r26, 0x03	; 3
    1a4e:	7c 93       	st	X, r23
    1a50:	6e 93       	st	-X, r22
    1a52:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_curr                 = p_tdb;
    1a54:	51 83       	std	Z+1, r21	; 0x01
    1a56:	40 83       	st	Z, r20
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    1a58:	a4 81       	ldd	r26, Z+4	; 0x04
    1a5a:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    1a5c:	6d 91       	ld	r22, X+
    1a5e:	7c 91       	ld	r23, X
    1a60:	11 97       	sbiw	r26, 0x01	; 1
    1a62:	75 83       	std	Z+5, r23	; 0x05
    1a64:	64 83       	std	Z+4, r22	; 0x04

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  /* Alloc the SN for the new Running TASK */
  p_ccb->p_stk_sn               = osEE_sn_alloc(&p_ccb->p_free_sn);
    1a66:	b7 83       	std	Z+7, r27	; 0x07
    1a68:	a6 83       	std	Z+6, r26	; 0x06
  osEE_unlock_core(p_cdb);

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
    1a6a:	13 96       	adiw	r26, 0x03	; 3
    1a6c:	5c 93       	st	X, r21
    1a6e:	4e 93       	st	-X, r20
    1a70:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
    1a72:	2d 93       	st	X+, r18
    1a74:	3c 93       	st	X, r19

  osEE_change_context_from_running(p_preempted, p_tdb);
    1a76:	ba 01       	movw	r22, r20
}
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;

  osEE_change_context_from_running(p_preempted, p_tdb);
    1a7c:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <osEE_change_context_from_running>

00001a80 <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
    1a80:	db 01       	movw	r26, r22
    1a82:	ed 91       	ld	r30, X+
    1a84:	fc 91       	ld	r31, X
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    1a86:	a4 81       	ldd	r26, Z+4	; 0x04
    1a88:	b5 81       	ldd	r27, Z+5	; 0x05
    1a8a:	ab 2b       	or	r26, r27
    1a8c:	39 f4       	brne	.+14     	; 0x1a9c <osEE_alarm_set_rel+0x1c>
    ev = E_OS_STATE;
  } else {
    p_alarm_cb->cycle = cycle;
    1a8e:	37 83       	std	Z+7, r19	; 0x07
    1a90:	26 83       	std	Z+6, r18	; 0x06

    osEE_counter_insert_rel_trigger(
    1a92:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <osEE_counter_insert_rel_trigger>
      p_counter_db, p_trigger_db, increment
    );
    ev = E_OK;
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	08 95       	ret
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    ev = E_OS_STATE;
    1a9c:	87 e0       	ldi	r24, 0x07	; 7
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
    1aa0:	08 95       	ret

00001aa2 <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    1aa2:	f8 94       	cli
    1aa4:	ff cf       	rjmp	.-2      	; 0x1aa4 <__vector_default+0x2>

00001aa6 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    1aa6:	e2 ea       	ldi	r30, 0xA2	; 162
}
    1aa8:	08 95       	ret

00001aaa <__vector_1>:

#else  /* OSEE_API_DYNAMIC */

/* INT0 interrupt vector */
#if (defined(OSEE_AVR8_INT0_ISR_TID)) && (OSEE_AVR8_INT0_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(INT0_vect, OSEE_AVR8_INT0_ISR_TID)
    1aaa:	8f 93       	push	r24
    1aac:	9f 93       	push	r25
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <osEE_avr8_isr2_stub>
    1ab4:	9f 91       	pop	r25
    1ab6:	8f 91       	pop	r24
    1ab8:	18 95       	reti

00001aba <__vector_11>:
OSEE_AVR8_ISR_NOT_DEFINED(TIMER1_CAPT_vect)
#endif /* OSEE_AVR8_TIMER1_CAPT_ISR */

/* TIMER1_COMPA interrupt vector */
#if (defined(OSEE_AVR8_TIMER1_COMPA_ISR_TID)) && (OSEE_AVR8_TIMER1_COMPA_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(TIMER1_COMPA_vect, OSEE_AVR8_TIMER1_COMPA_ISR_TID)
    1aba:	8f 93       	push	r24
    1abc:	9f 93       	push	r25
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <osEE_avr8_isr2_stub>
    1ac4:	9f 91       	pop	r25
    1ac6:	8f 91       	pop	r24
    1ac8:	18 95       	reti

00001aca <osEE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void OSEE_COMPILER_KEEP OSEE_NAKED osEE_avr8_isr2_stub(TaskType t)
{

  OSEE_AVR8_ISR_PREINSTUB();
    1aca:	1f 92       	push	r1
    1acc:	0f 92       	push	r0
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	0f 92       	push	r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	2f 93       	push	r18
    1ad6:	3f 93       	push	r19
    1ad8:	4f 93       	push	r20
    1ada:	5f 93       	push	r21
    1adc:	6f 93       	push	r22
    1ade:	7f 93       	push	r23
    1ae0:	af 93       	push	r26
    1ae2:	bf 93       	push	r27
    1ae4:	ef 93       	push	r30
    1ae6:	ff 93       	push	r31
{
  VAR(StatusType, AUTOMATIC) ret_val  = E_OK;
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
    1ae8:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <KDB+0x2>
    1aec:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <KDB+0x3>
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	e8 0f       	add	r30, r24
    1af8:	f9 1f       	adc	r31, r25
    1afa:	40 81       	ld	r20, Z
    1afc:	51 81       	ldd	r21, Z+1	; 0x01

  /* Mark the TASK as Activated */
  ++p_act_tdb->p_tcb->current_num_of_act;
    1afe:	da 01       	movw	r26, r20
    1b00:	14 96       	adiw	r26, 0x04	; 4
    1b02:	ed 91       	ld	r30, X+
    1b04:	fc 91       	ld	r31, X
    1b06:	80 81       	ld	r24, Z
    1b08:	8f 5f       	subi	r24, 0xFF	; 255
    1b0a:	80 83       	st	Z, r24

  osEE_scheduler_task_set_running(p_kdb, p_cdb, p_act_tdb);
    1b0c:	65 ef       	ldi	r22, 0xF5	; 245
    1b0e:	71 e0       	ldi	r23, 0x01	; 1
    1b10:	8f ed       	ldi	r24, 0xDF	; 223
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <osEE_scheduler_task_set_running>
#endif /* __ATXMEGA__ */

  /* Activate ISR2 */
  osEE_activate_isr2(t);

  OSEE_AVR8_ISR_POSTINSTUB();
    1b18:	ff 91       	pop	r31
    1b1a:	ef 91       	pop	r30
    1b1c:	bf 91       	pop	r27
    1b1e:	af 91       	pop	r26
    1b20:	7f 91       	pop	r23
    1b22:	6f 91       	pop	r22
    1b24:	5f 91       	pop	r21
    1b26:	4f 91       	pop	r20
    1b28:	3f 91       	pop	r19
    1b2a:	2f 91       	pop	r18
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1

  OSEE_RETURN();
    1b34:	08 95       	ret

00001b36 <osEE_avr8_system_timer_init>:

#if (defined(OSEE_SYSTEM_TIMER_DEVICE))
#if (OSEE_SYSTEM_TIMER_DEVICE == OSEE_AVR8_TIMER1_COMPA)

void osEE_avr8_system_timer_init(void) {
  OsEE_atmega_startTimer1(OSTICKDURATION / OSEE_KILO);
    1b36:	68 ee       	ldi	r22, 0xE8	; 232
    1b38:	73 e0       	ldi	r23, 0x03	; 3
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <OsEE_atmega_startTimer1>

00001b42 <osEE_avr8_system_timer_handler>:
}

ISR2(osEE_avr8_system_timer_handler) {
  OsEE_CDB * p_cdb = osEE_get_curr_core();
  osEE_counter_increment(p_cdb->p_sys_counter_db);
    1b42:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <CDB+0x6>
    1b46:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <CDB+0x7>
    1b4a:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <osEE_counter_increment>

00001b4e <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    1b4e:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    1b50:	a4 81       	ldd	r26, Z+4	; 0x04
    1b52:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    1b54:	12 96       	adiw	r26, 0x02	; 2
    1b56:	2d 91       	ld	r18, X+
    1b58:	3c 91       	ld	r19, X
    1b5a:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    1b5c:	44 e0       	ldi	r20, 0x04	; 4
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	13 96       	adiw	r26, 0x03	; 3
    1b62:	5c 93       	st	X, r21
    1b64:	4e 93       	st	-X, r20
    1b66:	12 97       	sbiw	r26, 0x02	; 2
    1b68:	dc 01       	movw	r26, r24
    1b6a:	12 96       	adiw	r26, 0x02	; 2
    1b6c:	4d 91       	ld	r20, X+
    1b6e:	5c 91       	ld	r21, X
    1b70:	62 81       	ldd	r22, Z+2	; 0x02
    1b72:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    1b74:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	11 f4       	brne	.+4      	; 0x1b80 <osEE_change_context_from_running+0x32>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    1b7c:	0c 94 88 00 	jmp	0x110	; 0x110 <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    1b80:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>

00001b84 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    1b84:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    1b86:	db 01       	movw	r26, r22
    1b88:	14 96       	adiw	r26, 0x04	; 4
    1b8a:	ed 91       	ld	r30, X+
    1b8c:	fc 91       	ld	r31, X
    1b8e:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    1b90:	22 81       	ldd	r18, Z+2	; 0x02
    1b92:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    1b94:	44 e0       	ldi	r20, 0x04	; 4
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	53 83       	std	Z+3, r21	; 0x03
    1b9a:	42 83       	std	Z+2, r20	; 0x02
    1b9c:	12 96       	adiw	r26, 0x02	; 2
    1b9e:	6d 91       	ld	r22, X+
    1ba0:	7c 91       	ld	r23, X

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    1ba2:	22 30       	cpi	r18, 0x02	; 2
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <osEE_change_context_from_task_end+0x28>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    1ba8:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    1bac:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

00001bb0 <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	12 96       	adiw	r26, 0x02	; 2
    1bb4:	6d 91       	ld	r22, X+
    1bb6:	7c 91       	ld	r23, X
    1bb8:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    1bba:	ed 91       	ld	r30, X+
    1bbc:	fc 91       	ld	r31, X
    1bbe:	40 81       	ld	r20, Z
    1bc0:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    1bc2:	db 01       	movw	r26, r22
    1bc4:	ed 91       	ld	r30, X+
    1bc6:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    1bc8:	22 89       	ldd	r18, Z+18	; 0x12
    1bca:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    1bcc:	21 15       	cp	r18, r1
    1bce:	31 05       	cpc	r19, r1
    1bd0:	19 f0       	breq	.+6      	; 0x1bd8 <osEE_idle_task_terminate+0x28>
    1bd2:	42 17       	cp	r20, r18
    1bd4:	53 07       	cpc	r21, r19
    1bd6:	29 f4       	brne	.+10     	; 0x1be2 <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    1bd8:	db 01       	movw	r26, r22
    1bda:	ed 93       	st	X+, r30
    1bdc:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    1bde:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
    1be2:	f9 01       	movw	r30, r18
    1be4:	f1 cf       	rjmp	.-30     	; 0x1bc8 <osEE_idle_task_terminate+0x18>

00001be6 <osEE_counter_insert_abs_trigger>:
    }
  }

  /* Turn Off the Trigger */
  p_trigger_cb->active = OSEE_FALSE;
}
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	8d 91       	ld	r24, X+
    1bf6:	9c 91       	ld	r25, X
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	ed 91       	ld	r30, X+
    1bfc:	fc 91       	ld	r31, X
    1bfe:	11 97       	sbiw	r26, 0x01	; 1
    1c00:	12 96       	adiw	r26, 0x02	; 2
    1c02:	0d 91       	ld	r16, X+
    1c04:	1c 91       	ld	r17, X
    1c06:	db 01       	movw	r26, r22
    1c08:	cd 91       	ld	r28, X+
    1c0a:	dc 91       	ld	r29, X
    1c0c:	21 e0       	ldi	r18, 0x01	; 1
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	3d 83       	std	Y+5, r19	; 0x05
    1c12:	2c 83       	std	Y+4, r18	; 0x04
    1c14:	5b 83       	std	Y+3, r21	; 0x03
    1c16:	4a 83       	std	Y+2, r20	; 0x02
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 97       	sbiw	r30, 0x00	; 0
    1c1e:	e1 f0       	breq	.+56     	; 0x1c58 <osEE_counter_insert_abs_trigger+0x72>
    1c20:	a0 81       	ld	r26, Z
    1c22:	b1 81       	ldd	r27, Z+1	; 0x01
    1c24:	12 96       	adiw	r26, 0x02	; 2
    1c26:	ed 90       	ld	r14, X+
    1c28:	fc 90       	ld	r15, X
    1c2a:	13 97       	sbiw	r26, 0x03	; 3
    1c2c:	0e 15       	cp	r16, r14
    1c2e:	1f 05       	cpc	r17, r15
    1c30:	68 f4       	brcc	.+26     	; 0x1c4c <osEE_counter_insert_abs_trigger+0x66>
    1c32:	4e 15       	cp	r20, r14
    1c34:	5f 05       	cpc	r21, r15
    1c36:	18 f4       	brcc	.+6      	; 0x1c3e <osEE_counter_insert_abs_trigger+0x58>
    1c38:	04 17       	cp	r16, r20
    1c3a:	15 07       	cpc	r17, r21
    1c3c:	68 f0       	brcs	.+26     	; 0x1c58 <osEE_counter_insert_abs_trigger+0x72>
    1c3e:	fc 90       	ld	r15, X
    1c40:	11 96       	adiw	r26, 0x01	; 1
    1c42:	ac 91       	ld	r26, X
    1c44:	9f 01       	movw	r18, r30
    1c46:	ef 2d       	mov	r30, r15
    1c48:	fa 2f       	mov	r31, r26
    1c4a:	e8 cf       	rjmp	.-48     	; 0x1c1c <osEE_counter_insert_abs_trigger+0x36>
    1c4c:	04 17       	cp	r16, r20
    1c4e:	15 07       	cpc	r17, r21
    1c50:	18 f0       	brcs	.+6      	; 0x1c58 <osEE_counter_insert_abs_trigger+0x72>
    1c52:	4e 15       	cp	r20, r14
    1c54:	5f 05       	cpc	r21, r15
    1c56:	98 f7       	brcc	.-26     	; 0x1c3e <osEE_counter_insert_abs_trigger+0x58>
    1c58:	21 15       	cp	r18, r1
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	19 f0       	breq	.+6      	; 0x1c64 <osEE_counter_insert_abs_trigger+0x7e>
    1c5e:	d9 01       	movw	r26, r18
    1c60:	8d 91       	ld	r24, X+
    1c62:	9c 91       	ld	r25, X
    1c64:	dc 01       	movw	r26, r24
    1c66:	6d 93       	st	X+, r22
    1c68:	7c 93       	st	X, r23
    1c6a:	f9 83       	std	Y+1, r31	; 0x01
    1c6c:	e8 83       	st	Y, r30
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	ff 90       	pop	r15
    1c78:	ef 90       	pop	r14
    1c7a:	08 95       	ret

00001c7c <osEE_counter_insert_rel_trigger>:
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	dc 01       	movw	r26, r24
    1c82:	12 96       	adiw	r26, 0x02	; 2
    1c84:	ed 91       	ld	r30, X+
    1c86:	fc 91       	ld	r31, X
    1c88:	13 97       	sbiw	r26, 0x03	; 3
    1c8a:	0d 90       	ld	r0, X+
    1c8c:	bc 91       	ld	r27, X
    1c8e:	a0 2d       	mov	r26, r0
    1c90:	12 96       	adiw	r26, 0x02	; 2
    1c92:	2d 91       	ld	r18, X+
    1c94:	3c 91       	ld	r19, X
    1c96:	df 01       	movw	r26, r30
    1c98:	a4 1b       	sub	r26, r20
    1c9a:	b5 0b       	sbc	r27, r21
    1c9c:	a2 17       	cp	r26, r18
    1c9e:	b3 07       	cpc	r27, r19
    1ca0:	30 f0       	brcs	.+12     	; 0x1cae <osEE_counter_insert_rel_trigger+0x32>
    1ca2:	42 0f       	add	r20, r18
    1ca4:	53 1f       	adc	r21, r19
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <osEE_counter_insert_abs_trigger>
    1cae:	41 50       	subi	r20, 0x01	; 1
    1cb0:	51 09       	sbc	r21, r1
    1cb2:	42 0f       	add	r20, r18
    1cb4:	53 1f       	adc	r21, r19
    1cb6:	4e 1b       	sub	r20, r30
    1cb8:	5f 0b       	sbc	r21, r31
    1cba:	f5 cf       	rjmp	.-22     	; 0x1ca6 <osEE_counter_insert_rel_trigger+0x2a>

00001cbc <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
    1cbc:	2f 92       	push	r2
    1cbe:	3f 92       	push	r3
    1cc0:	4f 92       	push	r4
    1cc2:	5f 92       	push	r5
    1cc4:	6f 92       	push	r6
    1cc6:	7f 92       	push	r7
    1cc8:	8f 92       	push	r8
    1cca:	9f 92       	push	r9
    1ccc:	af 92       	push	r10
    1cce:	bf 92       	push	r11
    1cd0:	cf 92       	push	r12
    1cd2:	df 92       	push	r13
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <osEE_counter_increment+0x26>
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <osEE_counter_increment+0x28>
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
    1ce8:	dc 01       	movw	r26, r24
    1cea:	0d 91       	ld	r16, X+
    1cec:	1c 91       	ld	r17, X
    1cee:	11 97       	sbiw	r26, 0x01	; 1
       This because is more efficient to read SFR than mamory. */
    CONST(CoreIdType, AUTOMATIC) counter_core_id = osEE_get_curr_core_id();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	22 81       	ldd	r18, Z+2	; 0x02
    1cf4:	33 81       	ldd	r19, Z+3	; 0x03
    1cf6:	12 96       	adiw	r26, 0x02	; 2
    1cf8:	4d 91       	ld	r20, X+
    1cfa:	5c 91       	ld	r21, X
    1cfc:	24 17       	cp	r18, r20
    1cfe:	35 07       	cpc	r19, r21
    1d00:	08 f4       	brcc	.+2      	; 0x1d04 <osEE_counter_increment+0x48>
    1d02:	5a c0       	rjmp	.+180    	; 0x1db8 <osEE_counter_increment+0xfc>
      counter_value = (p_counter_cb->value = 0U);
    1d04:	13 82       	std	Z+3, r1	; 0x03
    1d06:	12 82       	std	Z+2, r1	; 0x02
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
            the counters, whenever the locks are not limited resources for the
            HW and falling back to use core locks only for those architectures
            where this is not true. TBD. */
    osEE_lock_core_id(counter_core_id);

    p_triggered_db = p_counter_cb->trigger_queue;
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	01 90       	ld	r0, Z+
    1d10:	f0 81       	ld	r31, Z
    1d12:	e0 2d       	mov	r30, r0
    1d14:	fc 83       	std	Y+4, r31	; 0x04
    1d16:	eb 83       	std	Y+3, r30	; 0x03

    if (p_triggered_db != NULL) {
    1d18:	30 97       	sbiw	r30, 0x00	; 0
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <osEE_counter_increment+0x62>
    1d1c:	91 c0       	rjmp	.+290    	; 0x1e40 <osEE_counter_increment+0x184>
      P2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
    1d1e:	01 90       	ld	r0, Z+
    1d20:	f0 81       	ld	r31, Z
    1d22:	e0 2d       	mov	r30, r0
    1d24:	42 81       	ldd	r20, Z+2	; 0x02
    1d26:	53 81       	ldd	r21, Z+3	; 0x03
    1d28:	42 17       	cp	r20, r18
    1d2a:	53 07       	cpc	r21, r19
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <osEE_counter_increment+0x74>
    1d2e:	88 c0       	rjmp	.+272    	; 0x1e40 <osEE_counter_increment+0x184>
    1d30:	ab 81       	ldd	r26, Y+3	; 0x03
    1d32:	bc 81       	ldd	r27, Y+4	; 0x04
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
    1d34:	2d 91       	ld	r18, X+
    1d36:	3c 91       	ld	r19, X
    1d38:	f9 01       	movw	r30, r18
    1d3a:	a0 81       	ld	r26, Z
    1d3c:	b1 81       	ldd	r27, Z+1	; 0x01
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
    1d3e:	10 97       	sbiw	r26, 0x00	; 0
    1d40:	49 f0       	breq	.+18     	; 0x1d54 <osEE_counter_increment+0x98>
    1d42:	6d 91       	ld	r22, X+
    1d44:	7c 91       	ld	r23, X
    1d46:	11 97       	sbiw	r26, 0x01	; 1

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
        } while ((p_current != NULL) &&
    1d48:	fb 01       	movw	r30, r22
    1d4a:	62 81       	ldd	r22, Z+2	; 0x02
    1d4c:	73 81       	ldd	r23, Z+3	; 0x03
    1d4e:	46 17       	cp	r20, r22
    1d50:	57 07       	cpc	r21, r23
    1d52:	81 f3       	breq	.-32     	; 0x1d34 <osEE_counter_increment+0x78>
    1d54:	2c 01       	movw	r4, r24
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
    1d56:	f9 01       	movw	r30, r18
    1d58:	11 82       	std	Z+1, r1	; 0x01
    1d5a:	10 82       	st	Z, r1
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	b1 83       	std	Z+1, r27	; 0x01
    1d60:	a0 83       	st	Z, r26

        if (((p_tcb->wait_mask & mask) != 0U) &&
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);
    1d62:	e0 90 f5 01 	lds	r14, 0x01F5	; 0x8001f5 <CDB>
    1d66:	f0 90 f6 01 	lds	r15, 0x01F6	; 0x8001f6 <CDB+0x1>
    break;
    case OSEE_ACTION_CALLBACK:
    {
#if (defined(OSEE_HAS_CONTEXT))
      CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
        p_ccb = osEE_get_curr_core()->p_ccb;
    1d6a:	37 01       	movw	r6, r14
#endif
#if (defined(OSEE_HAS_ERRORHOOK))
          if (ev != E_OK) {
            CONST(OsEE_reg, AUTOMATIC)
              flags = osEE_begin_primitive();
            osEE_call_error_hook(osEE_get_curr_core()->p_ccb, ev);
    1d6c:	67 01       	movw	r12, r14
)
{
#if (defined(OSEE_HAS_ERRORHOOK))
  VAR(OsEE_os_context, AUTOMATIC) prev_os_ctx = p_ccb->os_context;
  if (prev_os_ctx != OSEE_ERRORHOOK_CTX) {
    p_ccb->os_context = OSEE_ERRORHOOK_CTX;
    1d6e:	83 e0       	ldi	r24, 0x03	; 3
    1d70:	28 2e       	mov	r2, r24
    1d72:	31 2c       	mov	r3, r1
            p_trigger_to_be_handled = p_triggered_db;

          /* Prepare next trigger to be handled here, before actually handle the
           * current one, otherwise cycling triggers will mess with the list of
           * triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
    1d74:	ab 81       	ldd	r26, Y+3	; 0x03
    1d76:	bc 81       	ldd	r27, Y+4	; 0x04
    1d78:	ad 90       	ld	r10, X+
    1d7a:	bc 90       	ld	r11, X
    1d7c:	f5 01       	movw	r30, r10
    1d7e:	f0 81       	ld	r31, Z
    1d80:	f9 83       	std	Y+1, r31	; 0x01
    1d82:	d5 01       	movw	r26, r10
    1d84:	11 96       	adiw	r26, 0x01	; 1
    1d86:	bc 91       	ld	r27, X
    1d88:	ba 83       	std	Y+2, r27	; 0x02
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
  CONST(TickType, AUTOMATIC)
    cycle = p_trigger_cb->cycle;
    1d8a:	f5 01       	movw	r30, r10
    1d8c:	86 80       	ldd	r8, Z+6	; 0x06
    1d8e:	97 80       	ldd	r9, Z+7	; 0x07
(
  P2CONST(OsEE_action, AUTOMATIC, OS_APPL_DATA) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev;
  switch (p_action->type) {
    1d90:	ab 81       	ldd	r26, Y+3	; 0x03
    1d92:	bc 81       	ldd	r27, Y+4	; 0x04
    1d94:	1c 96       	adiw	r26, 0x0c	; 12
    1d96:	8d 91       	ld	r24, X+
    1d98:	9c 91       	ld	r25, X
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <osEE_counter_increment+0xe6>
    1da0:	66 c0       	rjmp	.+204    	; 0x1e6e <osEE_counter_increment+0x1b2>
    1da2:	78 f0       	brcs	.+30     	; 0x1dc2 <osEE_counter_increment+0x106>
    1da4:	82 30       	cpi	r24, 0x02	; 2
    1da6:	91 05       	cpc	r25, r1
    1da8:	09 f4       	brne	.+2      	; 0x1dac <osEE_counter_increment+0xf0>
    1daa:	9f c0       	rjmp	.+318    	; 0x1eea <osEE_counter_increment+0x22e>
    1dac:	03 97       	sbiw	r24, 0x03	; 3
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <osEE_counter_increment+0xf6>
    1db0:	a3 c0       	rjmp	.+326    	; 0x1ef8 <osEE_counter_increment+0x23c>
                  osEE_get_kernel(), p_cdb_rel, p_sn);
        }

        osEE_unlock_core(p_cdb_rel);

        ev = E_OK;
    1db2:	10 e0       	ldi	r17, 0x00	; 0
    1db4:	00 e0       	ldi	r16, 0x00	; 0
    1db6:	12 c0       	rjmp	.+36     	; 0x1ddc <osEE_counter_increment+0x120>
    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value = (p_counter_cb->value = 0U);
    } else {
      counter_value = ++p_counter_cb->value;
    1db8:	2f 5f       	subi	r18, 0xFF	; 255
    1dba:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbc:	33 83       	std	Z+3, r19	; 0x03
    1dbe:	22 83       	std	Z+2, r18	; 0x02
    1dc0:	a5 cf       	rjmp	.-182    	; 0x1d0c <osEE_counter_increment+0x50>
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;

      ev = osEE_scheduler_task_activated(
    1dc2:	eb 81       	ldd	r30, Y+3	; 0x03
    1dc4:	fc 81       	ldd	r31, Y+4	; 0x04
    1dc6:	46 81       	ldd	r20, Z+6	; 0x06
    1dc8:	57 81       	ldd	r21, Z+7	; 0x07
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	65 ef       	ldi	r22, 0xF5	; 245
    1dd0:	71 e0       	ldi	r23, 0x01	; 1
    1dd2:	8f ed       	ldi	r24, 0xDF	; 223
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	0e 94 c1 0b 	call	0x1782	; 0x1782 <osEE_scheduler_task_activated>
    1dda:	8c 01       	movw	r16, r24
    cycle = p_trigger_cb->cycle;

  ev = osEE_handle_action(&p_alarm_db->action);

  /* TODO: Add active check to let call CancelAlarm from callback... */
  if (cycle > 0U) {
    1ddc:	81 14       	cp	r8, r1
    1dde:	91 04       	cpc	r9, r1
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <osEE_counter_increment+0x128>
    1de2:	9f c0       	rjmp	.+318    	; 0x1f22 <osEE_counter_increment+0x266>
    osEE_counter_insert_rel_trigger(
    1de4:	a4 01       	movw	r20, r8
    1de6:	6b 81       	ldd	r22, Y+3	; 0x03
    1de8:	7c 81       	ldd	r23, Y+4	; 0x04
    1dea:	c2 01       	movw	r24, r4
    1dec:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <osEE_counter_insert_rel_trigger>
                p_trigger_to_be_handled);
#elif (defined(OSEE_HAS_SCHEDULE_TABLES))
          /* TODO */
#endif
#if (defined(OSEE_HAS_ERRORHOOK))
          if (ev != E_OK) {
    1df0:	01 15       	cp	r16, r1
    1df2:	11 05       	cpc	r17, r1
    1df4:	e1 f0       	breq	.+56     	; 0x1e2e <osEE_counter_increment+0x172>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1df6:	bf b6       	in	r11, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1df8:	f8 94       	cli
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
#if (defined(OSEE_HAS_ERRORHOOK))
  VAR(OsEE_os_context, AUTOMATIC) prev_os_ctx = p_ccb->os_context;
    1dfa:	f6 01       	movw	r30, r12
    1dfc:	05 88       	ldd	r0, Z+21	; 0x15
    1dfe:	f6 89       	ldd	r31, Z+22	; 0x16
    1e00:	e0 2d       	mov	r30, r0
    1e02:	fc 83       	std	Y+4, r31	; 0x04
    1e04:	eb 83       	std	Y+3, r30	; 0x03
  if (prev_os_ctx != OSEE_ERRORHOOK_CTX) {
    1e06:	33 97       	sbiw	r30, 0x03	; 3
    1e08:	89 f0       	breq	.+34     	; 0x1e2c <osEE_counter_increment+0x170>
    p_ccb->os_context = OSEE_ERRORHOOK_CTX;
    1e0a:	d6 01       	movw	r26, r12
    1e0c:	56 96       	adiw	r26, 0x16	; 22
    1e0e:	3c 92       	st	X, r3
    1e10:	2e 92       	st	-X, r2
    1e12:	55 97       	sbiw	r26, 0x15	; 21
    p_ccb->last_error = Error;
    1e14:	1c 96       	adiw	r26, 0x0c	; 12
    1e16:	1c 93       	st	X, r17
    1e18:	0e 93       	st	-X, r16
    1e1a:	1b 97       	sbiw	r26, 0x0b	; 11
    ErrorHook(Error);
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <ErrorHook>
    p_ccb->os_context = prev_os_ctx;
    1e22:	4b 81       	ldd	r20, Y+3	; 0x03
    1e24:	5c 81       	ldd	r21, Y+4	; 0x04
    1e26:	f6 01       	movw	r30, r12
    1e28:	56 8b       	std	Z+22, r21	; 0x16
    1e2a:	45 8b       	std	Z+21, r20	; 0x15
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1e2c:	bf be       	out	0x3f, r11	; 63
    1e2e:	59 81       	ldd	r21, Y+1	; 0x01
    1e30:	5b 83       	std	Y+3, r21	; 0x03
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	8c 83       	std	Y+4, r24	; 0x04
            osEE_end_primitive(flags);
          }
#else
          (void)ev; /* TODO: Handle ErrorHook */
#endif /* OSEE_HAS_ERRORHOOK */
        } while (p_triggered_db != NULL);
    1e36:	ab 81       	ldd	r26, Y+3	; 0x03
    1e38:	bc 81       	ldd	r27, Y+4	; 0x04
    1e3a:	ab 2b       	or	r26, r27
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <osEE_counter_increment+0x184>
    1e3e:	9a cf       	rjmp	.-204    	; 0x1d74 <osEE_counter_increment+0xb8>
    }
    /* XXX: Unlock the core only at the End of The Service, to not incur in
            races when handling cycling triggers. */
    osEE_unlock_core_id(counter_core_id);
  }
}
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	1f 91       	pop	r17
    1e4e:	0f 91       	pop	r16
    1e50:	ff 90       	pop	r15
    1e52:	ef 90       	pop	r14
    1e54:	df 90       	pop	r13
    1e56:	cf 90       	pop	r12
    1e58:	bf 90       	pop	r11
    1e5a:	af 90       	pop	r10
    1e5c:	9f 90       	pop	r9
    1e5e:	8f 90       	pop	r8
    1e60:	7f 90       	pop	r7
    1e62:	6f 90       	pop	r6
    1e64:	5f 90       	pop	r5
    1e66:	4f 90       	pop	r4
    1e68:	3f 90       	pop	r3
    1e6a:	2f 90       	pop	r2
    1e6c:	08 95       	ret
    break;
#if (defined(OSEE_HAS_EVENTS))
    case OSEE_ACTION_EVENT:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
    1e6e:	ab 81       	ldd	r26, Y+3	; 0x03
    1e70:	bc 81       	ldd	r27, Y+4	; 0x04
    1e72:	16 96       	adiw	r26, 0x06	; 6
    1e74:	6d 91       	ld	r22, X+
    1e76:	7c 91       	ld	r23, X
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_tcb = p_tdb->p_tcb;
    1e78:	db 01       	movw	r26, r22
    1e7a:	14 96       	adiw	r26, 0x04	; 4
    1e7c:	ed 91       	ld	r30, X+
    1e7e:	fc 91       	ld	r31, X
      CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
        p_cdb_rel = osEE_get_task_curr_core(p_tdb);

      osEE_lock_core(p_cdb_rel);
#if (defined(OSEE_HAS_CHECKS))
      if (p_tcb->status == OSEE_TASK_SUSPENDED) {
    1e80:	42 81       	ldd	r20, Z+2	; 0x02
    1e82:	53 81       	ldd	r21, Z+3	; 0x03
        osEE_unlock_core(p_cdb_rel);
        ev = E_OS_STATE;
    1e84:	07 e0       	ldi	r16, 0x07	; 7
    1e86:	10 e0       	ldi	r17, 0x00	; 0
      CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
        p_cdb_rel = osEE_get_task_curr_core(p_tdb);

      osEE_lock_core(p_cdb_rel);
#if (defined(OSEE_HAS_CHECKS))
      if (p_tcb->status == OSEE_TASK_SUSPENDED) {
    1e88:	41 15       	cp	r20, r1
    1e8a:	51 05       	cpc	r21, r1
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <osEE_counter_increment+0x1d4>
    1e8e:	a6 cf       	rjmp	.-180    	; 0x1ddc <osEE_counter_increment+0x120>
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_tcb = p_tdb->p_tcb;
      CONST(EventMaskType, AUTOMATIC)
        mask = p_action->param.mask;
    1e90:	ab 81       	ldd	r26, Y+3	; 0x03
    1e92:	bc 81       	ldd	r27, Y+4	; 0x04
    1e94:	1a 96       	adiw	r26, 0x0a	; 10
    1e96:	8d 91       	ld	r24, X+
    1e98:	9c 91       	ld	r25, X
      } else
#endif /* OSEE_HAS_CHECKS */
      {
        /* Set the event mask only if the task is not suspended */

        p_tcb->event_mask |= mask;
    1e9a:	20 85       	ldd	r18, Z+8	; 0x08
    1e9c:	31 85       	ldd	r19, Z+9	; 0x09
    1e9e:	28 2b       	or	r18, r24
    1ea0:	39 2b       	or	r19, r25
    1ea2:	31 87       	std	Z+9, r19	; 0x09
    1ea4:	20 87       	std	Z+8, r18	; 0x08

        if (((p_tcb->wait_mask & mask) != 0U) &&
    1ea6:	26 81       	ldd	r18, Z+6	; 0x06
    1ea8:	37 81       	ldd	r19, Z+7	; 0x07
    1eaa:	82 23       	and	r24, r18
    1eac:	93 23       	and	r25, r19
    1eae:	89 2b       	or	r24, r25
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <osEE_counter_increment+0x1f8>
    1eb2:	7f cf       	rjmp	.-258    	; 0x1db2 <osEE_counter_increment+0xf6>
    1eb4:	43 30       	cpi	r20, 0x03	; 3
    1eb6:	51 05       	cpc	r21, r1
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <osEE_counter_increment+0x200>
    1eba:	7b cf       	rjmp	.-266    	; 0x1db2 <osEE_counter_increment+0xf6>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    1ebc:	d7 01       	movw	r26, r14
    1ebe:	14 96       	adiw	r26, 0x04	; 4
    1ec0:	ed 91       	ld	r30, X+
    1ec2:	fc 91       	ld	r31, X
    1ec4:	15 97       	sbiw	r26, 0x05	; 5
  (*pp_fist)              = p_sn_allocated->p_next;
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	15 96       	adiw	r26, 0x05	; 5
    1ecc:	9c 93       	st	X, r25
    1ece:	8e 93       	st	-X, r24
    1ed0:	14 97       	sbiw	r26, 0x04	; 4
  p_sn_allocated->p_next  = NULL;
    1ed2:	11 82       	std	Z+1, r1	; 0x01
    1ed4:	10 82       	st	Z, r1
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);

          p_sn->p_tdb = p_tdb;
    1ed6:	73 83       	std	Z+3, r23	; 0x03
    1ed8:	62 83       	std	Z+2, r22	; 0x02

          /* Release the TASK (and the SN) */
          (void)osEE_scheduler_task_unblocked(
    1eda:	af 01       	movw	r20, r30
    1edc:	65 ef       	ldi	r22, 0xF5	; 245
    1ede:	71 e0       	ldi	r23, 0x01	; 1
    1ee0:	8f ed       	ldi	r24, 0xDF	; 223
    1ee2:	91 e0       	ldi	r25, 0x01	; 1
    1ee4:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <osEE_scheduler_task_unblocked>
    1ee8:	64 cf       	rjmp	.-312    	; 0x1db2 <osEE_counter_increment+0xf6>
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
      osEE_counter_increment(p_action->param.p_counter_db);
    1eea:	eb 81       	ldd	r30, Y+3	; 0x03
    1eec:	fc 81       	ldd	r31, Y+4	; 0x04
    1eee:	80 85       	ldd	r24, Z+8	; 0x08
    1ef0:	91 85       	ldd	r25, Z+9	; 0x09
    1ef2:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <osEE_counter_increment>
    1ef6:	5d cf       	rjmp	.-326    	; 0x1db2 <osEE_counter_increment+0xf6>
    {
#if (defined(OSEE_HAS_CONTEXT))
      CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
        p_ccb = osEE_get_curr_core()->p_ccb;
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;
    1ef8:	d3 01       	movw	r26, r6
    1efa:	55 96       	adiw	r26, 0x15	; 21
    1efc:	0d 91       	ld	r16, X+
    1efe:	1c 91       	ld	r17, X
    1f00:	56 97       	sbiw	r26, 0x16	; 22

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
    1f02:	e9 e0       	ldi	r30, 0x09	; 9
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	56 96       	adiw	r26, 0x16	; 22
    1f08:	fc 93       	st	X, r31
    1f0a:	ee 93       	st	-X, r30
    1f0c:	55 97       	sbiw	r26, 0x15	; 21
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
    1f0e:	ab 81       	ldd	r26, Y+3	; 0x03
    1f10:	bc 81       	ldd	r27, Y+4	; 0x04
    1f12:	14 96       	adiw	r26, 0x04	; 4
    1f14:	ed 91       	ld	r30, X+
    1f16:	fc 91       	ld	r31, X
    1f18:	09 95       	icall
#if (defined(OSEE_HAS_CONTEXT))
      p_ccb->os_context = prev_os_context;
    1f1a:	f3 01       	movw	r30, r6
    1f1c:	16 8b       	std	Z+22, r17	; 0x16
    1f1e:	05 8b       	std	Z+21, r16	; 0x15
    1f20:	48 cf       	rjmp	.-368    	; 0x1db2 <osEE_counter_increment+0xf6>
  if (cycle > 0U) {
    osEE_counter_insert_rel_trigger(
      p_counter_db, p_trigger_db, cycle
    );
  } else {
    p_trigger_cb->active = OSEE_FALSE;
    1f22:	d5 01       	movw	r26, r10
    1f24:	15 96       	adiw	r26, 0x05	; 5
    1f26:	1c 92       	st	X, r1
    1f28:	1e 92       	st	-X, r1
    1f2a:	14 97       	sbiw	r26, 0x04	; 4
    1f2c:	61 cf       	rjmp	.-318    	; 0x1df0 <osEE_counter_increment+0x134>

00001f2e <OsEE_atmega_startTimer1>:
 * - x < TIMER_1_PRESCALER_1024_MAX_TICKS = 4194304:	64     us
 */
void OsEE_atmega_startTimer1(uint32_t microsecondsInterval) {
  uint8_t	timer1Prescaler;
  uint16_t	timer1CompareValue;
  TCCR1B = 0;	/* Pause Timer. */
    1f2e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  TCCR1A = 0;
    1f32:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  TCCR1C = 0;
    1f36:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
  TCNT1  = 0;
    1f3a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1f3e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
   * 0 1 1 clkIO/64 (From prescaler)
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    1f42:	61 15       	cp	r22, r1
    1f44:	20 e1       	ldi	r18, 0x10	; 16
    1f46:	72 07       	cpc	r23, r18
    1f48:	81 05       	cpc	r24, r1
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	a0 f4       	brcc	.+40     	; 0x1f76 <OsEE_atmega_startTimer1+0x48>
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
    1f4e:	e4 e0       	ldi	r30, 0x04	; 4
    1f50:	66 0f       	add	r22, r22
    1f52:	77 1f       	adc	r23, r23
    1f54:	ea 95       	dec	r30
    1f56:	e1 f7       	brne	.-8      	; 0x1f50 <OsEE_atmega_startTimer1+0x22>
    1f58:	61 50       	subi	r22, 0x01	; 1
    1f5a:	71 09       	sbc	r23, r1
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
  }
#else
  #error("Unsupported CPU frequency")
#endif
  TIFR1  = (1 << OCIE1A);	/* Clear Output Compare A Match Flag. */
    1f5e:	92 e0       	ldi	r25, 0x02	; 2
    1f60:	96 bb       	out	0x16, r25	; 22
  TIMSK1 = (1 << OCIE1A);	/* Output Compare A Match Interrupt Enable */
    1f62:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  OCR1A  = timer1CompareValue;	/* Set Compare A Match Value */
    1f66:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1f6a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  TCCR1B = (1 << WGM12) | timer1Prescaler;	/* Set CTC Mode and Prescaler. */
    1f6e:	88 60       	ori	r24, 0x08	; 8
    1f70:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
}	/* startTimer1() */
    1f74:	08 95       	ret
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    1f76:	61 15       	cp	r22, r1
    1f78:	20 e8       	ldi	r18, 0x80	; 128
    1f7a:	72 07       	cpc	r23, r18
    1f7c:	81 05       	cpc	r24, r1
    1f7e:	91 05       	cpc	r25, r1
    1f80:	30 f4       	brcc	.+12     	; 0x1f8e <OsEE_atmega_startTimer1+0x60>
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
    1f82:	66 0f       	add	r22, r22
    1f84:	77 1f       	adc	r23, r23
    1f86:	61 50       	subi	r22, 0x01	; 1
    1f88:	71 09       	sbc	r23, r1
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
    1f8c:	e8 cf       	rjmp	.-48     	; 0x1f5e <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    1f8e:	6c 3f       	cpi	r22, 0xFC	; 252
    1f90:	2f ef       	ldi	r18, 0xFF	; 255
    1f92:	72 07       	cpc	r23, r18
    1f94:	23 e0       	ldi	r18, 0x03	; 3
    1f96:	82 07       	cpc	r24, r18
    1f98:	91 05       	cpc	r25, r1
    1f9a:	58 f4       	brcc	.+22     	; 0x1fb2 <OsEE_atmega_startTimer1+0x84>
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
    1f9c:	42 e0       	ldi	r20, 0x02	; 2
    1f9e:	96 95       	lsr	r25
    1fa0:	87 95       	ror	r24
    1fa2:	77 95       	ror	r23
    1fa4:	67 95       	ror	r22
    1fa6:	4a 95       	dec	r20
    1fa8:	d1 f7       	brne	.-12     	; 0x1f9e <OsEE_atmega_startTimer1+0x70>
    1faa:	61 50       	subi	r22, 0x01	; 1
    1fac:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    1fae:	83 e0       	ldi	r24, 0x03	; 3
    1fb0:	d6 cf       	rjmp	.-84     	; 0x1f5e <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    1fb2:	61 15       	cp	r22, r1
    1fb4:	71 05       	cpc	r23, r1
    1fb6:	20 e1       	ldi	r18, 0x10	; 16
    1fb8:	82 07       	cpc	r24, r18
    1fba:	91 05       	cpc	r25, r1
    1fbc:	58 f4       	brcc	.+22     	; 0x1fd4 <OsEE_atmega_startTimer1+0xa6>
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
    1fbe:	34 e0       	ldi	r19, 0x04	; 4
    1fc0:	96 95       	lsr	r25
    1fc2:	87 95       	ror	r24
    1fc4:	77 95       	ror	r23
    1fc6:	67 95       	ror	r22
    1fc8:	3a 95       	dec	r19
    1fca:	d1 f7       	brne	.-12     	; 0x1fc0 <OsEE_atmega_startTimer1+0x92>
    1fcc:	61 50       	subi	r22, 0x01	; 1
    1fce:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    1fd0:	84 e0       	ldi	r24, 0x04	; 4
    1fd2:	c5 cf       	rjmp	.-118    	; 0x1f5e <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
    1fd4:	26 e0       	ldi	r18, 0x06	; 6
    1fd6:	96 95       	lsr	r25
    1fd8:	87 95       	ror	r24
    1fda:	77 95       	ror	r23
    1fdc:	67 95       	ror	r22
    1fde:	2a 95       	dec	r18
    1fe0:	d1 f7       	brne	.-12     	; 0x1fd6 <OsEE_atmega_startTimer1+0xa8>
    1fe2:	61 50       	subi	r22, 0x01	; 1
    1fe4:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    1fe6:	85 e0       	ldi	r24, 0x05	; 5
    1fe8:	ba cf       	rjmp	.-140    	; 0x1f5e <OsEE_atmega_startTimer1+0x30>

00001fea <__udivmodsi4>:
    1fea:	a1 e2       	ldi	r26, 0x21	; 33
    1fec:	1a 2e       	mov	r1, r26
    1fee:	aa 1b       	sub	r26, r26
    1ff0:	bb 1b       	sub	r27, r27
    1ff2:	fd 01       	movw	r30, r26
    1ff4:	0d c0       	rjmp	.+26     	; 0x2010 <__udivmodsi4_ep>

00001ff6 <__udivmodsi4_loop>:
    1ff6:	aa 1f       	adc	r26, r26
    1ff8:	bb 1f       	adc	r27, r27
    1ffa:	ee 1f       	adc	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	a2 17       	cp	r26, r18
    2000:	b3 07       	cpc	r27, r19
    2002:	e4 07       	cpc	r30, r20
    2004:	f5 07       	cpc	r31, r21
    2006:	20 f0       	brcs	.+8      	; 0x2010 <__udivmodsi4_ep>
    2008:	a2 1b       	sub	r26, r18
    200a:	b3 0b       	sbc	r27, r19
    200c:	e4 0b       	sbc	r30, r20
    200e:	f5 0b       	sbc	r31, r21

00002010 <__udivmodsi4_ep>:
    2010:	66 1f       	adc	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	88 1f       	adc	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	1a 94       	dec	r1
    201a:	69 f7       	brne	.-38     	; 0x1ff6 <__udivmodsi4_loop>
    201c:	60 95       	com	r22
    201e:	70 95       	com	r23
    2020:	80 95       	com	r24
    2022:	90 95       	com	r25
    2024:	9b 01       	movw	r18, r22
    2026:	ac 01       	movw	r20, r24
    2028:	bd 01       	movw	r22, r26
    202a:	cf 01       	movw	r24, r30
    202c:	08 95       	ret

0000202e <__tablejump2__>:
    202e:	ee 0f       	add	r30, r30
    2030:	ff 1f       	adc	r31, r31
    2032:	05 90       	lpm	r0, Z+
    2034:	f4 91       	lpm	r31, Z
    2036:	e0 2d       	mov	r30, r0
    2038:	09 94       	ijmp

0000203a <_exit>:
    203a:	f8 94       	cli

0000203c <__stop_program>:
    203c:	ff cf       	rjmp	.-2      	; 0x203c <__stop_program>
