
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  000012b0  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012b0  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b3  008001c4  008001c4  00001408  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a8  00000000  00000000  00001460  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d183  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002747  00000000  00000000  0000ea8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ed0  00000000  00000000  000111d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b50  00000000  00000000  000140a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003451  00000000  00000000  00014bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004863  00000000  00000000  00018045  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000508  00000000  00000000  0001c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_18>
      4c:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_19>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	ab 04       	cpc	r10, r11

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e0 eb       	ldi	r30, 0xB0	; 176
      ce:	f2 e1       	ldi	r31, 0x12	; 18
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a4 3c       	cpi	r26, 0xC4	; 196
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	22 e0       	ldi	r18, 0x02	; 2
      de:	a4 ec       	ldi	r26, 0xC4	; 196
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a7 37       	cpi	r26, 0x77	; 119
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	cd e5       	ldi	r28, 0x5D	; 93
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	21 97       	sbiw	r28, 0x01	; 1
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__tablejump2__>
      fc:	cc 35       	cpi	r28, 0x5C	; 92
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
     106:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__vector_default>
	...

00000110 <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     110:	2f 92       	push	r2
     112:	3f 92       	push	r3
     114:	4f 92       	push	r4
     116:	5f 92       	push	r5
     118:	6f 92       	push	r6
     11a:	7f 92       	push	r7
     11c:	8f 92       	push	r8
     11e:	9f 92       	push	r9
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	e4 2f       	mov	r30, r20
     136:	f5 2f       	mov	r31, r21
     138:	41 90       	ld	r4, Z+
     13a:	50 80       	ld	r5, Z
     13c:	4f 92       	push	r4
     13e:	5f 92       	push	r5
     140:	e4 2f       	mov	r30, r20
     142:	f5 2f       	mov	r31, r21
     144:	4d b6       	in	r4, 0x3d	; 61
     146:	5e b6       	in	r5, 0x3e	; 62
     148:	41 92       	st	Z+, r4
     14a:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     14c:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>

00000150 <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     150:	e6 2f       	mov	r30, r22
     152:	f7 2f       	mov	r31, r23
     154:	41 90       	ld	r4, Z+
     156:	50 80       	ld	r5, Z
     158:	4d be       	out	0x3d, r4	; 61
     15a:	5e be       	out	0x3e, r5	; 62
     15c:	5f 90       	pop	r5
     15e:	4f 90       	pop	r4
     160:	e6 2f       	mov	r30, r22
     162:	f7 2f       	mov	r31, r23
     164:	41 92       	st	Z+, r4
     166:	50 82       	st	Z, r5
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	bf 90       	pop	r11
     17a:	af 90       	pop	r10
     17c:	9f 90       	pop	r9
     17e:	8f 90       	pop	r8
     180:	7f 90       	pop	r7
     182:	6f 90       	pop	r6
     184:	5f 90       	pop	r5
     186:	4f 90       	pop	r4
     188:	3f 90       	pop	r3
     18a:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     18c:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <osEE_scheduler_task_wrapper_restore>

00000190 <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     190:	e6 2f       	mov	r30, r22
    mov r31, r23
     192:	f7 2f       	mov	r31, r23
    ld  r20, z+
     194:	41 91       	ld	r20, Z+
    ld  r21, z
     196:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     198:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     19a:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     19c:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <osEE_scheduler_task_wrapper_run>

000001a0 <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     1a0:	2f 92       	push	r2
     1a2:	3f 92       	push	r3
     1a4:	4f 92       	push	r4
     1a6:	5f 92       	push	r5
     1a8:	6f 92       	push	r6
     1aa:	7f 92       	push	r7
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	e4 2f       	mov	r30, r20
     1c6:	f5 2f       	mov	r31, r21
     1c8:	41 90       	ld	r4, Z+
     1ca:	50 80       	ld	r5, Z
     1cc:	4f 92       	push	r4
     1ce:	5f 92       	push	r5
     1d0:	e4 2f       	mov	r30, r20
     1d2:	f5 2f       	mov	r31, r21
     1d4:	4d b6       	in	r4, 0x3d	; 61
     1d6:	5e b6       	in	r5, 0x3e	; 62
     1d8:	41 92       	st	Z+, r4
     1da:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     1dc:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

000001e0 <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     1e0:	e8 2f       	mov	r30, r24
    mov r31, r25
     1e2:	f9 2f       	mov	r31, r25
    ld  r20, z+
     1e4:	41 91       	ld	r20, Z+
    ld  r21, z
     1e6:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     1e8:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     1ea:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     1ec:	e6 2f       	mov	r30, r22
    mov r31, r23
     1ee:	f7 2f       	mov	r31, r23

    ijmp
     1f0:	09 94       	ijmp
	...

000001f4 <idle_hook>:
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <idle_hook+0xa>
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	8d b7       	in	r24, 0x3d	; 61
     204:	9e b7       	in	r25, 0x3e	; 62
     206:	9a 83       	std	Y+2, r25	; 0x02
     208:	89 83       	std	Y+1, r24	; 0x01
     20a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__data_end>
     20e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <__data_end+0x1>
     212:	89 2b       	or	r24, r25
     214:	a9 f4       	brne	.+42     	; 0x240 <idle_hook+0x4c>
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	9a 81       	ldd	r25, Y+2	; 0x02
     21a:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <__data_end+0x1>
     21e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__data_end>
     222:	f8 94       	cli
     224:	8a e4       	ldi	r24, 0x4A	; 74
     226:	93 e0       	ldi	r25, 0x03	; 3
     228:	89 2b       	or	r24, r25
     22a:	11 f0       	breq	.+4      	; 0x230 <idle_hook+0x3c>
     22c:	0e 94 4a 03 	call	0x694	; 0x694 <_Z14serialEventRunv>
     230:	78 94       	sei
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	08 95       	ret
     240:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <__data_end>
     244:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <__data_end+0x1>
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	9a 81       	ldd	r25, Y+2	; 0x02
     24c:	28 17       	cp	r18, r24
     24e:	39 07       	cpc	r19, r25
     250:	41 f3       	breq	.-48     	; 0x222 <idle_hook+0x2e>
     252:	f8 94       	cli
     254:	88 e2       	ldi	r24, 0x28	; 40
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0e 94 5f 01 	call	0x2be	; 0x2be <serial_print>
     25c:	0a e4       	ldi	r16, 0x4A	; 74
     25e:	13 e0       	ldi	r17, 0x03	; 3
     260:	01 15       	cp	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	e9 f3       	breq	.-6      	; 0x260 <idle_hook+0x6c>
     266:	0e 94 4a 03 	call	0x694	; 0x694 <_Z14serialEventRunv>
     26a:	fa cf       	rjmp	.-12     	; 0x260 <idle_hook+0x6c>

0000026c <setup>:
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	84 e0       	ldi	r24, 0x04	; 4
     270:	0e 94 a3 02 	call	0x546	; 0x546 <pinMode>
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	0e 94 df 02 	call	0x5be	; 0x5be <digitalWrite>
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	0e 94 a3 02 	call	0x546	; 0x546 <pinMode>
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	83 e0       	ldi	r24, 0x03	; 3
     288:	0e 94 df 02 	call	0x5be	; 0x5be <digitalWrite>
     28c:	26 e0       	ldi	r18, 0x06	; 6
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	52 ec       	ldi	r21, 0xC2	; 194
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	89 ed       	ldi	r24, 0xD9	; 217
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_ZN14HardwareSerial5beginEmh>
     29e:	63 e4       	ldi	r22, 0x43	; 67
     2a0:	71 e0       	ldi	r23, 0x01	; 1
     2a2:	89 ed       	ldi	r24, 0xD9	; 217
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <_ZN5Print7printlnEPKc>

000002aa <main>:
     2aa:	0e 94 3f 02 	call	0x47e	; 0x47e <init>
     2ae:	0e 94 36 01 	call	0x26c	; 0x26c <setup>
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	0e 94 d1 05 	call	0xba2	; 0xba2 <StartOS>
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	08 95       	ret

000002be <serial_print>:
     2be:	f8 94       	cli
     2c0:	fc 01       	movw	r30, r24
     2c2:	01 90       	ld	r0, Z+
     2c4:	00 20       	and	r0, r0
     2c6:	e9 f7       	brne	.-6      	; 0x2c2 <serial_print+0x4>
     2c8:	31 97       	sbiw	r30, 0x01	; 1
     2ca:	af 01       	movw	r20, r30
     2cc:	48 1b       	sub	r20, r24
     2ce:	59 0b       	sbc	r21, r25
     2d0:	bc 01       	movw	r22, r24
     2d2:	89 ed       	ldi	r24, 0xD9	; 217
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN5Print5writeEPKhj>
     2da:	78 94       	sei
     2dc:	08 95       	ret

000002de <FuncTask1>:
     2de:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <task1_delay>
     2e2:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <task1_delay+0x1>
     2e6:	82 3c       	cpi	r24, 0xC2	; 194
     2e8:	2a e2       	ldi	r18, 0x2A	; 42
     2ea:	92 07       	cpc	r25, r18
     2ec:	ac f1       	brlt	.+106    	; 0x358 <FuncTask1+0x7a>
     2ee:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <task1_delay+0x1>
     2f2:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <task1_delay>
     2f6:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <green_state>
     2fa:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <green_state+0x1>
     2fe:	89 2b       	or	r24, r25
     300:	29 f5       	brne	.+74     	; 0x34c <FuncTask1+0x6e>
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <green_state+0x1>
     30a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <green_state>
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	0e 94 df 02 	call	0x5be	; 0x5be <digitalWrite>
     316:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <task_count>
     31a:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <task_count+0x1>
     31e:	6f 5f       	subi	r22, 0xFF	; 255
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	70 93 cf 01 	sts	0x01CF, r23	; 0x8001cf <task_count+0x1>
     326:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <task_count>
     32a:	4a e0       	ldi	r20, 0x0A	; 10
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	89 ed       	ldi	r24, 0xD9	; 217
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	0e 94 ca 05 	call	0xb94	; 0xb94 <_ZN5Print5printEii>
     336:	65 ea       	ldi	r22, 0xA5	; 165
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	89 ed       	ldi	r24, 0xD9	; 217
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN5Print7printlnEPKc>
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ActivateTask>
     348:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <TerminateTask>
     34c:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <green_state+0x1>
     350:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <green_state>
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	dc cf       	rjmp	.-72     	; 0x310 <FuncTask1+0x32>
     358:	01 96       	adiw	r24, 0x01	; 1
     35a:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <task1_delay+0x1>
     35e:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <task1_delay>
     362:	ef cf       	rjmp	.-34     	; 0x342 <FuncTask1+0x64>

00000364 <FuncTask2>:
     364:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <task2_delay>
     368:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <task2_delay+0x1>
     36c:	82 3c       	cpi	r24, 0xC2	; 194
     36e:	2a e2       	ldi	r18, 0x2A	; 42
     370:	92 07       	cpc	r25, r18
     372:	ac f1       	brlt	.+106    	; 0x3de <FuncTask2+0x7a>
     374:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <task2_delay+0x1>
     378:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <task2_delay>
     37c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <red1_state>
     380:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <red1_state+0x1>
     384:	89 2b       	or	r24, r25
     386:	29 f5       	brne	.+74     	; 0x3d2 <FuncTask2+0x6e>
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <red1_state+0x1>
     390:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <red1_state>
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	84 e0       	ldi	r24, 0x04	; 4
     398:	0e 94 df 02 	call	0x5be	; 0x5be <digitalWrite>
     39c:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <task_count>
     3a0:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <task_count+0x1>
     3a4:	6f 5f       	subi	r22, 0xFF	; 255
     3a6:	7f 4f       	sbci	r23, 0xFF	; 255
     3a8:	70 93 cf 01 	sts	0x01CF, r23	; 0x8001cf <task_count+0x1>
     3ac:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <task_count>
     3b0:	4a e0       	ldi	r20, 0x0A	; 10
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	89 ed       	ldi	r24, 0xD9	; 217
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 ca 05 	call	0xb94	; 0xb94 <_ZN5Print5printEii>
     3bc:	6b ea       	ldi	r22, 0xAB	; 171
     3be:	71 e0       	ldi	r23, 0x01	; 1
     3c0:	89 ed       	ldi	r24, 0xD9	; 217
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN5Print7printlnEPKc>
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ActivateTask>
     3ce:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <TerminateTask>
     3d2:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <red1_state+0x1>
     3d6:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <red1_state>
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	dc cf       	rjmp	.-72     	; 0x396 <FuncTask2+0x32>
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <task2_delay+0x1>
     3e4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <task2_delay>
     3e8:	ef cf       	rjmp	.-34     	; 0x3c8 <FuncTask2+0x64>

000003ea <__vector_16>:
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
     3ea:	1f 92       	push	r1
     3ec:	0f 92       	push	r0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1
     3f4:	2f 93       	push	r18
     3f6:	3f 93       	push	r19
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	af 93       	push	r26
     3fe:	bf 93       	push	r27
     400:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <timer0_millis>
     404:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <timer0_millis+0x1>
     408:	a0 91 d3 01 	lds	r26, 0x01D3	; 0x8001d3 <timer0_millis+0x2>
     40c:	b0 91 d4 01 	lds	r27, 0x01D4	; 0x8001d4 <timer0_millis+0x3>
     410:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <timer0_fract>
     414:	23 e0       	ldi	r18, 0x03	; 3
     416:	23 0f       	add	r18, r19
     418:	2d 37       	cpi	r18, 0x7D	; 125
     41a:	58 f5       	brcc	.+86     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	a1 1d       	adc	r26, r1
     420:	b1 1d       	adc	r27, r1
     422:	20 93 d0 01 	sts	0x01D0, r18	; 0x8001d0 <timer0_fract>
     426:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <timer0_millis>
     42a:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <timer0_millis+0x1>
     42e:	a0 93 d3 01 	sts	0x01D3, r26	; 0x8001d3 <timer0_millis+0x2>
     432:	b0 93 d4 01 	sts	0x01D4, r27	; 0x8001d4 <timer0_millis+0x3>
     436:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <timer0_overflow_count>
     43a:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <timer0_overflow_count+0x1>
     43e:	a0 91 d7 01 	lds	r26, 0x01D7	; 0x8001d7 <timer0_overflow_count+0x2>
     442:	b0 91 d8 01 	lds	r27, 0x01D8	; 0x8001d8 <timer0_overflow_count+0x3>
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	a1 1d       	adc	r26, r1
     44a:	b1 1d       	adc	r27, r1
     44c:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <timer0_overflow_count>
     450:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <timer0_overflow_count+0x1>
     454:	a0 93 d7 01 	sts	0x01D7, r26	; 0x8001d7 <timer0_overflow_count+0x2>
     458:	b0 93 d8 01 	sts	0x01D8, r27	; 0x8001d8 <timer0_overflow_count+0x3>
     45c:	bf 91       	pop	r27
     45e:	af 91       	pop	r26
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	3f 91       	pop	r19
     466:	2f 91       	pop	r18
     468:	0f 90       	pop	r0
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	0f 90       	pop	r0
     46e:	1f 90       	pop	r1
     470:	18 95       	reti
     472:	26 e8       	ldi	r18, 0x86	; 134
     474:	23 0f       	add	r18, r19
     476:	02 96       	adiw	r24, 0x02	; 2
     478:	a1 1d       	adc	r26, r1
     47a:	b1 1d       	adc	r27, r1
     47c:	d2 cf       	rjmp	.-92     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

0000047e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     47e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     480:	84 b5       	in	r24, 0x24	; 36
     482:	82 60       	ori	r24, 0x02	; 2
     484:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     486:	84 b5       	in	r24, 0x24	; 36
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     48c:	85 b5       	in	r24, 0x25	; 37
     48e:	82 60       	ori	r24, 0x02	; 2
     490:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     492:	85 b5       	in	r24, 0x25	; 37
     494:	81 60       	ori	r24, 0x01	; 1
     496:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     498:	ee e6       	ldi	r30, 0x6E	; 110
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	81 60       	ori	r24, 0x01	; 1
     4a0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     4a2:	e1 e8       	ldi	r30, 0x81	; 129
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     4a8:	80 81       	ld	r24, Z
     4aa:	82 60       	ori	r24, 0x02	; 2
     4ac:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     4ae:	80 81       	ld	r24, Z
     4b0:	81 60       	ori	r24, 0x01	; 1
     4b2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     4b4:	e0 e8       	ldi	r30, 0x80	; 128
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	81 60       	ori	r24, 0x01	; 1
     4bc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     4be:	e1 eb       	ldi	r30, 0xB1	; 177
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	84 60       	ori	r24, 0x04	; 4
     4c6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     4c8:	e0 eb       	ldi	r30, 0xB0	; 176
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	81 60       	ori	r24, 0x01	; 1
     4d0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     4d2:	ea e7       	ldi	r30, 0x7A	; 122
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	84 60       	ori	r24, 0x04	; 4
     4da:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     4dc:	80 81       	ld	r24, Z
     4de:	82 60       	ori	r24, 0x02	; 2
     4e0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     4e2:	80 81       	ld	r24, Z
     4e4:	81 60       	ori	r24, 0x01	; 1
     4e6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     4e8:	80 81       	ld	r24, Z
     4ea:	80 68       	ori	r24, 0x80	; 128
     4ec:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     4ee:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
#endif
}
     4f2:	08 95       	ret

000004f4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     4f4:	83 30       	cpi	r24, 0x03	; 3
     4f6:	81 f0       	breq	.+32     	; 0x518 <turnOffPWM+0x24>
     4f8:	28 f4       	brcc	.+10     	; 0x504 <turnOffPWM+0x10>
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	99 f0       	breq	.+38     	; 0x524 <turnOffPWM+0x30>
     4fe:	82 30       	cpi	r24, 0x02	; 2
     500:	a9 f0       	breq	.+42     	; 0x52c <turnOffPWM+0x38>
     502:	08 95       	ret
     504:	87 30       	cpi	r24, 0x07	; 7
     506:	a9 f0       	breq	.+42     	; 0x532 <turnOffPWM+0x3e>
     508:	88 30       	cpi	r24, 0x08	; 8
     50a:	c9 f0       	breq	.+50     	; 0x53e <turnOffPWM+0x4a>
     50c:	84 30       	cpi	r24, 0x04	; 4
     50e:	b1 f4       	brne	.+44     	; 0x53c <turnOffPWM+0x48>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     510:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     514:	8f 7d       	andi	r24, 0xDF	; 223
     516:	03 c0       	rjmp	.+6      	; 0x51e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     518:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     51c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     51e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     522:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     524:	84 b5       	in	r24, 0x24	; 36
     526:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     528:	84 bd       	out	0x24, r24	; 36
     52a:	08 95       	ret
     52c:	84 b5       	in	r24, 0x24	; 36
     52e:	8f 7d       	andi	r24, 0xDF	; 223
     530:	fb cf       	rjmp	.-10     	; 0x528 <turnOffPWM+0x34>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     532:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     536:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     538:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
     53c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     53e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     542:	8f 7d       	andi	r24, 0xDF	; 223
     544:	f9 cf       	rjmp	.-14     	; 0x538 <turnOffPWM+0x44>

00000546 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	fc 01       	movw	r30, r24
     54e:	e4 58       	subi	r30, 0x84	; 132
     550:	ff 4f       	sbci	r31, 0xFF	; 255
     552:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     554:	80 57       	subi	r24, 0x70	; 112
     556:	9f 4f       	sbci	r25, 0xFF	; 255
     558:	fc 01       	movw	r30, r24
     55a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     55c:	88 23       	and	r24, r24
     55e:	c9 f0       	breq	.+50     	; 0x592 <pinMode+0x4c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	fc 01       	movw	r30, r24
     568:	e2 55       	subi	r30, 0x52	; 82
     56a:	ff 4f       	sbci	r31, 0xFF	; 255
     56c:	a5 91       	lpm	r26, Z+
     56e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     570:	fc 01       	movw	r30, r24
     572:	ec 55       	subi	r30, 0x5C	; 92
     574:	ff 4f       	sbci	r31, 0xFF	; 255
     576:	c5 91       	lpm	r28, Z+
     578:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     57a:	61 11       	cpse	r22, r1
     57c:	0d c0       	rjmp	.+26     	; 0x598 <pinMode+0x52>
		uint8_t oldSREG = SREG;
     57e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     580:	f8 94       	cli
		*reg &= ~bit;
     582:	8c 91       	ld	r24, X
     584:	20 95       	com	r18
     586:	82 23       	and	r24, r18
     588:	8c 93       	st	X, r24
		*out &= ~bit;
     58a:	88 81       	ld	r24, Y
     58c:	28 23       	and	r18, r24
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out |= bit;
     58e:	28 83       	st	Y, r18
		SREG = oldSREG;
     590:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     598:	62 30       	cpi	r22, 0x02	; 2
     59a:	51 f4       	brne	.+20     	; 0x5b0 <pinMode+0x6a>
		uint8_t oldSREG = SREG;
     59c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     59e:	f8 94       	cli
		*reg &= ~bit;
     5a0:	3c 91       	ld	r19, X
     5a2:	82 2f       	mov	r24, r18
     5a4:	80 95       	com	r24
     5a6:	83 23       	and	r24, r19
     5a8:	8c 93       	st	X, r24
		*out |= bit;
     5aa:	e8 81       	ld	r30, Y
     5ac:	2e 2b       	or	r18, r30
     5ae:	ef cf       	rjmp	.-34     	; 0x58e <pinMode+0x48>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     5b0:	8f b7       	in	r24, 0x3f	; 63
                cli();
     5b2:	f8 94       	cli
		*reg |= bit;
     5b4:	ec 91       	ld	r30, X
     5b6:	2e 2b       	or	r18, r30
     5b8:	2c 93       	st	X, r18
		SREG = oldSREG;
     5ba:	8f bf       	out	0x3f, r24	; 63
     5bc:	ea cf       	rjmp	.-44     	; 0x592 <pinMode+0x4c>

000005be <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     5c4:	28 2f       	mov	r18, r24
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	f9 01       	movw	r30, r18
     5ca:	e8 59       	subi	r30, 0x98	; 152
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     5d0:	f9 01       	movw	r30, r18
     5d2:	e4 58       	subi	r30, 0x84	; 132
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     5d8:	f9 01       	movw	r30, r18
     5da:	e0 57       	subi	r30, 0x70	; 112
     5dc:	ff 4f       	sbci	r31, 0xFF	; 255
     5de:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     5e0:	cc 23       	and	r28, r28
     5e2:	a9 f0       	breq	.+42     	; 0x60e <digitalWrite+0x50>
     5e4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     5e6:	81 11       	cpse	r24, r1
     5e8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <turnOffPWM>

	out = portOutputRegister(port);
     5ec:	ec 2f       	mov	r30, r28
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	ec 55       	subi	r30, 0x5C	; 92
     5f6:	ff 4f       	sbci	r31, 0xFF	; 255
     5f8:	a5 91       	lpm	r26, Z+
     5fa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     5fc:	8f b7       	in	r24, 0x3f	; 63
	cli();
     5fe:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     600:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     602:	11 11       	cpse	r17, r1
     604:	08 c0       	rjmp	.+16     	; 0x616 <digitalWrite+0x58>
		*out &= ~bit;
     606:	d0 95       	com	r29
     608:	de 23       	and	r29, r30
	} else {
		*out |= bit;
     60a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     60c:	8f bf       	out	0x3f, r24	; 63
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	08 95       	ret
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
     616:	de 2b       	or	r29, r30
     618:	f8 cf       	rjmp	.-16     	; 0x60a <digitalWrite+0x4c>

0000061a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     61a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     61c:	91 8d       	ldd	r25, Z+25	; 0x19
     61e:	22 8d       	ldd	r18, Z+26	; 0x1a
     620:	89 2f       	mov	r24, r25
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	80 5c       	subi	r24, 0xC0	; 192
     626:	9f 4f       	sbci	r25, 0xFF	; 255
     628:	82 1b       	sub	r24, r18
     62a:	91 09       	sbc	r25, r1
}
     62c:	8f 73       	andi	r24, 0x3F	; 63
     62e:	99 27       	eor	r25, r25
     630:	08 95       	ret

00000632 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     632:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     634:	91 8d       	ldd	r25, Z+25	; 0x19
     636:	82 8d       	ldd	r24, Z+26	; 0x1a
     638:	98 17       	cp	r25, r24
     63a:	31 f0       	breq	.+12     	; 0x648 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     63c:	82 8d       	ldd	r24, Z+26	; 0x1a
     63e:	e8 0f       	add	r30, r24
     640:	f1 1d       	adc	r31, r1
     642:	85 8d       	ldd	r24, Z+29	; 0x1d
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     648:	8f ef       	ldi	r24, 0xFF	; 255
     64a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     64c:	08 95       	ret

0000064e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     64e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     650:	91 8d       	ldd	r25, Z+25	; 0x19
     652:	82 8d       	ldd	r24, Z+26	; 0x1a
     654:	98 17       	cp	r25, r24
     656:	61 f0       	breq	.+24     	; 0x670 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     658:	a2 8d       	ldd	r26, Z+26	; 0x1a
     65a:	ae 0f       	add	r26, r30
     65c:	bf 2f       	mov	r27, r31
     65e:	b1 1d       	adc	r27, r1
     660:	5d 96       	adiw	r26, 0x1d	; 29
     662:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     664:	92 8d       	ldd	r25, Z+26	; 0x1a
     666:	9f 5f       	subi	r25, 0xFF	; 255
     668:	9f 73       	andi	r25, 0x3F	; 63
     66a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     670:	8f ef       	ldi	r24, 0xFF	; 255
     672:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     674:	08 95       	ret

00000676 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     676:	fc 01       	movw	r30, r24
     678:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     67a:	44 8d       	ldd	r20, Z+28	; 0x1c
     67c:	25 2f       	mov	r18, r21
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	84 2f       	mov	r24, r20
     682:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     684:	82 1b       	sub	r24, r18
     686:	93 0b       	sbc	r25, r19
     688:	54 17       	cp	r21, r20
     68a:	10 f0       	brcs	.+4      	; 0x690 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     68c:	cf 96       	adiw	r24, 0x3f	; 63
     68e:	08 95       	ret
  return tail - head - 1;
     690:	01 97       	sbiw	r24, 0x01	; 1
}
     692:	08 95       	ret

00000694 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     694:	81 ea       	ldi	r24, 0xA1	; 161
     696:	94 e0       	ldi	r25, 0x04	; 4
     698:	89 2b       	or	r24, r25
     69a:	49 f0       	breq	.+18     	; 0x6ae <_Z14serialEventRunv+0x1a>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	89 2b       	or	r24, r25
     6a2:	29 f0       	breq	.+10     	; 0x6ae <_Z14serialEventRunv+0x1a>
     6a4:	0e 94 a1 04 	call	0x942	; 0x942 <_Z17Serial0_availablev>
     6a8:	81 11       	cpse	r24, r1
     6aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     6ae:	08 95       	ret

000006b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     6b0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     6b2:	a4 8d       	ldd	r26, Z+28	; 0x1c
     6b4:	a8 0f       	add	r26, r24
     6b6:	b9 2f       	mov	r27, r25
     6b8:	b1 1d       	adc	r27, r1
     6ba:	a3 5a       	subi	r26, 0xA3	; 163
     6bc:	bf 4f       	sbci	r27, 0xFF	; 255
     6be:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     6c0:	84 8d       	ldd	r24, Z+28	; 0x1c
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	8f 73       	andi	r24, 0x3F	; 63
     6c8:	99 27       	eor	r25, r25
     6ca:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     6cc:	a6 89       	ldd	r26, Z+22	; 0x16
     6ce:	b7 89       	ldd	r27, Z+23	; 0x17
     6d0:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     6d2:	a0 89       	ldd	r26, Z+16	; 0x10
     6d4:	b1 89       	ldd	r27, Z+17	; 0x11
     6d6:	8c 91       	ld	r24, X
     6d8:	83 70       	andi	r24, 0x03	; 3
     6da:	80 64       	ori	r24, 0x40	; 64
     6dc:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     6de:	93 8d       	ldd	r25, Z+27	; 0x1b
     6e0:	84 8d       	ldd	r24, Z+28	; 0x1c
     6e2:	98 13       	cpse	r25, r24
     6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     6e6:	02 88       	ldd	r0, Z+18	; 0x12
     6e8:	f3 89       	ldd	r31, Z+19	; 0x13
     6ea:	e0 2d       	mov	r30, r0
     6ec:	80 81       	ld	r24, Z
     6ee:	8f 7d       	andi	r24, 0xDF	; 223
     6f0:	80 83       	st	Z, r24
  }
}
     6f2:	08 95       	ret

000006f4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     6fa:	88 8d       	ldd	r24, Y+24	; 0x18
     6fc:	88 23       	and	r24, r24
     6fe:	b9 f0       	breq	.+46     	; 0x72e <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     700:	aa 89       	ldd	r26, Y+18	; 0x12
     702:	bb 89       	ldd	r27, Y+19	; 0x13
     704:	e8 89       	ldd	r30, Y+16	; 0x10
     706:	f9 89       	ldd	r31, Y+17	; 0x11
     708:	8c 91       	ld	r24, X
     70a:	85 fd       	sbrc	r24, 5
     70c:	03 c0       	rjmp	.+6      	; 0x714 <_ZN14HardwareSerial5flushEv+0x20>
     70e:	80 81       	ld	r24, Z
     710:	86 fd       	sbrc	r24, 6
     712:	0d c0       	rjmp	.+26     	; 0x72e <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	07 fc       	sbrc	r0, 7
     718:	f7 cf       	rjmp	.-18     	; 0x708 <_ZN14HardwareSerial5flushEv+0x14>
     71a:	8c 91       	ld	r24, X
     71c:	85 ff       	sbrs	r24, 5
     71e:	f2 cf       	rjmp	.-28     	; 0x704 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     720:	80 81       	ld	r24, Z
     722:	85 ff       	sbrs	r24, 5
     724:	ed cf       	rjmp	.-38     	; 0x700 <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
     726:	ce 01       	movw	r24, r28
     728:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     72c:	e9 cf       	rjmp	.-46     	; 0x700 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	ec 01       	movw	r28, r24
  _written = true;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     746:	9b 8d       	ldd	r25, Y+27	; 0x1b
     748:	8c 8d       	ldd	r24, Y+28	; 0x1c
     74a:	98 13       	cpse	r25, r24
     74c:	1a c0       	rjmp	.+52     	; 0x782 <_ZN14HardwareSerial5writeEh+0x4e>
     74e:	e8 89       	ldd	r30, Y+16	; 0x10
     750:	f9 89       	ldd	r31, Y+17	; 0x11
     752:	80 81       	ld	r24, Z
     754:	85 ff       	sbrs	r24, 5
     756:	15 c0       	rjmp	.+42     	; 0x782 <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     758:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     75a:	f8 94       	cli
      *_udr = c;
     75c:	ee 89       	ldd	r30, Y+22	; 0x16
     75e:	ff 89       	ldd	r31, Y+23	; 0x17
     760:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     762:	e8 89       	ldd	r30, Y+16	; 0x10
     764:	f9 89       	ldd	r31, Y+17	; 0x11
     766:	80 81       	ld	r24, Z
     768:	83 70       	andi	r24, 0x03	; 3
     76a:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     76c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     76e:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	08 95       	ret
     782:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     784:	0b 8d       	ldd	r16, Y+27	; 0x1b
     786:	10 e0       	ldi	r17, 0x00	; 0
     788:	0f 5f       	subi	r16, 0xFF	; 255
     78a:	1f 4f       	sbci	r17, 0xFF	; 255
     78c:	0f 73       	andi	r16, 0x3F	; 63
     78e:	11 27       	eor	r17, r17
     790:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     792:	8c 8d       	ldd	r24, Y+28	; 0x1c
     794:	8e 11       	cpse	r24, r14
     796:	0c c0       	rjmp	.+24     	; 0x7b0 <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	07 fc       	sbrc	r0, 7
     79c:	fa cf       	rjmp	.-12     	; 0x792 <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     79e:	e8 89       	ldd	r30, Y+16	; 0x10
     7a0:	f9 89       	ldd	r31, Y+17	; 0x11
     7a2:	80 81       	ld	r24, Z
     7a4:	85 ff       	sbrs	r24, 5
     7a6:	f5 cf       	rjmp	.-22     	; 0x792 <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
     7a8:	ce 01       	movw	r24, r28
     7aa:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     7ae:	f1 cf       	rjmp	.-30     	; 0x792 <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     7b0:	eb 8d       	ldd	r30, Y+27	; 0x1b
     7b2:	ec 0f       	add	r30, r28
     7b4:	fd 2f       	mov	r31, r29
     7b6:	f1 1d       	adc	r31, r1
     7b8:	e3 5a       	subi	r30, 0xA3	; 163
     7ba:	ff 4f       	sbci	r31, 0xFF	; 255
     7bc:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     7be:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7c0:	f8 94       	cli
    _tx_buffer_head = i;
     7c2:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     7c4:	ea 89       	ldd	r30, Y+18	; 0x12
     7c6:	fb 89       	ldd	r31, Y+19	; 0x13
     7c8:	80 81       	ld	r24, Z
     7ca:	80 62       	ori	r24, 0x20	; 32
     7cc:	cf cf       	rjmp	.-98     	; 0x76c <_ZN14HardwareSerial5writeEh+0x38>

000007ce <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	ec 01       	movw	r28, r24
     7de:	6a 01       	movw	r12, r20
     7e0:	7b 01       	movw	r14, r22
     7e2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     7e4:	e8 89       	ldd	r30, Y+16	; 0x10
     7e6:	f9 89       	ldd	r31, Y+17	; 0x11
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     7ec:	c1 14       	cp	r12, r1
     7ee:	81 ee       	ldi	r24, 0xE1	; 225
     7f0:	d8 06       	cpc	r13, r24
     7f2:	e1 04       	cpc	r14, r1
     7f4:	f1 04       	cpc	r15, r1
     7f6:	a1 f0       	breq	.+40     	; 0x820 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	79 e0       	ldi	r23, 0x09	; 9
     7fc:	8d e3       	ldi	r24, 0x3D	; 61
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	a7 01       	movw	r20, r14
     802:	96 01       	movw	r18, r12
     804:	0e 94 2e 09 	call	0x125c	; 0x125c <__udivmodsi4>
     808:	21 50       	subi	r18, 0x01	; 1
     80a:	31 09       	sbc	r19, r1
     80c:	41 09       	sbc	r20, r1
     80e:	51 09       	sbc	r21, r1
     810:	56 95       	lsr	r21
     812:	47 95       	ror	r20
     814:	37 95       	ror	r19
     816:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     818:	21 15       	cp	r18, r1
     81a:	80 e1       	ldi	r24, 0x10	; 16
     81c:	38 07       	cpc	r19, r24
     81e:	98 f0       	brcs	.+38     	; 0x846 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
     820:	e8 89       	ldd	r30, Y+16	; 0x10
     822:	f9 89       	ldd	r31, Y+17	; 0x11
     824:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     826:	60 e8       	ldi	r22, 0x80	; 128
     828:	74 e8       	ldi	r23, 0x84	; 132
     82a:	8e e1       	ldi	r24, 0x1E	; 30
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	a7 01       	movw	r20, r14
     830:	96 01       	movw	r18, r12
     832:	0e 94 2e 09 	call	0x125c	; 0x125c <__udivmodsi4>
     836:	21 50       	subi	r18, 0x01	; 1
     838:	31 09       	sbc	r19, r1
     83a:	41 09       	sbc	r20, r1
     83c:	51 09       	sbc	r21, r1
     83e:	56 95       	lsr	r21
     840:	47 95       	ror	r20
     842:	37 95       	ror	r19
     844:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     846:	ec 85       	ldd	r30, Y+12	; 0x0c
     848:	fd 85       	ldd	r31, Y+13	; 0x0d
     84a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     84c:	ee 85       	ldd	r30, Y+14	; 0x0e
     84e:	ff 85       	ldd	r31, Y+15	; 0x0f
     850:	20 83       	st	Z, r18

  _written = false;
     852:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     854:	ec 89       	ldd	r30, Y+20	; 0x14
     856:	fd 89       	ldd	r31, Y+21	; 0x15
     858:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     85a:	ea 89       	ldd	r30, Y+18	; 0x12
     85c:	fb 89       	ldd	r31, Y+19	; 0x13
     85e:	80 81       	ld	r24, Z
     860:	80 61       	ori	r24, 0x10	; 16
     862:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     864:	ea 89       	ldd	r30, Y+18	; 0x12
     866:	fb 89       	ldd	r31, Y+19	; 0x13
     868:	80 81       	ld	r24, Z
     86a:	88 60       	ori	r24, 0x08	; 8
     86c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     86e:	ea 89       	ldd	r30, Y+18	; 0x12
     870:	fb 89       	ldd	r31, Y+19	; 0x13
     872:	80 81       	ld	r24, Z
     874:	80 68       	ori	r24, 0x80	; 128
     876:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     878:	ea 89       	ldd	r30, Y+18	; 0x12
     87a:	fb 89       	ldd	r31, Y+19	; 0x13
     87c:	80 81       	ld	r24, Z
     87e:	8f 7d       	andi	r24, 0xDF	; 223
     880:	80 83       	st	Z, r24
}
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	08 95       	ret

00000892 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	2f 93       	push	r18
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	ef 93       	push	r30
     8a4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     8a6:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <Serial+0x10>
     8aa:	f0 91 ea 01 	lds	r31, 0x01EA	; 0x8001ea <Serial+0x11>
     8ae:	80 81       	ld	r24, Z
     8b0:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <Serial+0x16>
     8b4:	f0 91 f0 01 	lds	r31, 0x01F0	; 0x8001f0 <Serial+0x17>
     8b8:	82 fd       	sbrc	r24, 2
     8ba:	1b c0       	rjmp	.+54     	; 0x8f2 <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     8bc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     8be:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <Serial+0x19>
     8c2:	8f 5f       	subi	r24, 0xFF	; 255
     8c4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     8c6:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <Serial+0x1a>
     8ca:	82 17       	cp	r24, r18
     8cc:	41 f0       	breq	.+16     	; 0x8de <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
     8ce:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <Serial+0x19>
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	e7 52       	subi	r30, 0x27	; 39
     8d6:	fe 4f       	sbci	r31, 0xFE	; 254
     8d8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     8da:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <Serial+0x19>
    Serial._rx_complete_irq();
  }
     8de:	ff 91       	pop	r31
     8e0:	ef 91       	pop	r30
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	2f 91       	pop	r18
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     8f2:	80 81       	ld	r24, Z
     8f4:	f4 cf       	rjmp	.-24     	; 0x8de <__vector_18+0x4c>

000008f6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     8f6:	1f 92       	push	r1
     8f8:	0f 92       	push	r0
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	0f 92       	push	r0
     8fe:	11 24       	eor	r1, r1
     900:	2f 93       	push	r18
     902:	3f 93       	push	r19
     904:	4f 93       	push	r20
     906:	5f 93       	push	r21
     908:	6f 93       	push	r22
     90a:	7f 93       	push	r23
     90c:	8f 93       	push	r24
     90e:	9f 93       	push	r25
     910:	af 93       	push	r26
     912:	bf 93       	push	r27
     914:	ef 93       	push	r30
     916:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     918:	89 ed       	ldi	r24, 0xD9	; 217
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     920:	ff 91       	pop	r31
     922:	ef 91       	pop	r30
     924:	bf 91       	pop	r27
     926:	af 91       	pop	r26
     928:	9f 91       	pop	r25
     92a:	8f 91       	pop	r24
     92c:	7f 91       	pop	r23
     92e:	6f 91       	pop	r22
     930:	5f 91       	pop	r21
     932:	4f 91       	pop	r20
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f 90       	pop	r0
     93e:	1f 90       	pop	r1
     940:	18 95       	reti

00000942 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     942:	89 ed       	ldi	r24, 0xD9	; 217
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN14HardwareSerial9availableEv>
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	89 2b       	or	r24, r25
     94e:	09 f4       	brne	.+2      	; 0x952 <_Z17Serial0_availablev+0x10>
     950:	20 e0       	ldi	r18, 0x00	; 0
}
     952:	82 2f       	mov	r24, r18
     954:	08 95       	ret

00000956 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     956:	e9 ed       	ldi	r30, 0xD9	; 217
     958:	f1 e0       	ldi	r31, 0x01	; 1
     95a:	13 82       	std	Z+3, r1	; 0x03
     95c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     95e:	88 ee       	ldi	r24, 0xE8	; 232
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	a0 e0       	ldi	r26, 0x00	; 0
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	84 83       	std	Z+4, r24	; 0x04
     968:	95 83       	std	Z+5, r25	; 0x05
     96a:	a6 83       	std	Z+6, r26	; 0x06
     96c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     96e:	85 eb       	ldi	r24, 0xB5	; 181
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	91 83       	std	Z+1, r25	; 0x01
     974:	80 83       	st	Z, r24
     976:	85 ec       	ldi	r24, 0xC5	; 197
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	95 87       	std	Z+13, r25	; 0x0d
     97c:	84 87       	std	Z+12, r24	; 0x0c
     97e:	84 ec       	ldi	r24, 0xC4	; 196
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	97 87       	std	Z+15, r25	; 0x0f
     984:	86 87       	std	Z+14, r24	; 0x0e
     986:	80 ec       	ldi	r24, 0xC0	; 192
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	91 8b       	std	Z+17, r25	; 0x11
     98c:	80 8b       	std	Z+16, r24	; 0x10
     98e:	81 ec       	ldi	r24, 0xC1	; 193
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	93 8b       	std	Z+19, r25	; 0x13
     994:	82 8b       	std	Z+18, r24	; 0x12
     996:	82 ec       	ldi	r24, 0xC2	; 194
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	95 8b       	std	Z+21, r25	; 0x15
     99c:	84 8b       	std	Z+20, r24	; 0x14
     99e:	86 ec       	ldi	r24, 0xC6	; 198
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	97 8b       	std	Z+23, r25	; 0x17
     9a4:	86 8b       	std	Z+22, r24	; 0x16
     9a6:	11 8e       	std	Z+25, r1	; 0x19
     9a8:	12 8e       	std	Z+26, r1	; 0x1a
     9aa:	13 8e       	std	Z+27, r1	; 0x1b
     9ac:	14 8e       	std	Z+28, r1	; 0x1c
     9ae:	08 95       	ret

000009b0 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     9b0:	af 92       	push	r10
     9b2:	bf 92       	push	r11
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	6c 01       	movw	r12, r24
     9c6:	7b 01       	movw	r14, r22
     9c8:	8b 01       	movw	r16, r22
     9ca:	04 0f       	add	r16, r20
     9cc:	15 1f       	adc	r17, r21
     9ce:	eb 01       	movw	r28, r22
     9d0:	5e 01       	movw	r10, r28
     9d2:	ae 18       	sub	r10, r14
     9d4:	bf 08       	sbc	r11, r15
     9d6:	c0 17       	cp	r28, r16
     9d8:	d1 07       	cpc	r29, r17
     9da:	59 f0       	breq	.+22     	; 0x9f2 <_ZN5Print5writeEPKhj+0x42>
     9dc:	69 91       	ld	r22, Y+
     9de:	d6 01       	movw	r26, r12
     9e0:	ed 91       	ld	r30, X+
     9e2:	fc 91       	ld	r31, X
     9e4:	01 90       	ld	r0, Z+
     9e6:	f0 81       	ld	r31, Z
     9e8:	e0 2d       	mov	r30, r0
     9ea:	c6 01       	movw	r24, r12
     9ec:	09 95       	icall
     9ee:	89 2b       	or	r24, r25
     9f0:	79 f7       	brne	.-34     	; 0x9d0 <_ZN5Print5writeEPKhj+0x20>
     9f2:	c5 01       	movw	r24, r10
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	bf 90       	pop	r11
     a06:	af 90       	pop	r10
     a08:	08 95       	ret

00000a0a <_ZN5Print5writeEPKc.part.2>:
     a0a:	fb 01       	movw	r30, r22
     a0c:	01 90       	ld	r0, Z+
     a0e:	00 20       	and	r0, r0
     a10:	e9 f7       	brne	.-6      	; 0xa0c <_ZN5Print5writeEPKc.part.2+0x2>
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	af 01       	movw	r20, r30
     a16:	46 1b       	sub	r20, r22
     a18:	57 0b       	sbc	r21, r23
     a1a:	dc 01       	movw	r26, r24
     a1c:	ed 91       	ld	r30, X+
     a1e:	fc 91       	ld	r31, X
     a20:	02 80       	ldd	r0, Z+2	; 0x02
     a22:	f3 81       	ldd	r31, Z+3	; 0x03
     a24:	e0 2d       	mov	r30, r0
     a26:	09 94       	ijmp

00000a28 <_ZN5Print5printEc>:
     a28:	dc 01       	movw	r26, r24
     a2a:	ed 91       	ld	r30, X+
     a2c:	fc 91       	ld	r31, X
     a2e:	01 90       	ld	r0, Z+
     a30:	f0 81       	ld	r31, Z
     a32:	e0 2d       	mov	r30, r0
     a34:	09 94       	ijmp

00000a36 <_ZN5Print7printlnEv>:
     a36:	60 e4       	ldi	r22, 0x40	; 64
     a38:	71 e0       	ldi	r23, 0x01	; 1
     a3a:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <_ZN5Print5writeEPKc.part.2>

00000a3e <_ZN5Print7printlnEPKc>:
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	8c 01       	movw	r16, r24
     a48:	d0 e0       	ldi	r29, 0x00	; 0
     a4a:	c0 e0       	ldi	r28, 0x00	; 0
     a4c:	61 15       	cp	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f0       	breq	.+6      	; 0xa58 <_ZN5Print7printlnEPKc+0x1a>
     a52:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN5Print5writeEPKc.part.2>
     a56:	ec 01       	movw	r28, r24
     a58:	c8 01       	movw	r24, r16
     a5a:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN5Print7printlnEv>
     a5e:	8c 0f       	add	r24, r28
     a60:	9d 1f       	adc	r25, r29
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	08 95       	ret

00000a6c <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     a6c:	8f 92       	push	r8
     a6e:	9f 92       	push	r9
     a70:	af 92       	push	r10
     a72:	bf 92       	push	r11
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	a1 97       	sbiw	r28, 0x21	; 33
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	7c 01       	movw	r14, r24
     a92:	fa 01       	movw	r30, r20
     a94:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     a96:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     a98:	22 30       	cpi	r18, 0x02	; 2
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <_ZN5Print11printNumberEmh+0x32>
     a9c:	2a e0       	ldi	r18, 0x0A	; 10
     a9e:	8e 01       	movw	r16, r28
     aa0:	0f 5d       	subi	r16, 0xDF	; 223
     aa2:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     aa4:	82 2e       	mov	r8, r18
     aa6:	91 2c       	mov	r9, r1
     aa8:	b1 2c       	mov	r11, r1
     aaa:	a1 2c       	mov	r10, r1
     aac:	bf 01       	movw	r22, r30
     aae:	a5 01       	movw	r20, r10
     ab0:	94 01       	movw	r18, r8
     ab2:	0e 94 2e 09 	call	0x125c	; 0x125c <__udivmodsi4>
    n /= base;
     ab6:	f9 01       	movw	r30, r18
     ab8:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     aba:	6a 30       	cpi	r22, 0x0A	; 10
     abc:	0c f5       	brge	.+66     	; 0xb00 <_ZN5Print11printNumberEmh+0x94>
     abe:	60 5d       	subi	r22, 0xD0	; 208
     ac0:	d8 01       	movw	r26, r16
     ac2:	6e 93       	st	-X, r22
     ac4:	8d 01       	movw	r16, r26
  } while(n);
     ac6:	23 2b       	or	r18, r19
     ac8:	24 2b       	or	r18, r20
     aca:	25 2b       	or	r18, r21
     acc:	79 f7       	brne	.-34     	; 0xaac <_ZN5Print11printNumberEmh+0x40>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	10 97       	sbiw	r26, 0x00	; 0
     ad4:	21 f0       	breq	.+8      	; 0xade <_ZN5Print11printNumberEmh+0x72>
     ad6:	bd 01       	movw	r22, r26
     ad8:	c7 01       	movw	r24, r14
     ada:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN5Print5writeEPKc.part.2>

  return write(str);
}
     ade:	a1 96       	adiw	r28, 0x21	; 33
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	bf 90       	pop	r11
     af8:	af 90       	pop	r10
     afa:	9f 90       	pop	r9
     afc:	8f 90       	pop	r8
     afe:	08 95       	ret

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     b00:	69 5c       	subi	r22, 0xC9	; 201
     b02:	de cf       	rjmp	.-68     	; 0xac0 <_ZN5Print11printNumberEmh+0x54>

00000b04 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
  if (base == 0) {
     b14:	21 15       	cp	r18, r1
     b16:	31 05       	cpc	r19, r1
     b18:	81 f4       	brne	.+32     	; 0xb3a <_ZN5Print5printEli+0x36>
    return write(n);
     b1a:	dc 01       	movw	r26, r24
     b1c:	ed 91       	ld	r30, X+
     b1e:	fc 91       	ld	r31, X
     b20:	01 90       	ld	r0, Z+
     b22:	f0 81       	ld	r31, Z
     b24:	e0 2d       	mov	r30, r0
     b26:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     b38:	09 94       	ijmp
  } else if (base == 10) {
     b3a:	2a 30       	cpi	r18, 0x0A	; 10
     b3c:	31 05       	cpc	r19, r1
     b3e:	01 f5       	brne	.+64     	; 0xb80 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     b40:	2a e0       	ldi	r18, 0x0A	; 10
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     b42:	77 ff       	sbrs	r23, 7
     b44:	1d c0       	rjmp	.+58     	; 0xb80 <_ZN5Print5printEli+0x7c>
     b46:	6a 01       	movw	r12, r20
     b48:	7b 01       	movw	r14, r22
     b4a:	ec 01       	movw	r28, r24
      int t = print('-');
     b4c:	6d e2       	ldi	r22, 0x2D	; 45
     b4e:	0e 94 14 05 	call	0xa28	; 0xa28 <_ZN5Print5printEc>
     b52:	8c 01       	movw	r16, r24
      n = -n;
     b54:	44 27       	eor	r20, r20
     b56:	55 27       	eor	r21, r21
     b58:	ba 01       	movw	r22, r20
     b5a:	4c 19       	sub	r20, r12
     b5c:	5d 09       	sbc	r21, r13
     b5e:	6e 09       	sbc	r22, r14
     b60:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
     b62:	2a e0       	ldi	r18, 0x0A	; 10
     b64:	ce 01       	movw	r24, r28
     b66:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN5Print11printNumberEmh>
     b6a:	80 0f       	add	r24, r16
     b6c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	df 90       	pop	r13
     b7c:	cf 90       	pop	r12
     b7e:	08 95       	ret
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     b90:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <_ZN5Print11printNumberEmh>

00000b94 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     b94:	9a 01       	movw	r18, r20
  return print((long) n, base);
     b96:	ab 01       	movw	r20, r22
     b98:	77 0f       	add	r23, r23
     b9a:	66 0b       	sbc	r22, r22
     b9c:	77 0b       	sbc	r23, r23
     b9e:	0c 94 82 05 	jmp	0xb04	; 0xb04 <_ZN5Print5printEli>

00000ba2 <StartOS>:
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
     ba2:	4f 92       	push	r4
     ba4:	5f 92       	push	r5
     ba6:	6f 92       	push	r6
     ba8:	7f 92       	push	r7
     baa:	8f 92       	push	r8
     bac:	9f 92       	push	r9
     bae:	af 92       	push	r10
     bb0:	bf 92       	push	r11
     bb2:	cf 92       	push	r12
     bb4:	df 92       	push	r13
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <StartOS+0x22>
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	00 91 61 01 	lds	r16, 0x0161	; 0x800161 <CDB>
     bcc:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <CDB+0x1>
     bd0:	9f b7       	in	r25, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	d8 01       	movw	r26, r16
     bd6:	18 96       	adiw	r26, 0x08	; 8
     bd8:	2d 91       	ld	r18, X+
     bda:	3c 91       	ld	r19, X
     bdc:	19 97       	sbiw	r26, 0x09	; 9
     bde:	23 2b       	or	r18, r19
     be0:	09 f0       	breq	.+2      	; 0xbe4 <StartOS+0x42>
     be2:	75 c0       	rjmp	.+234    	; 0xcce <StartOS+0x12c>
     be4:	20 ee       	ldi	r18, 0xE0	; 224
     be6:	38 e0       	ldi	r19, 0x08	; 8
     be8:	3a 83       	std	Y+2, r19	; 0x02
     bea:	29 83       	std	Y+1, r18	; 0x01
     bec:	a0 90 65 01 	lds	r10, 0x0165	; 0x800165 <CDB+0x4>
     bf0:	b0 90 66 01 	lds	r11, 0x0166	; 0x800166 <CDB+0x5>
     bf4:	21 e0       	ldi	r18, 0x01	; 1
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	19 96       	adiw	r26, 0x09	; 9
     bfa:	3c 93       	st	X, r19
     bfc:	2e 93       	st	-X, r18
     bfe:	18 97       	sbiw	r26, 0x08	; 8
     c00:	1a 96       	adiw	r26, 0x0a	; 10
     c02:	8c 93       	st	X, r24
     c04:	e0 90 67 01 	lds	r14, 0x0167	; 0x800167 <CDB+0x6>
     c08:	f0 90 68 01 	lds	r15, 0x0168	; 0x800168 <CDB+0x7>
     c0c:	38 01       	movw	r6, r16
     c0e:	b2 e0       	ldi	r27, 0x02	; 2
     c10:	6b 0e       	add	r6, r27
     c12:	71 1c       	adc	r7, r1
     c14:	d1 2c       	mov	r13, r1
     c16:	c1 2c       	mov	r12, r1
     c18:	e4 e0       	ldi	r30, 0x04	; 4
     c1a:	8e 9f       	mul	r24, r30
     c1c:	c0 01       	movw	r24, r0
     c1e:	11 24       	eor	r1, r1
     c20:	e8 0e       	add	r14, r24
     c22:	f9 1e       	adc	r15, r25
     c24:	27 01       	movw	r4, r14
     c26:	f2 e0       	ldi	r31, 0x02	; 2
     c28:	4f 0e       	add	r4, r31
     c2a:	51 1c       	adc	r5, r1
     c2c:	88 24       	eor	r8, r8
     c2e:	83 94       	inc	r8
     c30:	91 2c       	mov	r9, r1
     c32:	f2 01       	movw	r30, r4
     c34:	80 81       	ld	r24, Z
     c36:	91 81       	ldd	r25, Z+1	; 0x01
     c38:	c8 16       	cp	r12, r24
     c3a:	d9 06       	cpc	r13, r25
     c3c:	18 f1       	brcs	.+70     	; 0xc84 <StartOS+0xe2>
     c3e:	d8 01       	movw	r26, r16
     c40:	18 96       	adiw	r26, 0x08	; 8
     c42:	8d 91       	ld	r24, X+
     c44:	9c 91       	ld	r25, X
     c46:	19 97       	sbiw	r26, 0x09	; 9
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	31 f4       	brne	.+12     	; 0xc58 <StartOS+0xb6>
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	19 96       	adiw	r26, 0x09	; 9
     c52:	9c 93       	st	X, r25
     c54:	8e 93       	st	-X, r24
     c56:	18 97       	sbiw	r26, 0x08	; 8
     c58:	f8 01       	movw	r30, r16
     c5a:	80 85       	ldd	r24, Z+8	; 0x08
     c5c:	91 85       	ldd	r25, Z+9	; 0x09
     c5e:	02 97       	sbiw	r24, 0x02	; 2
     c60:	41 f4       	brne	.+16     	; 0xc72 <StartOS+0xd0>
     c62:	d5 01       	movw	r26, r10
     c64:	12 96       	adiw	r26, 0x02	; 2
     c66:	6d 91       	ld	r22, X+
     c68:	7c 91       	ld	r23, X
     c6a:	ab 01       	movw	r20, r22
     c6c:	c5 01       	movw	r24, r10
     c6e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>
     c72:	f8 01       	movw	r30, r16
     c74:	80 85       	ldd	r24, Z+8	; 0x08
     c76:	91 85       	ldd	r25, Z+9	; 0x09
     c78:	02 97       	sbiw	r24, 0x02	; 2
     c7a:	09 f4       	brne	.+2      	; 0xc7e <StartOS+0xdc>
     c7c:	78 94       	sei
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	28 c0       	rjmp	.+80     	; 0xcd4 <StartOS+0x132>
     c84:	d7 01       	movw	r26, r14
     c86:	ed 91       	ld	r30, X+
     c88:	fc 91       	ld	r31, X
     c8a:	c6 01       	movw	r24, r12
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	e8 0f       	add	r30, r24
     c92:	f9 1f       	adc	r31, r25
     c94:	40 81       	ld	r20, Z
     c96:	51 81       	ldd	r21, Z+1	; 0x01
     c98:	da 01       	movw	r26, r20
     c9a:	14 96       	adiw	r26, 0x04	; 4
     c9c:	ed 91       	ld	r30, X+
     c9e:	fc 91       	ld	r31, X
     ca0:	80 81       	ld	r24, Z
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	80 83       	st	Z, r24
     ca6:	93 82       	std	Z+3, r9	; 0x03
     ca8:	82 82       	std	Z+2, r8	; 0x02
     caa:	f8 01       	movw	r30, r16
     cac:	64 81       	ldd	r22, Z+4	; 0x04
     cae:	75 81       	ldd	r23, Z+5	; 0x05
     cb0:	db 01       	movw	r26, r22
     cb2:	8d 91       	ld	r24, X+
     cb4:	9c 91       	ld	r25, X
     cb6:	11 97       	sbiw	r26, 0x01	; 1
     cb8:	95 83       	std	Z+5, r25	; 0x05
     cba:	84 83       	std	Z+4, r24	; 0x04
     cbc:	1d 92       	st	X+, r1
     cbe:	1c 92       	st	X, r1
     cc0:	c3 01       	movw	r24, r6
     cc2:	0e 94 b6 07 	call	0xf6c	; 0xf6c <osEE_scheduler_rq_insert>
     cc6:	bf ef       	ldi	r27, 0xFF	; 255
     cc8:	cb 1a       	sub	r12, r27
     cca:	db 0a       	sbc	r13, r27
     ccc:	b2 cf       	rjmp	.-156    	; 0xc32 <StartOS+0x90>
     cce:	9f bf       	out	0x3f, r25	; 63
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	bf 90       	pop	r11
     cea:	af 90       	pop	r10
     cec:	9f 90       	pop	r9
     cee:	8f 90       	pop	r8
     cf0:	7f 90       	pop	r7
     cf2:	6f 90       	pop	r6
     cf4:	5f 90       	pop	r5
     cf6:	4f 90       	pop	r4
     cf8:	08 95       	ret

00000cfa <ActivateTask>:
     cfa:	cf 93       	push	r28
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <KDB+0x6>
     d02:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <KDB+0x7>
     d06:	82 17       	cp	r24, r18
     d08:	93 07       	cpc	r25, r19
     d0a:	e8 f4       	brcc	.+58     	; 0xd46 <ActivateTask+0x4c>
     d0c:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <KDB+0x2>
     d10:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <KDB+0x3>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	82 0f       	add	r24, r18
     d1a:	93 1f       	adc	r25, r19
     d1c:	fc 01       	movw	r30, r24
     d1e:	40 81       	ld	r20, Z
     d20:	51 81       	ldd	r21, Z+1	; 0x01
     d22:	fa 01       	movw	r30, r20
     d24:	87 81       	ldd	r24, Z+7	; 0x07
     d26:	90 85       	ldd	r25, Z+8	; 0x08
     d28:	02 97       	sbiw	r24, 0x02	; 2
     d2a:	68 f4       	brcc	.+26     	; 0xd46 <ActivateTask+0x4c>
     d2c:	cf b7       	in	r28, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	21 e0       	ldi	r18, 0x01	; 1
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	61 e6       	ldi	r22, 0x61	; 97
     d36:	71 e0       	ldi	r23, 0x01	; 1
     d38:	87 e5       	ldi	r24, 0x57	; 87
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	0e 94 e7 07 	call	0xfce	; 0xfce <osEE_scheduler_task_activated>
     d40:	cf bf       	out	0x3f, r28	; 63
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	fb cf       	rjmp	.-10     	; 0xd42 <ActivateTask+0x48>

00000d4c <TerminateTask>:
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
     d4c:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <CDB>
     d50:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <CDB+0x1>
     d54:	01 90       	ld	r0, Z+
     d56:	f0 81       	ld	r31, Z
     d58:	e0 2d       	mov	r30, r0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     d5a:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     d5c:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
     d5e:	65 eb       	ldi	r22, 0xB5	; 181
     d60:	76 e0       	ldi	r23, 0x06	; 6
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	93 81       	ldd	r25, Z+3	; 0x03
     d66:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <osEE_hal_terminate_ctx>

00000d6a <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <osEE_scheduler_task_end+0x6>
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
     d74:	ae 01       	movw	r20, r28
     d76:	4f 5f       	subi	r20, 0xFF	; 255
     d78:	5f 4f       	sbci	r21, 0xFF	; 255
     d7a:	61 e6       	ldi	r22, 0x61	; 97
     d7c:	71 e0       	ldi	r23, 0x01	; 1
     d7e:	87 e5       	ldi	r24, 0x57	; 87
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 4d 08 	call	0x109a	; 0x109a <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
     d86:	bc 01       	movw	r22, r24
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <osEE_scheduler_task_wrapper_restore>:
    p_ccb->p_lock_to_be_released = NULL;
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
     d9a:	08 95       	ret

00000d9c <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
     d9c:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
     d9e:	ec 81       	ldd	r30, Y+4	; 0x04
     da0:	fd 81       	ldd	r31, Y+5	; 0x05
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_prio < OSEE_ISR_ALL_PRIO) {
     da2:	81 81       	ldd	r24, Z+1	; 0x01
     da4:	8f 3f       	cpi	r24, 0xFF	; 255
     da6:	09 f0       	breq	.+2      	; 0xdaa <osEE_scheduler_task_wrapper_run+0xe>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
     da8:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
     daa:	e9 85       	ldd	r30, Y+9	; 0x09
     dac:	fa 85       	ldd	r31, Y+10	; 0x0a
     dae:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     db0:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     db2:	f8 94       	cli
     db4:	65 eb       	ldi	r22, 0xB5	; 181
     db6:	76 e0       	ldi	r23, 0x06	; 6
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <osEE_hal_terminate_ctx>

00000dc0 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     dc8:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     dca:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
     dcc:	61 e6       	ldi	r22, 0x61	; 97
     dce:	71 e0       	ldi	r23, 0x01	; 1
     dd0:	87 e5       	ldi	r24, 0x57	; 87
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 c5 08 	call	0x118a	; 0x118a <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
     dd8:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
     dda:	00 91 61 01 	lds	r16, 0x0161	; 0x800161 <CDB>
     dde:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <CDB+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
     de2:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <CDB+0x2>
     de6:	d0 91 64 01 	lds	r29, 0x0164	; 0x800164 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
     dea:	f8 01       	movw	r30, r16
     dec:	80 85       	ldd	r24, Z+8	; 0x08
     dee:	91 85       	ldd	r25, Z+9	; 0x09
     df0:	82 30       	cpi	r24, 0x02	; 2
     df2:	91 05       	cpc	r25, r1
     df4:	51 f0       	breq	.+20     	; 0xe0a <osEE_idle_hook_wrapper+0x4a>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
     df6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <CDB+0x4>
     dfa:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <CDB+0x5>
}
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
     e06:	0c 94 13 09 	jmp	0x1226	; 0x1226 <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
     e0a:	20 97       	sbiw	r28, 0x00	; 0
     e0c:	89 f3       	breq	.-30     	; 0xdf0 <osEE_idle_hook_wrapper+0x30>
      p_idle_hook();
     e0e:	fe 01       	movw	r30, r28
     e10:	09 95       	icall
     e12:	eb cf       	rjmp	.-42     	; 0xdea <osEE_idle_hook_wrapper+0x2a>

00000e14 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
     e1c:	ec 01       	movw	r28, r24
     e1e:	a8 81       	ld	r26, Y
     e20:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
     e22:	eb 01       	movw	r28, r22
     e24:	e8 81       	ld	r30, Y
     e26:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
     e28:	16 96       	adiw	r26, 0x06	; 6
     e2a:	cd 91       	ld	r28, X+
     e2c:	dc 91       	ld	r29, X
     e2e:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
     e30:	20 97       	sbiw	r28, 0x00	; 0
     e32:	c1 f1       	breq	.+112    	; 0xea4 <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
     e38:	30 97       	sbiw	r30, 0x00	; 0
     e3a:	09 f4       	brne	.+2      	; 0xe3e <osEE_scheduler_core_rq_preempt_stk+0x2a>
     e3c:	3f c0       	rjmp	.+126    	; 0xebc <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
     e3e:	ec 01       	movw	r28, r24
     e40:	0c 81       	ldd	r16, Y+4	; 0x04
     e42:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
     e44:	22 81       	ldd	r18, Z+2	; 0x02
     e46:	33 81       	ldd	r19, Z+3	; 0x03
     e48:	e9 01       	movw	r28, r18
     e4a:	4c 81       	ldd	r20, Y+4	; 0x04
     e4c:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
     e4e:	e8 01       	movw	r28, r16
     e50:	39 81       	ldd	r19, Y+1	; 0x01
     e52:	ea 01       	movw	r28, r20
     e54:	29 81       	ldd	r18, Y+1	; 0x01
     e56:	32 17       	cp	r19, r18
     e58:	88 f5       	brcc	.+98     	; 0xebc <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
     e5a:	22 e0       	ldi	r18, 0x02	; 2
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	e8 01       	movw	r28, r16
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
     e60:	3b 83       	std	Y+3, r19	; 0x03
     e62:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
     e64:	20 81       	ld	r18, Z
     e66:	31 81       	ldd	r19, Z+1	; 0x01
     e68:	eb 01       	movw	r28, r22
     e6a:	39 83       	std	Y+1, r19	; 0x01
     e6c:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
     e6e:	c2 81       	ldd	r28, Z+2	; 0x02
     e70:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
     e72:	2c 81       	ldd	r18, Y+4	; 0x04
     e74:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
     e76:	16 96       	adiw	r26, 0x06	; 6
     e78:	4d 91       	ld	r20, X+
     e7a:	5c 91       	ld	r21, X
     e7c:	17 97       	sbiw	r26, 0x07	; 7
     e7e:	51 83       	std	Z+1, r21	; 0x01
     e80:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
     e82:	17 96       	adiw	r26, 0x07	; 7
     e84:	fc 93       	st	X, r31
     e86:	ee 93       	st	-X, r30
     e88:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
     e8a:	cd 93       	st	X+, r28
     e8c:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
     e8e:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
     e90:	f9 01       	movw	r30, r18
     e92:	51 81       	ldd	r21, Z+1	; 0x01
     e94:	54 17       	cp	r21, r20
     e96:	08 f4       	brcc	.+2      	; 0xe9a <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
     e98:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
     ea4:	30 97       	sbiw	r30, 0x00	; 0
     ea6:	51 f0       	breq	.+20     	; 0xebc <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
     ea8:	ec 01       	movw	r28, r24
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
     eae:	ec 01       	movw	r28, r24
     eb0:	4c 81       	ldd	r20, Y+4	; 0x04
     eb2:	5d 81       	ldd	r21, Y+5	; 0x05
     eb4:	22 e0       	ldi	r18, 0x02	; 2
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	ea 01       	movw	r28, r20
     eba:	d2 cf       	rjmp	.-92     	; 0xe60 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	80 e0       	ldi	r24, 0x00	; 0
    p_ret_sn  = NULL;
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
     ec0:	ec cf       	rjmp	.-40     	; 0xe9a <osEE_scheduler_core_rq_preempt_stk+0x86>

00000ec2 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
     ed2:	eb 01       	movw	r28, r22
     ed4:	aa 81       	ldd	r26, Y+2	; 0x02
     ed6:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
     ed8:	14 96       	adiw	r26, 0x04	; 4
     eda:	ed 91       	ld	r30, X+
     edc:	fc 91       	ld	r31, X
     ede:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
     ee0:	41 15       	cp	r20, r1
     ee2:	51 05       	cpc	r21, r1
     ee4:	01 f1       	breq	.+64     	; 0xf26 <osEE_sn_priority_insert+0x64>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
     ee6:	22 81       	ldd	r18, Z+2	; 0x02
     ee8:	33 81       	ldd	r19, Z+3	; 0x03
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	31 05       	cpc	r19, r1
     eee:	d8 f0       	brcs	.+54     	; 0xf26 <osEE_sn_priority_insert+0x64>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
     ef0:	1b 96       	adiw	r26, 0x0b	; 11
     ef2:	2c 91       	ld	r18, X
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
     ef4:	dc 01       	movw	r26, r24
     ef6:	ed 91       	ld	r30, X+
     ef8:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
     efe:	30 97       	sbiw	r30, 0x00	; 0
     f00:	a1 f4       	brne	.+40     	; 0xf2a <osEE_sn_priority_insert+0x68>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
     f02:	10 97       	sbiw	r26, 0x00	; 0
     f04:	69 f1       	breq	.+90     	; 0xf60 <osEE_sn_priority_insert+0x9e>
    p_prev->p_next = p_sn_new;
     f06:	6d 93       	st	X+, r22
     f08:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
     f0e:	eb 01       	movw	r28, r22
     f10:	f9 83       	std	Y+1, r31	; 0x01
     f12:	e8 83       	st	Y, r30

  return head_changed;
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
     f26:	21 81       	ldd	r18, Z+1	; 0x01
     f28:	e5 cf       	rjmp	.-54     	; 0xef4 <osEE_sn_priority_insert+0x32>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
     f2a:	02 81       	ldd	r16, Z+2	; 0x02
     f2c:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
     f2e:	e8 01       	movw	r28, r16
     f30:	cc 80       	ldd	r12, Y+4	; 0x04
     f32:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
     f34:	41 15       	cp	r20, r1
     f36:	51 05       	cpc	r21, r1
     f38:	81 f0       	breq	.+32     	; 0xf5a <osEE_sn_priority_insert+0x98>
     f3a:	e6 01       	movw	r28, r12
     f3c:	ea 80       	ldd	r14, Y+2	; 0x02
     f3e:	fb 80       	ldd	r15, Y+3	; 0x03
     f40:	d2 e0       	ldi	r29, 0x02	; 2
     f42:	ed 16       	cp	r14, r29
     f44:	f1 04       	cpc	r15, r1
     f46:	48 f0       	brcs	.+18     	; 0xf5a <osEE_sn_priority_insert+0x98>
      prio_to_check = p_cur_tdb->ready_prio;
     f48:	e8 01       	movw	r28, r16
     f4a:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
     f4c:	32 17       	cp	r19, r18
     f4e:	c8 f2       	brcs	.-78     	; 0xf02 <osEE_sn_priority_insert+0x40>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
     f50:	df 01       	movw	r26, r30
     f52:	01 90       	ld	r0, Z+
     f54:	f0 81       	ld	r31, Z
     f56:	e0 2d       	mov	r30, r0
     f58:	d2 cf       	rjmp	.-92     	; 0xefe <osEE_sn_priority_insert+0x3c>
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
     f5a:	e6 01       	movw	r28, r12
     f5c:	39 81       	ldd	r19, Y+1	; 0x01
     f5e:	f6 cf       	rjmp	.-20     	; 0xf4c <osEE_sn_priority_insert+0x8a>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
     f60:	dc 01       	movw	r26, r24
     f62:	6d 93       	st	X+, r22
     f64:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	d1 cf       	rjmp	.-94     	; 0xf0e <osEE_sn_priority_insert+0x4c>

00000f6c <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
     f6c:	fb 01       	movw	r30, r22
     f6e:	53 83       	std	Z+3, r21	; 0x03
     f70:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	0c 94 61 07 	jmp	0xec2	; 0xec2 <osEE_sn_priority_insert>

00000f7a <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
     f88:	fc 01       	movw	r30, r24
     f8a:	c0 81       	ld	r28, Z
     f8c:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
     f8e:	ee 80       	ldd	r14, Y+6	; 0x06
     f90:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
     f92:	f7 01       	movw	r30, r14
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	9f 83       	std	Y+7, r25	; 0x07
     f9a:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
     f9c:	c8 01       	movw	r24, r16
     f9e:	0e 94 0a 07 	call	0xe14	; 0xe14 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
     fa2:	89 2b       	or	r24, r25
     fa4:	41 f4       	brne	.+16     	; 0xfb6 <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
     fa6:	ee 81       	ldd	r30, Y+6	; 0x06
     fa8:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
     faa:	30 97       	sbiw	r30, 0x00	; 0
     fac:	61 f0       	breq	.+24     	; 0xfc6 <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
     fae:	82 81       	ldd	r24, Z+2	; 0x02
     fb0:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
     fb2:	99 83       	std	Y+1, r25	; 0x01
     fb4:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
     fb6:	c7 01       	movw	r24, r14
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	ef 90       	pop	r14
     fc4:	08 95       	ret
      if ( p_curr_stk_sn != NULL ) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
     fc6:	f8 01       	movw	r30, r16
     fc8:	84 81       	ldd	r24, Z+4	; 0x04
     fca:	95 81       	ldd	r25, Z+5	; 0x05
     fcc:	f2 cf       	rjmp	.-28     	; 0xfb2 <osEE_scheduler_core_pop_running+0x38>

00000fce <osEE_scheduler_task_activated>:
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	da 01       	movw	r26, r20
     fe0:	14 96       	adiw	r26, 0x04	; 4
     fe2:	cd 90       	ld	r12, X+
     fe4:	dc 90       	ld	r13, X
     fe6:	15 97       	sbiw	r26, 0x05	; 5
     fe8:	e6 01       	movw	r28, r12
     fea:	98 81       	ld	r25, Y
     fec:	1d 96       	adiw	r26, 0x0d	; 13
     fee:	8c 91       	ld	r24, X
     ff0:	98 17       	cp	r25, r24
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <osEE_scheduler_task_activated+0x28>
     ff4:	4f c0       	rjmp	.+158    	; 0x1094 <osEE_scheduler_task_activated+0xc6>
     ff6:	db 01       	movw	r26, r22
     ff8:	ed 91       	ld	r30, X+
     ffa:	fc 91       	ld	r31, X
     ffc:	00 81       	ld	r16, Z
     ffe:	11 81       	ldd	r17, Z+1	; 0x01
    1000:	e8 01       	movw	r28, r16
    1002:	ec 80       	ldd	r14, Y+4	; 0x04
    1004:	fd 80       	ldd	r15, Y+5	; 0x05
    1006:	9f 5f       	subi	r25, 0xFF	; 255
    1008:	d6 01       	movw	r26, r12
    100a:	9c 93       	st	X, r25
    100c:	a4 81       	ldd	r26, Z+4	; 0x04
    100e:	b5 81       	ldd	r27, Z+5	; 0x05
    1010:	6d 91       	ld	r22, X+
    1012:	7c 91       	ld	r23, X
    1014:	11 97       	sbiw	r26, 0x01	; 1
    1016:	23 2b       	or	r18, r19
    1018:	49 f1       	breq	.+82     	; 0x106c <osEE_scheduler_task_activated+0x9e>
    101a:	e7 01       	movw	r28, r14
    101c:	99 81       	ldd	r25, Y+1	; 0x01
    101e:	e6 01       	movw	r28, r12
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	98 17       	cp	r25, r24
    1024:	18 f5       	brcc	.+70     	; 0x106c <osEE_scheduler_task_activated+0x9e>
    1026:	75 83       	std	Z+5, r23	; 0x05
    1028:	64 83       	std	Z+4, r22	; 0x04
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	e7 01       	movw	r28, r14
    1030:	9b 83       	std	Y+3, r25	; 0x03
    1032:	8a 83       	std	Y+2, r24	; 0x02
    1034:	13 96       	adiw	r26, 0x03	; 3
    1036:	5c 93       	st	X, r21
    1038:	4e 93       	st	-X, r20
    103a:	12 97       	sbiw	r26, 0x02	; 2
    103c:	86 81       	ldd	r24, Z+6	; 0x06
    103e:	97 81       	ldd	r25, Z+7	; 0x07
    1040:	11 96       	adiw	r26, 0x01	; 1
    1042:	9c 93       	st	X, r25
    1044:	8e 93       	st	-X, r24
    1046:	b7 83       	std	Z+7, r27	; 0x07
    1048:	a6 83       	std	Z+6, r26	; 0x06
    104a:	51 83       	std	Z+1, r21	; 0x01
    104c:	40 83       	st	Z, r20
    104e:	ba 01       	movw	r22, r20
    1050:	c8 01       	movw	r24, r16
    1052:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <osEE_change_context_from_running>
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	ff 90       	pop	r15
    1064:	ef 90       	pop	r14
    1066:	df 90       	pop	r13
    1068:	cf 90       	pop	r12
    106a:	08 95       	ret
    106c:	e6 01       	movw	r28, r12
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	89 2b       	or	r24, r25
    1074:	21 f4       	brne	.+8      	; 0x107e <osEE_scheduler_task_activated+0xb0>
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9b 83       	std	Y+3, r25	; 0x03
    107c:	8a 83       	std	Y+2, r24	; 0x02
    107e:	75 83       	std	Z+5, r23	; 0x05
    1080:	64 83       	std	Z+4, r22	; 0x04
    1082:	11 96       	adiw	r26, 0x01	; 1
    1084:	1c 92       	st	X, r1
    1086:	1e 92       	st	-X, r1
    1088:	bd 01       	movw	r22, r26
    108a:	cf 01       	movw	r24, r30
    108c:	02 96       	adiw	r24, 0x02	; 2
    108e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <osEE_scheduler_rq_insert>
    1092:	e1 cf       	rjmp	.-62     	; 0x1056 <osEE_scheduler_task_activated+0x88>
    1094:	84 e0       	ldi	r24, 0x04	; 4
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	e0 cf       	rjmp	.-64     	; 0x105a <osEE_scheduler_task_activated+0x8c>

0000109a <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    10b0:	db 01       	movw	r26, r22
    10b2:	cd 91       	ld	r28, X+
    10b4:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    10b6:	fe 01       	movw	r30, r28
    10b8:	01 91       	ld	r16, Z+
    10ba:	11 91       	ld	r17, Z+
    10bc:	7f 01       	movw	r14, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    10be:	d8 01       	movw	r26, r16
    10c0:	14 96       	adiw	r26, 0x04	; 4
    10c2:	cd 90       	ld	r12, X+
    10c4:	dc 90       	ld	r13, X

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    10c6:	fa 01       	movw	r30, r20
    10c8:	11 83       	std	Z+1, r17	; 0x01
    10ca:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    10cc:	d6 01       	movw	r26, r12
    10ce:	12 96       	adiw	r26, 0x02	; 2
    10d0:	8d 91       	ld	r24, X+
    10d2:	9c 91       	ld	r25, X
    10d4:	04 97       	sbiw	r24, 0x04	; 4
    10d6:	a9 f5       	brne	.+106    	; 0x1142 <osEE_scheduler_task_terminated+0xa8>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    10d8:	b7 01       	movw	r22, r14
    10da:	c5 01       	movw	r24, r10
    10dc:	0e 94 bd 07 	call	0xf7a	; 0xf7a <osEE_scheduler_core_pop_running>
    10e0:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    10e2:	88 81       	ld	r24, Y
    10e4:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    10e6:	08 17       	cp	r16, r24
    10e8:	19 07       	cpc	r17, r25
    10ea:	31 f1       	breq	.+76     	; 0x1138 <osEE_scheduler_task_terminated+0x9e>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    10ec:	d8 01       	movw	r26, r16
    10ee:	14 96       	adiw	r26, 0x04	; 4
    10f0:	ed 91       	ld	r30, X+
    10f2:	fc 91       	ld	r31, X
    10f4:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    10f6:	1b 96       	adiw	r26, 0x0b	; 11
    10f8:	2c 91       	ld	r18, X
    10fa:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    10fc:	20 81       	ld	r18, Z
    10fe:	21 50       	subi	r18, 0x01	; 1
    1100:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    1102:	21 11       	cpse	r18, r1
    1104:	14 c0       	rjmp	.+40     	; 0x112e <osEE_scheduler_task_terminated+0x94>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    1106:	13 82       	std	Z+3, r1	; 0x03
    1108:	12 82       	std	Z+2, r1	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    110a:	2c 81       	ldd	r18, Y+4	; 0x04
    110c:	3d 81       	ldd	r19, Y+5	; 0x05
    110e:	da 01       	movw	r26, r20
    1110:	2d 93       	st	X+, r18
    1112:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    1114:	5d 83       	std	Y+5, r21	; 0x05
    1116:	4c 83       	std	Y+4, r20	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	bf 90       	pop	r11
    112a:	af 90       	pop	r10
    112c:	08 95       	ret
  } else {
    p_tcb->status = OSEE_TASK_READY;
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	33 83       	std	Z+3, r19	; 0x03
    1134:	22 83       	std	Z+2, r18	; 0x02
    1136:	e9 cf       	rjmp	.-46     	; 0x110a <osEE_scheduler_task_terminated+0x70>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    1138:	f6 01       	movw	r30, r12
    113a:	20 81       	ld	r18, Z
    113c:	21 50       	subi	r18, 0x01	; 1
    113e:	20 83       	st	Z, r18
    1140:	e4 cf       	rjmp	.-56     	; 0x110a <osEE_scheduler_task_terminated+0x70>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    1142:	6e 81       	ldd	r22, Y+6	; 0x06
    1144:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    1146:	fb 01       	movw	r30, r22
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	9f 83       	std	Y+7, r25	; 0x07
    114e:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    1150:	d8 01       	movw	r26, r16
    1152:	1b 96       	adiw	r26, 0x0b	; 11
    1154:	8c 91       	ld	r24, X
    1156:	f6 01       	movw	r30, r12
    1158:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	93 83       	std	Z+3, r25	; 0x03
    1160:	82 83       	std	Z+2, r24	; 0x02
      if (p_tcb_term->current_num_of_act == 1U) {
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    1162:	a8 01       	movw	r20, r16
    1164:	c7 01       	movw	r24, r14
    1166:	0e 94 b6 07 	call	0xf6c	; 0xf6c <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    116a:	b7 01       	movw	r22, r14
    116c:	c5 01       	movw	r24, r10
    116e:	0e 94 0a 07 	call	0xe14	; 0xe14 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    1172:	89 2b       	or	r24, r25
    1174:	39 f4       	brne	.+14     	; 0x1184 <osEE_scheduler_task_terminated+0xea>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    1176:	ee 81       	ldd	r30, Y+6	; 0x06
    1178:	ff 81       	ldd	r31, Y+7	; 0x07
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    117e:	99 83       	std	Y+1, r25	; 0x01
    1180:	88 83       	st	Y, r24
    1182:	ca cf       	rjmp	.-108    	; 0x1118 <osEE_scheduler_task_terminated+0x7e>
        } else {
          p_tdb_to = p_ccb->p_curr;
    1184:	88 81       	ld	r24, Y
    1186:	99 81       	ldd	r25, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    1188:	c7 cf       	rjmp	.-114    	; 0x1118 <osEE_scheduler_task_terminated+0x7e>

0000118a <osEE_scheduler_task_preemption_point>:
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb
)
{
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cb 01       	movw	r24, r22
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1190:	fb 01       	movw	r30, r22
    1192:	c0 81       	ld	r28, Z
    1194:	d1 81       	ldd	r29, Z+1	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    1196:	be 01       	movw	r22, r28
    1198:	6e 5f       	subi	r22, 0xFE	; 254
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	0e 94 0a 07 	call	0xe14	; 0xe14 <osEE_scheduler_core_rq_preempt_stk>

  if (p_prev != NULL) {
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	49 f0       	breq	.+18     	; 0x11b6 <osEE_scheduler_task_preemption_point+0x2c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_prev, p_curr);
    11a4:	68 81       	ld	r22, Y
    11a6:	79 81       	ldd	r23, Y+1	; 0x01
    11a8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
  }
  return is_preemption;
}
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret
    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	80 e0       	ldi	r24, 0x00	; 0
  }
  return is_preemption;
    11ba:	fa cf       	rjmp	.-12     	; 0x11b0 <osEE_scheduler_task_preemption_point+0x26>

000011bc <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    11bc:	f8 94       	cli
    11be:	ff cf       	rjmp	.-2      	; 0x11be <__vector_default+0x2>

000011c0 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    11c0:	ec eb       	ldi	r30, 0xBC	; 188
}
    11c2:	08 95       	ret

000011c4 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    11c4:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    11c6:	a4 81       	ldd	r26, Z+4	; 0x04
    11c8:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    11ca:	12 96       	adiw	r26, 0x02	; 2
    11cc:	2d 91       	ld	r18, X+
    11ce:	3c 91       	ld	r19, X
    11d0:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    11d2:	44 e0       	ldi	r20, 0x04	; 4
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	13 96       	adiw	r26, 0x03	; 3
    11d8:	5c 93       	st	X, r21
    11da:	4e 93       	st	-X, r20
    11dc:	12 97       	sbiw	r26, 0x02	; 2
    11de:	dc 01       	movw	r26, r24
    11e0:	12 96       	adiw	r26, 0x02	; 2
    11e2:	4d 91       	ld	r20, X+
    11e4:	5c 91       	ld	r21, X
    11e6:	62 81       	ldd	r22, Z+2	; 0x02
    11e8:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    11ea:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    11ec:	22 30       	cpi	r18, 0x02	; 2
    11ee:	31 05       	cpc	r19, r1
    11f0:	11 f4       	brne	.+4      	; 0x11f6 <osEE_change_context_from_running+0x32>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    11f2:	0c 94 88 00 	jmp	0x110	; 0x110 <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    11f6:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>

000011fa <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    11fa:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    11fc:	db 01       	movw	r26, r22
    11fe:	14 96       	adiw	r26, 0x04	; 4
    1200:	ed 91       	ld	r30, X+
    1202:	fc 91       	ld	r31, X
    1204:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    1206:	22 81       	ldd	r18, Z+2	; 0x02
    1208:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    120a:	44 e0       	ldi	r20, 0x04	; 4
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	53 83       	std	Z+3, r21	; 0x03
    1210:	42 83       	std	Z+2, r20	; 0x02
    1212:	12 96       	adiw	r26, 0x02	; 2
    1214:	6d 91       	ld	r22, X+
    1216:	7c 91       	ld	r23, X

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	11 f4       	brne	.+4      	; 0x1222 <osEE_change_context_from_task_end+0x28>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    121e:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    1222:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

00001226 <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    1226:	dc 01       	movw	r26, r24
    1228:	12 96       	adiw	r26, 0x02	; 2
    122a:	6d 91       	ld	r22, X+
    122c:	7c 91       	ld	r23, X
    122e:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    1230:	ed 91       	ld	r30, X+
    1232:	fc 91       	ld	r31, X
    1234:	40 81       	ld	r20, Z
    1236:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    1238:	db 01       	movw	r26, r22
    123a:	ed 91       	ld	r30, X+
    123c:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    123e:	22 89       	ldd	r18, Z+18	; 0x12
    1240:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    1242:	21 15       	cp	r18, r1
    1244:	31 05       	cpc	r19, r1
    1246:	19 f0       	breq	.+6      	; 0x124e <osEE_idle_task_terminate+0x28>
    1248:	42 17       	cp	r20, r18
    124a:	53 07       	cpc	r21, r19
    124c:	29 f4       	brne	.+10     	; 0x1258 <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    124e:	db 01       	movw	r26, r22
    1250:	ed 93       	st	X+, r30
    1252:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    1254:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
    1258:	f9 01       	movw	r30, r18
    125a:	f1 cf       	rjmp	.-30     	; 0x123e <osEE_idle_task_terminate+0x18>

0000125c <__udivmodsi4>:
    125c:	a1 e2       	ldi	r26, 0x21	; 33
    125e:	1a 2e       	mov	r1, r26
    1260:	aa 1b       	sub	r26, r26
    1262:	bb 1b       	sub	r27, r27
    1264:	fd 01       	movw	r30, r26
    1266:	0d c0       	rjmp	.+26     	; 0x1282 <__udivmodsi4_ep>

00001268 <__udivmodsi4_loop>:
    1268:	aa 1f       	adc	r26, r26
    126a:	bb 1f       	adc	r27, r27
    126c:	ee 1f       	adc	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	a2 17       	cp	r26, r18
    1272:	b3 07       	cpc	r27, r19
    1274:	e4 07       	cpc	r30, r20
    1276:	f5 07       	cpc	r31, r21
    1278:	20 f0       	brcs	.+8      	; 0x1282 <__udivmodsi4_ep>
    127a:	a2 1b       	sub	r26, r18
    127c:	b3 0b       	sbc	r27, r19
    127e:	e4 0b       	sbc	r30, r20
    1280:	f5 0b       	sbc	r31, r21

00001282 <__udivmodsi4_ep>:
    1282:	66 1f       	adc	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	88 1f       	adc	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	1a 94       	dec	r1
    128c:	69 f7       	brne	.-38     	; 0x1268 <__udivmodsi4_loop>
    128e:	60 95       	com	r22
    1290:	70 95       	com	r23
    1292:	80 95       	com	r24
    1294:	90 95       	com	r25
    1296:	9b 01       	movw	r18, r22
    1298:	ac 01       	movw	r20, r24
    129a:	bd 01       	movw	r22, r26
    129c:	cf 01       	movw	r24, r30
    129e:	08 95       	ret

000012a0 <__tablejump2__>:
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	05 90       	lpm	r0, Z+
    12a6:	f4 91       	lpm	r31, Z
    12a8:	e0 2d       	mov	r30, r0
    12aa:	09 94       	ijmp

000012ac <_exit>:
    12ac:	f8 94       	cli

000012ae <__stop_program>:
    12ae:	ff cf       	rjmp	.-2      	; 0x12ae <__stop_program>
