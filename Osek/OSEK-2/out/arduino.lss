
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  000017bc  00001850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017bc  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bd  0080021c  0080021c  0000196c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005e0  00000000  00000000  000019c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013425  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003207  00000000  00000000  000153c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003cf3  00000000  00000000  000185cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000db0  00000000  00000000  0001c2c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003deb  00000000  00000000  0001d070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b52  00000000  00000000  00020e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e8  00000000  00000000  000269ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__vector_1>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_11>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 c0 04 	jmp	0x980	; 0x980 <__vector_18>
      4c:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__vector_19>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	22 05       	cpc	r18, r2

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	12 e0       	ldi	r17, 0x02	; 2
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ec eb       	ldi	r30, 0xBC	; 188
      ce:	f7 e1       	ldi	r31, 0x17	; 23
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 31       	cpi	r26, 0x1C	; 28
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	22 e0       	ldi	r18, 0x02	; 2
      de:	ac e1       	ldi	r26, 0x1C	; 28
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a9 3d       	cpi	r26, 0xD9	; 217
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	cd e5       	ldi	r28, 0x5D	; 93
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	21 97       	sbiw	r28, 0x01	; 1
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__tablejump2__>
      fc:	cc 35       	cpi	r28, 0x5C	; 92
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
     106:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_default>
	...

00000110 <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     110:	2f 92       	push	r2
     112:	3f 92       	push	r3
     114:	4f 92       	push	r4
     116:	5f 92       	push	r5
     118:	6f 92       	push	r6
     11a:	7f 92       	push	r7
     11c:	8f 92       	push	r8
     11e:	9f 92       	push	r9
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	e4 2f       	mov	r30, r20
     136:	f5 2f       	mov	r31, r21
     138:	41 90       	ld	r4, Z+
     13a:	50 80       	ld	r5, Z
     13c:	4f 92       	push	r4
     13e:	5f 92       	push	r5
     140:	e4 2f       	mov	r30, r20
     142:	f5 2f       	mov	r31, r21
     144:	4d b6       	in	r4, 0x3d	; 61
     146:	5e b6       	in	r5, 0x3e	; 62
     148:	41 92       	st	Z+, r4
     14a:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     14c:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>

00000150 <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     150:	e6 2f       	mov	r30, r22
     152:	f7 2f       	mov	r31, r23
     154:	41 90       	ld	r4, Z+
     156:	50 80       	ld	r5, Z
     158:	4d be       	out	0x3d, r4	; 61
     15a:	5e be       	out	0x3e, r5	; 62
     15c:	5f 90       	pop	r5
     15e:	4f 90       	pop	r4
     160:	e6 2f       	mov	r30, r22
     162:	f7 2f       	mov	r31, r23
     164:	41 92       	st	Z+, r4
     166:	50 82       	st	Z, r5
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	bf 90       	pop	r11
     17a:	af 90       	pop	r10
     17c:	9f 90       	pop	r9
     17e:	8f 90       	pop	r8
     180:	7f 90       	pop	r7
     182:	6f 90       	pop	r6
     184:	5f 90       	pop	r5
     186:	4f 90       	pop	r4
     188:	3f 90       	pop	r3
     18a:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     18c:	0c 94 76 07 	jmp	0xeec	; 0xeec <osEE_scheduler_task_wrapper_restore>

00000190 <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     190:	e6 2f       	mov	r30, r22
    mov r31, r23
     192:	f7 2f       	mov	r31, r23
    ld  r20, z+
     194:	41 91       	ld	r20, Z+
    ld  r21, z
     196:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     198:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     19a:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     19c:	0c 94 77 07 	jmp	0xeee	; 0xeee <osEE_scheduler_task_wrapper_run>

000001a0 <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     1a0:	2f 92       	push	r2
     1a2:	3f 92       	push	r3
     1a4:	4f 92       	push	r4
     1a6:	5f 92       	push	r5
     1a8:	6f 92       	push	r6
     1aa:	7f 92       	push	r7
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	e4 2f       	mov	r30, r20
     1c6:	f5 2f       	mov	r31, r21
     1c8:	41 90       	ld	r4, Z+
     1ca:	50 80       	ld	r5, Z
     1cc:	4f 92       	push	r4
     1ce:	5f 92       	push	r5
     1d0:	e4 2f       	mov	r30, r20
     1d2:	f5 2f       	mov	r31, r21
     1d4:	4d b6       	in	r4, 0x3d	; 61
     1d6:	5e b6       	in	r5, 0x3e	; 62
     1d8:	41 92       	st	Z+, r4
     1da:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     1dc:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

000001e0 <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     1e0:	e8 2f       	mov	r30, r24
    mov r31, r25
     1e2:	f9 2f       	mov	r31, r25
    ld  r20, z+
     1e4:	41 91       	ld	r20, Z+
    ld  r21, z
     1e6:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     1e8:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     1ea:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     1ec:	e6 2f       	mov	r30, r22
    mov r31, r23
     1ee:	f7 2f       	mov	r31, r23

    ijmp
     1f0:	09 94       	ijmp
	...

000001f4 <idle_hook>:
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <idle_hook+0xa>
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	8d b7       	in	r24, 0x3d	; 61
     204:	9e b7       	in	r25, 0x3e	; 62
     206:	9a 83       	std	Y+2, r25	; 0x02
     208:	89 83       	std	Y+1, r24	; 0x01
     20a:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__data_end>
     20e:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <__data_end+0x1>
     212:	89 2b       	or	r24, r25
     214:	a9 f4       	brne	.+42     	; 0x240 <idle_hook+0x4c>
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	9a 81       	ldd	r25, Y+2	; 0x02
     21a:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <__data_end+0x1>
     21e:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <__data_end>
     222:	f8 94       	cli
     224:	81 ec       	ldi	r24, 0xC1	; 193
     226:	93 e0       	ldi	r25, 0x03	; 3
     228:	89 2b       	or	r24, r25
     22a:	11 f0       	breq	.+4      	; 0x230 <idle_hook+0x3c>
     22c:	0e 94 c1 03 	call	0x782	; 0x782 <_Z14serialEventRunv>
     230:	78 94       	sei
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	08 95       	ret
     240:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <__data_end>
     244:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <__data_end+0x1>
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	9a 81       	ldd	r25, Y+2	; 0x02
     24c:	28 17       	cp	r18, r24
     24e:	39 07       	cpc	r19, r25
     250:	41 f3       	breq	.-48     	; 0x222 <idle_hook+0x2e>
     252:	f8 94       	cli
     254:	86 e3       	ldi	r24, 0x36	; 54
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <serial_print>
     25c:	01 ec       	ldi	r16, 0xC1	; 193
     25e:	13 e0       	ldi	r17, 0x03	; 3
     260:	01 15       	cp	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	e9 f3       	breq	.-6      	; 0x260 <idle_hook+0x6c>
     266:	0e 94 c1 03 	call	0x782	; 0x782 <_Z14serialEventRunv>
     26a:	fa cf       	rjmp	.-12     	; 0x260 <idle_hook+0x6c>

0000026c <setup>:
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	84 e0       	ldi	r24, 0x04	; 4
     270:	0e 94 1a 03 	call	0x634	; 0x634 <pinMode>
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	0e 94 56 03 	call	0x6ac	; 0x6ac <digitalWrite>
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	85 e0       	ldi	r24, 0x05	; 5
     280:	0e 94 1a 03 	call	0x634	; 0x634 <pinMode>
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	86 e0       	ldi	r24, 0x06	; 6
     288:	0e 94 56 03 	call	0x6ac	; 0x6ac <digitalWrite>
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	86 e0       	ldi	r24, 0x06	; 6
     290:	0e 94 1a 03 	call	0x634	; 0x634 <pinMode>
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	87 e0       	ldi	r24, 0x07	; 7
     298:	0e 94 56 03 	call	0x6ac	; 0x6ac <digitalWrite>
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	87 e0       	ldi	r24, 0x07	; 7
     2a0:	0e 94 1a 03 	call	0x634	; 0x634 <pinMode>
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	87 e0       	ldi	r24, 0x07	; 7
     2a8:	0e 94 56 03 	call	0x6ac	; 0x6ac <digitalWrite>
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	83 e0       	ldi	r24, 0x03	; 3
     2b0:	0e 94 1a 03 	call	0x634	; 0x634 <pinMode>
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	83 e0       	ldi	r24, 0x03	; 3
     2b8:	0e 94 56 03 	call	0x6ac	; 0x6ac <digitalWrite>
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	0e 94 1a 03 	call	0x634	; 0x634 <pinMode>
     2c4:	e9 e6       	ldi	r30, 0x69	; 105
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	82 60       	ori	r24, 0x02	; 2
     2cc:	80 83       	st	Z, r24
     2ce:	e8 9a       	sbi	0x1d, 0	; 29
     2d0:	26 e0       	ldi	r18, 0x06	; 6
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	52 ec       	ldi	r21, 0xC2	; 194
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	8f e2       	ldi	r24, 0x2F	; 47
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <_ZN14HardwareSerial5beginEmh>

000002e2 <main>:
     2e2:	0e 94 b6 02 	call	0x56c	; 0x56c <init>
     2e6:	0e 94 36 01 	call	0x26c	; 0x26c <setup>
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0e 94 4c 06 	call	0xc98	; 0xc98 <StartOS>
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	08 95       	ret

000002f6 <serial_print>:
     2f6:	f8 94       	cli
     2f8:	fc 01       	movw	r30, r24
     2fa:	01 90       	ld	r0, Z+
     2fc:	00 20       	and	r0, r0
     2fe:	e9 f7       	brne	.-6      	; 0x2fa <serial_print+0x4>
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	af 01       	movw	r20, r30
     304:	48 1b       	sub	r20, r24
     306:	59 0b       	sbc	r21, r25
     308:	bc 01       	movw	r22, r24
     30a:	8f e2       	ldi	r24, 0x2F	; 47
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Print5writeEPKhj>
     312:	78 94       	sei
     314:	08 95       	ret

00000316 <task1_alarm_callback>:
     316:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <alarm1_cnt>
     31a:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <alarm1_cnt+0x1>
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <alarm1_cnt+0x1>
     324:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <alarm1_cnt>
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <ActivateTask>

0000032e <ButtonISR>:
     32e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <button_cnt>
     332:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <button_cnt+0x1>
     336:	01 96       	adiw	r24, 0x01	; 1
     338:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <button_cnt+0x1>
     33c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <button_cnt>
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <ActivateTask>

00000346 <long_operation>:
     346:	cf 93       	push	r28
     348:	c8 2f       	mov	r28, r24
     34a:	f8 94       	cli
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	0e 94 56 03 	call	0x6ac	; 0x6ac <digitalWrite>
     352:	78 94       	sei
     354:	64 ef       	ldi	r22, 0xF4	; 244
     356:	71 e0       	ldi	r23, 0x01	; 1
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delay>
     360:	f8 94       	cli
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	8c 2f       	mov	r24, r28
     366:	0e 94 56 03 	call	0x6ac	; 0x6ac <digitalWrite>
     36a:	78 94       	sei
     36c:	64 ef       	ldi	r22, 0xF4	; 244
     36e:	71 e0       	ldi	r23, 0x01	; 1
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	cf 91       	pop	r28
     376:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <delay>

0000037a <FuncTask1>:
     37a:	84 e0       	ldi	r24, 0x04	; 4
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 a3 01 	call	0x346	; 0x346 <long_operation>
     382:	85 e0       	ldi	r24, 0x05	; 5
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 a3 01 	call	0x346	; 0x346 <long_operation>
     38a:	86 e0       	ldi	r24, 0x06	; 6
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 a3 01 	call	0x346	; 0x346 <long_operation>
     392:	87 e0       	ldi	r24, 0x07	; 7
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 a3 01 	call	0x346	; 0x346 <long_operation>
     39a:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <TerminateTask>

0000039e <FuncTask2>:
     39e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <task2_cnt>
     3a2:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <task2_cnt+0x1>
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <task2_cnt+0x1>
     3ac:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <task2_cnt>
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 a3 01 	call	0x346	; 0x346 <long_operation>
     3b8:	6d ee       	ldi	r22, 0xED	; 237
     3ba:	71 e0       	ldi	r23, 0x01	; 1
     3bc:	8f e2       	ldi	r24, 0x2F	; 47
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZN5Print5printEPKc>
     3c4:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <alarm1_cnt>
     3c8:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <alarm1_cnt+0x1>
     3cc:	4a e0       	ldi	r20, 0x0A	; 10
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	8f e2       	ldi	r24, 0x2F	; 47
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	0e 94 32 06 	call	0xc64	; 0xc64 <_ZN5Print5printEii>
     3d8:	66 ef       	ldi	r22, 0xF6	; 246
     3da:	71 e0       	ldi	r23, 0x01	; 1
     3dc:	8f e2       	ldi	r24, 0x2F	; 47
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZN5Print5printEPKc>
     3e4:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <button_cnt>
     3e8:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <button_cnt+0x1>
     3ec:	4a e0       	ldi	r20, 0x0A	; 10
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	8f e2       	ldi	r24, 0x2F	; 47
     3f2:	92 e0       	ldi	r25, 0x02	; 2
     3f4:	0e 94 32 06 	call	0xc64	; 0xc64 <_ZN5Print5printEii>
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	72 e0       	ldi	r23, 0x02	; 2
     3fc:	8f e2       	ldi	r24, 0x2F	; 47
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZN5Print5printEPKc>
     404:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <task2_cnt>
     408:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <task2_cnt+0x1>
     40c:	4a e0       	ldi	r20, 0x0A	; 10
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	8f e2       	ldi	r24, 0x2F	; 47
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN5Print7printlnEii>
     418:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <TerminateTask>

0000041c <__vector_16>:
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
     41c:	1f 92       	push	r1
     41e:	0f 92       	push	r0
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	0f 92       	push	r0
     424:	11 24       	eor	r1, r1
     426:	2f 93       	push	r18
     428:	3f 93       	push	r19
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	af 93       	push	r26
     430:	bf 93       	push	r27
     432:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <timer0_millis>
     436:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <timer0_millis+0x1>
     43a:	a0 91 29 02 	lds	r26, 0x0229	; 0x800229 <timer0_millis+0x2>
     43e:	b0 91 2a 02 	lds	r27, 0x022A	; 0x80022a <timer0_millis+0x3>
     442:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <timer0_fract>
     446:	23 e0       	ldi	r18, 0x03	; 3
     448:	23 0f       	add	r18, r19
     44a:	2d 37       	cpi	r18, 0x7D	; 125
     44c:	58 f5       	brcc	.+86     	; 0x4a4 <__vector_16+0x88>
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	a1 1d       	adc	r26, r1
     452:	b1 1d       	adc	r27, r1
     454:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <timer0_fract>
     458:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <timer0_millis>
     45c:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <timer0_millis+0x1>
     460:	a0 93 29 02 	sts	0x0229, r26	; 0x800229 <timer0_millis+0x2>
     464:	b0 93 2a 02 	sts	0x022A, r27	; 0x80022a <timer0_millis+0x3>
     468:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <timer0_overflow_count>
     46c:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <timer0_overflow_count+0x1>
     470:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <timer0_overflow_count+0x2>
     474:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <timer0_overflow_count+0x3>
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	a1 1d       	adc	r26, r1
     47c:	b1 1d       	adc	r27, r1
     47e:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <timer0_overflow_count>
     482:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <timer0_overflow_count+0x1>
     486:	a0 93 2d 02 	sts	0x022D, r26	; 0x80022d <timer0_overflow_count+0x2>
     48a:	b0 93 2e 02 	sts	0x022E, r27	; 0x80022e <timer0_overflow_count+0x3>
     48e:	bf 91       	pop	r27
     490:	af 91       	pop	r26
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	3f 91       	pop	r19
     498:	2f 91       	pop	r18
     49a:	0f 90       	pop	r0
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	0f 90       	pop	r0
     4a0:	1f 90       	pop	r1
     4a2:	18 95       	reti
     4a4:	26 e8       	ldi	r18, 0x86	; 134
     4a6:	23 0f       	add	r18, r19
     4a8:	02 96       	adiw	r24, 0x02	; 2
     4aa:	a1 1d       	adc	r26, r1
     4ac:	b1 1d       	adc	r27, r1
     4ae:	d2 cf       	rjmp	.-92     	; 0x454 <__vector_16+0x38>

000004b0 <micros>:
     4b0:	3f b7       	in	r19, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <timer0_overflow_count>
     4b8:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <timer0_overflow_count+0x1>
     4bc:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <timer0_overflow_count+0x2>
     4c0:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <timer0_overflow_count+0x3>
     4c4:	26 b5       	in	r18, 0x26	; 38
     4c6:	a8 9b       	sbis	0x15, 0	; 21
     4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <micros+0x24>
     4ca:	2f 3f       	cpi	r18, 0xFF	; 255
     4cc:	19 f0       	breq	.+6      	; 0x4d4 <micros+0x24>
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	a1 1d       	adc	r26, r1
     4d2:	b1 1d       	adc	r27, r1
     4d4:	3f bf       	out	0x3f, r19	; 63
     4d6:	ba 2f       	mov	r27, r26
     4d8:	a9 2f       	mov	r26, r25
     4da:	98 2f       	mov	r25, r24
     4dc:	88 27       	eor	r24, r24
     4de:	bc 01       	movw	r22, r24
     4e0:	cd 01       	movw	r24, r26
     4e2:	62 0f       	add	r22, r18
     4e4:	71 1d       	adc	r23, r1
     4e6:	81 1d       	adc	r24, r1
     4e8:	91 1d       	adc	r25, r1
     4ea:	42 e0       	ldi	r20, 0x02	; 2
     4ec:	66 0f       	add	r22, r22
     4ee:	77 1f       	adc	r23, r23
     4f0:	88 1f       	adc	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	4a 95       	dec	r20
     4f6:	d1 f7       	brne	.-12     	; 0x4ec <micros+0x3c>
     4f8:	08 95       	ret

000004fa <delay>:
     4fa:	8f 92       	push	r8
     4fc:	9f 92       	push	r9
     4fe:	af 92       	push	r10
     500:	bf 92       	push	r11
     502:	cf 92       	push	r12
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	6b 01       	movw	r12, r22
     50c:	7c 01       	movw	r14, r24
     50e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <micros>
     512:	4b 01       	movw	r8, r22
     514:	5c 01       	movw	r10, r24
     516:	c1 14       	cp	r12, r1
     518:	d1 04       	cpc	r13, r1
     51a:	e1 04       	cpc	r14, r1
     51c:	f1 04       	cpc	r15, r1
     51e:	e9 f0       	breq	.+58     	; 0x55a <delay+0x60>
     520:	0e 94 4b 06 	call	0xc96	; 0xc96 <yield>
     524:	0e 94 58 02 	call	0x4b0	; 0x4b0 <micros>
     528:	68 19       	sub	r22, r8
     52a:	79 09       	sbc	r23, r9
     52c:	8a 09       	sbc	r24, r10
     52e:	9b 09       	sbc	r25, r11
     530:	68 3e       	cpi	r22, 0xE8	; 232
     532:	73 40       	sbci	r23, 0x03	; 3
     534:	81 05       	cpc	r24, r1
     536:	91 05       	cpc	r25, r1
     538:	70 f3       	brcs	.-36     	; 0x516 <delay+0x1c>
     53a:	21 e0       	ldi	r18, 0x01	; 1
     53c:	c2 1a       	sub	r12, r18
     53e:	d1 08       	sbc	r13, r1
     540:	e1 08       	sbc	r14, r1
     542:	f1 08       	sbc	r15, r1
     544:	88 ee       	ldi	r24, 0xE8	; 232
     546:	88 0e       	add	r8, r24
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	98 1e       	adc	r9, r24
     54c:	a1 1c       	adc	r10, r1
     54e:	b1 1c       	adc	r11, r1
     550:	c1 14       	cp	r12, r1
     552:	d1 04       	cpc	r13, r1
     554:	e1 04       	cpc	r14, r1
     556:	f1 04       	cpc	r15, r1
     558:	29 f7       	brne	.-54     	; 0x524 <delay+0x2a>
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	08 95       	ret

0000056c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     56c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     56e:	84 b5       	in	r24, 0x24	; 36
     570:	82 60       	ori	r24, 0x02	; 2
     572:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     574:	84 b5       	in	r24, 0x24	; 36
     576:	81 60       	ori	r24, 0x01	; 1
     578:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     57a:	85 b5       	in	r24, 0x25	; 37
     57c:	82 60       	ori	r24, 0x02	; 2
     57e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     580:	85 b5       	in	r24, 0x25	; 37
     582:	81 60       	ori	r24, 0x01	; 1
     584:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     586:	ee e6       	ldi	r30, 0x6E	; 110
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	81 60       	ori	r24, 0x01	; 1
     58e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     590:	e1 e8       	ldi	r30, 0x81	; 129
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     596:	80 81       	ld	r24, Z
     598:	82 60       	ori	r24, 0x02	; 2
     59a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     59c:	80 81       	ld	r24, Z
     59e:	81 60       	ori	r24, 0x01	; 1
     5a0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     5a2:	e0 e8       	ldi	r30, 0x80	; 128
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 81       	ld	r24, Z
     5a8:	81 60       	ori	r24, 0x01	; 1
     5aa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     5ac:	e1 eb       	ldi	r30, 0xB1	; 177
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	84 60       	ori	r24, 0x04	; 4
     5b4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     5b6:	e0 eb       	ldi	r30, 0xB0	; 176
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	81 60       	ori	r24, 0x01	; 1
     5be:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     5c0:	ea e7       	ldi	r30, 0x7A	; 122
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	84 60       	ori	r24, 0x04	; 4
     5c8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     5ca:	80 81       	ld	r24, Z
     5cc:	82 60       	ori	r24, 0x02	; 2
     5ce:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     5d0:	80 81       	ld	r24, Z
     5d2:	81 60       	ori	r24, 0x01	; 1
     5d4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     5d6:	80 81       	ld	r24, Z
     5d8:	80 68       	ori	r24, 0x80	; 128
     5da:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     5dc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
#endif
}
     5e0:	08 95       	ret

000005e2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	81 f0       	breq	.+32     	; 0x606 <turnOffPWM+0x24>
     5e6:	28 f4       	brcc	.+10     	; 0x5f2 <turnOffPWM+0x10>
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	99 f0       	breq	.+38     	; 0x612 <turnOffPWM+0x30>
     5ec:	82 30       	cpi	r24, 0x02	; 2
     5ee:	a9 f0       	breq	.+42     	; 0x61a <turnOffPWM+0x38>
     5f0:	08 95       	ret
     5f2:	87 30       	cpi	r24, 0x07	; 7
     5f4:	a9 f0       	breq	.+42     	; 0x620 <turnOffPWM+0x3e>
     5f6:	88 30       	cpi	r24, 0x08	; 8
     5f8:	c9 f0       	breq	.+50     	; 0x62c <turnOffPWM+0x4a>
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	b1 f4       	brne	.+44     	; 0x62a <turnOffPWM+0x48>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     5fe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     602:	8f 7d       	andi	r24, 0xDF	; 223
     604:	03 c0       	rjmp	.+6      	; 0x60c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     606:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     60a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     60c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     610:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     612:	84 b5       	in	r24, 0x24	; 36
     614:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     616:	84 bd       	out	0x24, r24	; 36
     618:	08 95       	ret
     61a:	84 b5       	in	r24, 0x24	; 36
     61c:	8f 7d       	andi	r24, 0xDF	; 223
     61e:	fb cf       	rjmp	.-10     	; 0x616 <turnOffPWM+0x34>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     620:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     624:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     626:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
     62a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     62c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     630:	8f 7d       	andi	r24, 0xDF	; 223
     632:	f9 cf       	rjmp	.-14     	; 0x626 <turnOffPWM+0x44>

00000634 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	fc 01       	movw	r30, r24
     63c:	e4 58       	subi	r30, 0x84	; 132
     63e:	ff 4f       	sbci	r31, 0xFF	; 255
     640:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     642:	80 57       	subi	r24, 0x70	; 112
     644:	9f 4f       	sbci	r25, 0xFF	; 255
     646:	fc 01       	movw	r30, r24
     648:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     64a:	88 23       	and	r24, r24
     64c:	c9 f0       	breq	.+50     	; 0x680 <pinMode+0x4c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	fc 01       	movw	r30, r24
     656:	e2 55       	subi	r30, 0x52	; 82
     658:	ff 4f       	sbci	r31, 0xFF	; 255
     65a:	a5 91       	lpm	r26, Z+
     65c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     65e:	fc 01       	movw	r30, r24
     660:	ec 55       	subi	r30, 0x5C	; 92
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	c5 91       	lpm	r28, Z+
     666:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     668:	61 11       	cpse	r22, r1
     66a:	0d c0       	rjmp	.+26     	; 0x686 <pinMode+0x52>
		uint8_t oldSREG = SREG;
     66c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     66e:	f8 94       	cli
		*reg &= ~bit;
     670:	8c 91       	ld	r24, X
     672:	20 95       	com	r18
     674:	82 23       	and	r24, r18
     676:	8c 93       	st	X, r24
		*out &= ~bit;
     678:	88 81       	ld	r24, Y
     67a:	28 23       	and	r18, r24
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out |= bit;
     67c:	28 83       	st	Y, r18
		SREG = oldSREG;
     67e:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     686:	62 30       	cpi	r22, 0x02	; 2
     688:	51 f4       	brne	.+20     	; 0x69e <pinMode+0x6a>
		uint8_t oldSREG = SREG;
     68a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     68c:	f8 94       	cli
		*reg &= ~bit;
     68e:	3c 91       	ld	r19, X
     690:	82 2f       	mov	r24, r18
     692:	80 95       	com	r24
     694:	83 23       	and	r24, r19
     696:	8c 93       	st	X, r24
		*out |= bit;
     698:	e8 81       	ld	r30, Y
     69a:	2e 2b       	or	r18, r30
     69c:	ef cf       	rjmp	.-34     	; 0x67c <pinMode+0x48>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     69e:	8f b7       	in	r24, 0x3f	; 63
                cli();
     6a0:	f8 94       	cli
		*reg |= bit;
     6a2:	ec 91       	ld	r30, X
     6a4:	2e 2b       	or	r18, r30
     6a6:	2c 93       	st	X, r18
		SREG = oldSREG;
     6a8:	8f bf       	out	0x3f, r24	; 63
     6aa:	ea cf       	rjmp	.-44     	; 0x680 <pinMode+0x4c>

000006ac <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     6b2:	28 2f       	mov	r18, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	f9 01       	movw	r30, r18
     6b8:	e8 59       	subi	r30, 0x98	; 152
     6ba:	ff 4f       	sbci	r31, 0xFF	; 255
     6bc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     6be:	f9 01       	movw	r30, r18
     6c0:	e4 58       	subi	r30, 0x84	; 132
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     6c6:	f9 01       	movw	r30, r18
     6c8:	e0 57       	subi	r30, 0x70	; 112
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     6ce:	cc 23       	and	r28, r28
     6d0:	a9 f0       	breq	.+42     	; 0x6fc <digitalWrite+0x50>
     6d2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     6d4:	81 11       	cpse	r24, r1
     6d6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <turnOffPWM>

	out = portOutputRegister(port);
     6da:	ec 2f       	mov	r30, r28
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	ee 0f       	add	r30, r30
     6e0:	ff 1f       	adc	r31, r31
     6e2:	ec 55       	subi	r30, 0x5C	; 92
     6e4:	ff 4f       	sbci	r31, 0xFF	; 255
     6e6:	a5 91       	lpm	r26, Z+
     6e8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     6ea:	8f b7       	in	r24, 0x3f	; 63
	cli();
     6ec:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     6ee:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     6f0:	11 11       	cpse	r17, r1
     6f2:	08 c0       	rjmp	.+16     	; 0x704 <digitalWrite+0x58>
		*out &= ~bit;
     6f4:	d0 95       	com	r29
     6f6:	de 23       	and	r29, r30
	} else {
		*out |= bit;
     6f8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     6fa:	8f bf       	out	0x3f, r24	; 63
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	08 95       	ret
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
     704:	de 2b       	or	r29, r30
     706:	f8 cf       	rjmp	.-16     	; 0x6f8 <digitalWrite+0x4c>

00000708 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     708:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     70a:	91 8d       	ldd	r25, Z+25	; 0x19
     70c:	22 8d       	ldd	r18, Z+26	; 0x1a
     70e:	89 2f       	mov	r24, r25
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	80 5c       	subi	r24, 0xC0	; 192
     714:	9f 4f       	sbci	r25, 0xFF	; 255
     716:	82 1b       	sub	r24, r18
     718:	91 09       	sbc	r25, r1
}
     71a:	8f 73       	andi	r24, 0x3F	; 63
     71c:	99 27       	eor	r25, r25
     71e:	08 95       	ret

00000720 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     720:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     722:	91 8d       	ldd	r25, Z+25	; 0x19
     724:	82 8d       	ldd	r24, Z+26	; 0x1a
     726:	98 17       	cp	r25, r24
     728:	31 f0       	breq	.+12     	; 0x736 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     72a:	82 8d       	ldd	r24, Z+26	; 0x1a
     72c:	e8 0f       	add	r30, r24
     72e:	f1 1d       	adc	r31, r1
     730:	85 8d       	ldd	r24, Z+29	; 0x1d
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     736:	8f ef       	ldi	r24, 0xFF	; 255
     738:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     73a:	08 95       	ret

0000073c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     73c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     73e:	91 8d       	ldd	r25, Z+25	; 0x19
     740:	82 8d       	ldd	r24, Z+26	; 0x1a
     742:	98 17       	cp	r25, r24
     744:	61 f0       	breq	.+24     	; 0x75e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     746:	a2 8d       	ldd	r26, Z+26	; 0x1a
     748:	ae 0f       	add	r26, r30
     74a:	bf 2f       	mov	r27, r31
     74c:	b1 1d       	adc	r27, r1
     74e:	5d 96       	adiw	r26, 0x1d	; 29
     750:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     752:	92 8d       	ldd	r25, Z+26	; 0x1a
     754:	9f 5f       	subi	r25, 0xFF	; 255
     756:	9f 73       	andi	r25, 0x3F	; 63
     758:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     75e:	8f ef       	ldi	r24, 0xFF	; 255
     760:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     762:	08 95       	ret

00000764 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     764:	fc 01       	movw	r30, r24
     766:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     768:	44 8d       	ldd	r20, Z+28	; 0x1c
     76a:	25 2f       	mov	r18, r21
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	84 2f       	mov	r24, r20
     770:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     772:	82 1b       	sub	r24, r18
     774:	93 0b       	sbc	r25, r19
     776:	54 17       	cp	r21, r20
     778:	10 f0       	brcs	.+4      	; 0x77e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     77a:	cf 96       	adiw	r24, 0x3f	; 63
     77c:	08 95       	ret
  return tail - head - 1;
     77e:	01 97       	sbiw	r24, 0x01	; 1
}
     780:	08 95       	ret

00000782 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     782:	88 e1       	ldi	r24, 0x18	; 24
     784:	95 e0       	ldi	r25, 0x05	; 5
     786:	89 2b       	or	r24, r25
     788:	49 f0       	breq	.+18     	; 0x79c <_Z14serialEventRunv+0x1a>
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	89 2b       	or	r24, r25
     790:	29 f0       	breq	.+10     	; 0x79c <_Z14serialEventRunv+0x1a>
     792:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z17Serial0_availablev>
     796:	81 11       	cpse	r24, r1
     798:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     79c:	08 95       	ret

0000079e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     79e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     7a0:	a4 8d       	ldd	r26, Z+28	; 0x1c
     7a2:	a8 0f       	add	r26, r24
     7a4:	b9 2f       	mov	r27, r25
     7a6:	b1 1d       	adc	r27, r1
     7a8:	a3 5a       	subi	r26, 0xA3	; 163
     7aa:	bf 4f       	sbci	r27, 0xFF	; 255
     7ac:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     7ae:	84 8d       	ldd	r24, Z+28	; 0x1c
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	8f 73       	andi	r24, 0x3F	; 63
     7b6:	99 27       	eor	r25, r25
     7b8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     7ba:	a6 89       	ldd	r26, Z+22	; 0x16
     7bc:	b7 89       	ldd	r27, Z+23	; 0x17
     7be:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     7c0:	a0 89       	ldd	r26, Z+16	; 0x10
     7c2:	b1 89       	ldd	r27, Z+17	; 0x11
     7c4:	8c 91       	ld	r24, X
     7c6:	83 70       	andi	r24, 0x03	; 3
     7c8:	80 64       	ori	r24, 0x40	; 64
     7ca:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     7cc:	93 8d       	ldd	r25, Z+27	; 0x1b
     7ce:	84 8d       	ldd	r24, Z+28	; 0x1c
     7d0:	98 13       	cpse	r25, r24
     7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     7d4:	02 88       	ldd	r0, Z+18	; 0x12
     7d6:	f3 89       	ldd	r31, Z+19	; 0x13
     7d8:	e0 2d       	mov	r30, r0
     7da:	80 81       	ld	r24, Z
     7dc:	8f 7d       	andi	r24, 0xDF	; 223
     7de:	80 83       	st	Z, r24
  }
}
     7e0:	08 95       	ret

000007e2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     7e8:	88 8d       	ldd	r24, Y+24	; 0x18
     7ea:	88 23       	and	r24, r24
     7ec:	b9 f0       	breq	.+46     	; 0x81c <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     7ee:	aa 89       	ldd	r26, Y+18	; 0x12
     7f0:	bb 89       	ldd	r27, Y+19	; 0x13
     7f2:	e8 89       	ldd	r30, Y+16	; 0x10
     7f4:	f9 89       	ldd	r31, Y+17	; 0x11
     7f6:	8c 91       	ld	r24, X
     7f8:	85 fd       	sbrc	r24, 5
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <_ZN14HardwareSerial5flushEv+0x20>
     7fc:	80 81       	ld	r24, Z
     7fe:	86 fd       	sbrc	r24, 6
     800:	0d c0       	rjmp	.+26     	; 0x81c <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	07 fc       	sbrc	r0, 7
     806:	f7 cf       	rjmp	.-18     	; 0x7f6 <_ZN14HardwareSerial5flushEv+0x14>
     808:	8c 91       	ld	r24, X
     80a:	85 ff       	sbrs	r24, 5
     80c:	f2 cf       	rjmp	.-28     	; 0x7f2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     80e:	80 81       	ld	r24, Z
     810:	85 ff       	sbrs	r24, 5
     812:	ed cf       	rjmp	.-38     	; 0x7ee <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
     814:	ce 01       	movw	r24, r28
     816:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     81a:	e9 cf       	rjmp	.-46     	; 0x7ee <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	ec 01       	movw	r28, r24
  _written = true;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     834:	9b 8d       	ldd	r25, Y+27	; 0x1b
     836:	8c 8d       	ldd	r24, Y+28	; 0x1c
     838:	98 13       	cpse	r25, r24
     83a:	1a c0       	rjmp	.+52     	; 0x870 <_ZN14HardwareSerial5writeEh+0x4e>
     83c:	e8 89       	ldd	r30, Y+16	; 0x10
     83e:	f9 89       	ldd	r31, Y+17	; 0x11
     840:	80 81       	ld	r24, Z
     842:	85 ff       	sbrs	r24, 5
     844:	15 c0       	rjmp	.+42     	; 0x870 <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     846:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     848:	f8 94       	cli
      *_udr = c;
     84a:	ee 89       	ldd	r30, Y+22	; 0x16
     84c:	ff 89       	ldd	r31, Y+23	; 0x17
     84e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     850:	e8 89       	ldd	r30, Y+16	; 0x10
     852:	f9 89       	ldd	r31, Y+17	; 0x11
     854:	80 81       	ld	r24, Z
     856:	83 70       	andi	r24, 0x03	; 3
     858:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     85a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     85c:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	08 95       	ret
     870:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     872:	0b 8d       	ldd	r16, Y+27	; 0x1b
     874:	10 e0       	ldi	r17, 0x00	; 0
     876:	0f 5f       	subi	r16, 0xFF	; 255
     878:	1f 4f       	sbci	r17, 0xFF	; 255
     87a:	0f 73       	andi	r16, 0x3F	; 63
     87c:	11 27       	eor	r17, r17
     87e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     880:	8c 8d       	ldd	r24, Y+28	; 0x1c
     882:	8e 11       	cpse	r24, r14
     884:	0c c0       	rjmp	.+24     	; 0x89e <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	07 fc       	sbrc	r0, 7
     88a:	fa cf       	rjmp	.-12     	; 0x880 <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     88c:	e8 89       	ldd	r30, Y+16	; 0x10
     88e:	f9 89       	ldd	r31, Y+17	; 0x11
     890:	80 81       	ld	r24, Z
     892:	85 ff       	sbrs	r24, 5
     894:	f5 cf       	rjmp	.-22     	; 0x880 <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
     896:	ce 01       	movw	r24, r28
     898:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     89c:	f1 cf       	rjmp	.-30     	; 0x880 <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     89e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     8a0:	ec 0f       	add	r30, r28
     8a2:	fd 2f       	mov	r31, r29
     8a4:	f1 1d       	adc	r31, r1
     8a6:	e3 5a       	subi	r30, 0xA3	; 163
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     8ac:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8ae:	f8 94       	cli
    _tx_buffer_head = i;
     8b0:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     8b2:	ea 89       	ldd	r30, Y+18	; 0x12
     8b4:	fb 89       	ldd	r31, Y+19	; 0x13
     8b6:	80 81       	ld	r24, Z
     8b8:	80 62       	ori	r24, 0x20	; 32
     8ba:	cf cf       	rjmp	.-98     	; 0x85a <_ZN14HardwareSerial5writeEh+0x38>

000008bc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
     8cc:	6a 01       	movw	r12, r20
     8ce:	7b 01       	movw	r14, r22
     8d0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     8d2:	e8 89       	ldd	r30, Y+16	; 0x10
     8d4:	f9 89       	ldd	r31, Y+17	; 0x11
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     8da:	c1 14       	cp	r12, r1
     8dc:	81 ee       	ldi	r24, 0xE1	; 225
     8de:	d8 06       	cpc	r13, r24
     8e0:	e1 04       	cpc	r14, r1
     8e2:	f1 04       	cpc	r15, r1
     8e4:	a1 f0       	breq	.+40     	; 0x90e <__stack+0xf>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	79 e0       	ldi	r23, 0x09	; 9
     8ea:	8d e3       	ldi	r24, 0x3D	; 61
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	a7 01       	movw	r20, r14
     8f0:	96 01       	movw	r18, r12
     8f2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__udivmodsi4>
     8f6:	21 50       	subi	r18, 0x01	; 1
     8f8:	31 09       	sbc	r19, r1
     8fa:	41 09       	sbc	r20, r1
     8fc:	51 09       	sbc	r21, r1
     8fe:	56 95       	lsr	r21
     900:	47 95       	ror	r20
     902:	37 95       	ror	r19
     904:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     906:	21 15       	cp	r18, r1
     908:	80 e1       	ldi	r24, 0x10	; 16
     90a:	38 07       	cpc	r19, r24
     90c:	98 f0       	brcs	.+38     	; 0x934 <__stack+0x35>
  {
    *_ucsra = 0;
     90e:	e8 89       	ldd	r30, Y+16	; 0x10
     910:	f9 89       	ldd	r31, Y+17	; 0x11
     912:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     914:	60 e8       	ldi	r22, 0x80	; 128
     916:	74 e8       	ldi	r23, 0x84	; 132
     918:	8e e1       	ldi	r24, 0x1E	; 30
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a7 01       	movw	r20, r14
     91e:	96 01       	movw	r18, r12
     920:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__udivmodsi4>
     924:	21 50       	subi	r18, 0x01	; 1
     926:	31 09       	sbc	r19, r1
     928:	41 09       	sbc	r20, r1
     92a:	51 09       	sbc	r21, r1
     92c:	56 95       	lsr	r21
     92e:	47 95       	ror	r20
     930:	37 95       	ror	r19
     932:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     934:	ec 85       	ldd	r30, Y+12	; 0x0c
     936:	fd 85       	ldd	r31, Y+13	; 0x0d
     938:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     93a:	ee 85       	ldd	r30, Y+14	; 0x0e
     93c:	ff 85       	ldd	r31, Y+15	; 0x0f
     93e:	20 83       	st	Z, r18

  _written = false;
     940:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     942:	ec 89       	ldd	r30, Y+20	; 0x14
     944:	fd 89       	ldd	r31, Y+21	; 0x15
     946:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     948:	ea 89       	ldd	r30, Y+18	; 0x12
     94a:	fb 89       	ldd	r31, Y+19	; 0x13
     94c:	80 81       	ld	r24, Z
     94e:	80 61       	ori	r24, 0x10	; 16
     950:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     952:	ea 89       	ldd	r30, Y+18	; 0x12
     954:	fb 89       	ldd	r31, Y+19	; 0x13
     956:	80 81       	ld	r24, Z
     958:	88 60       	ori	r24, 0x08	; 8
     95a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     95c:	ea 89       	ldd	r30, Y+18	; 0x12
     95e:	fb 89       	ldd	r31, Y+19	; 0x13
     960:	80 81       	ld	r24, Z
     962:	80 68       	ori	r24, 0x80	; 128
     964:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     966:	ea 89       	ldd	r30, Y+18	; 0x12
     968:	fb 89       	ldd	r31, Y+19	; 0x13
     96a:	80 81       	ld	r24, Z
     96c:	8f 7d       	andi	r24, 0xDF	; 223
     96e:	80 83       	st	Z, r24
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	08 95       	ret

00000980 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     980:	1f 92       	push	r1
     982:	0f 92       	push	r0
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	0f 92       	push	r0
     988:	11 24       	eor	r1, r1
     98a:	2f 93       	push	r18
     98c:	8f 93       	push	r24
     98e:	9f 93       	push	r25
     990:	ef 93       	push	r30
     992:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     994:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <Serial+0x10>
     998:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <Serial+0x11>
     99c:	80 81       	ld	r24, Z
     99e:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <Serial+0x16>
     9a2:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <Serial+0x17>
     9a6:	82 fd       	sbrc	r24, 2
     9a8:	1b c0       	rjmp	.+54     	; 0x9e0 <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     9aa:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     9ac:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <Serial+0x19>
     9b0:	8f 5f       	subi	r24, 0xFF	; 255
     9b2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     9b4:	20 91 49 02 	lds	r18, 0x0249	; 0x800249 <Serial+0x1a>
     9b8:	82 17       	cp	r24, r18
     9ba:	41 f0       	breq	.+16     	; 0x9cc <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
     9bc:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <Serial+0x19>
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	e1 5d       	subi	r30, 0xD1	; 209
     9c4:	fd 4f       	sbci	r31, 0xFD	; 253
     9c6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     9c8:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <Serial+0x19>
    Serial._rx_complete_irq();
  }
     9cc:	ff 91       	pop	r31
     9ce:	ef 91       	pop	r30
     9d0:	9f 91       	pop	r25
     9d2:	8f 91       	pop	r24
     9d4:	2f 91       	pop	r18
     9d6:	0f 90       	pop	r0
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	0f 90       	pop	r0
     9dc:	1f 90       	pop	r1
     9de:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9e0:	80 81       	ld	r24, Z
     9e2:	f4 cf       	rjmp	.-24     	; 0x9cc <__vector_18+0x4c>

000009e4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     9e4:	1f 92       	push	r1
     9e6:	0f 92       	push	r0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     a06:	8f e2       	ldi	r24, 0x2F	; 47
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a0e:	ff 91       	pop	r31
     a10:	ef 91       	pop	r30
     a12:	bf 91       	pop	r27
     a14:	af 91       	pop	r26
     a16:	9f 91       	pop	r25
     a18:	8f 91       	pop	r24
     a1a:	7f 91       	pop	r23
     a1c:	6f 91       	pop	r22
     a1e:	5f 91       	pop	r21
     a20:	4f 91       	pop	r20
     a22:	3f 91       	pop	r19
     a24:	2f 91       	pop	r18
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     a30:	8f e2       	ldi	r24, 0x2F	; 47
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	0e 94 84 03 	call	0x708	; 0x708 <_ZN14HardwareSerial9availableEv>
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	89 2b       	or	r24, r25
     a3c:	09 f4       	brne	.+2      	; 0xa40 <_Z17Serial0_availablev+0x10>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
}
     a40:	82 2f       	mov	r24, r18
     a42:	08 95       	ret

00000a44 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     a44:	ef e2       	ldi	r30, 0x2F	; 47
     a46:	f2 e0       	ldi	r31, 0x02	; 2
     a48:	13 82       	std	Z+3, r1	; 0x03
     a4a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     a4c:	88 ee       	ldi	r24, 0xE8	; 232
     a4e:	93 e0       	ldi	r25, 0x03	; 3
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	84 83       	std	Z+4, r24	; 0x04
     a56:	95 83       	std	Z+5, r25	; 0x05
     a58:	a6 83       	std	Z+6, r26	; 0x06
     a5a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a5c:	8d e0       	ldi	r24, 0x0D	; 13
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	91 83       	std	Z+1, r25	; 0x01
     a62:	80 83       	st	Z, r24
     a64:	85 ec       	ldi	r24, 0xC5	; 197
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	95 87       	std	Z+13, r25	; 0x0d
     a6a:	84 87       	std	Z+12, r24	; 0x0c
     a6c:	84 ec       	ldi	r24, 0xC4	; 196
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	97 87       	std	Z+15, r25	; 0x0f
     a72:	86 87       	std	Z+14, r24	; 0x0e
     a74:	80 ec       	ldi	r24, 0xC0	; 192
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	91 8b       	std	Z+17, r25	; 0x11
     a7a:	80 8b       	std	Z+16, r24	; 0x10
     a7c:	81 ec       	ldi	r24, 0xC1	; 193
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	93 8b       	std	Z+19, r25	; 0x13
     a82:	82 8b       	std	Z+18, r24	; 0x12
     a84:	82 ec       	ldi	r24, 0xC2	; 194
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	95 8b       	std	Z+21, r25	; 0x15
     a8a:	84 8b       	std	Z+20, r24	; 0x14
     a8c:	86 ec       	ldi	r24, 0xC6	; 198
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	97 8b       	std	Z+23, r25	; 0x17
     a92:	86 8b       	std	Z+22, r24	; 0x16
     a94:	11 8e       	std	Z+25, r1	; 0x19
     a96:	12 8e       	std	Z+26, r1	; 0x1a
     a98:	13 8e       	std	Z+27, r1	; 0x1b
     a9a:	14 8e       	std	Z+28, r1	; 0x1c
     a9c:	08 95       	ret

00000a9e <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     a9e:	af 92       	push	r10
     aa0:	bf 92       	push	r11
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	6c 01       	movw	r12, r24
     ab4:	7b 01       	movw	r14, r22
     ab6:	8b 01       	movw	r16, r22
     ab8:	04 0f       	add	r16, r20
     aba:	15 1f       	adc	r17, r21
     abc:	eb 01       	movw	r28, r22
     abe:	5e 01       	movw	r10, r28
     ac0:	ae 18       	sub	r10, r14
     ac2:	bf 08       	sbc	r11, r15
     ac4:	c0 17       	cp	r28, r16
     ac6:	d1 07       	cpc	r29, r17
     ac8:	59 f0       	breq	.+22     	; 0xae0 <_ZN5Print5writeEPKhj+0x42>
     aca:	69 91       	ld	r22, Y+
     acc:	d6 01       	movw	r26, r12
     ace:	ed 91       	ld	r30, X+
     ad0:	fc 91       	ld	r31, X
     ad2:	01 90       	ld	r0, Z+
     ad4:	f0 81       	ld	r31, Z
     ad6:	e0 2d       	mov	r30, r0
     ad8:	c6 01       	movw	r24, r12
     ada:	09 95       	icall
     adc:	89 2b       	or	r24, r25
     ade:	79 f7       	brne	.-34     	; 0xabe <_ZN5Print5writeEPKhj+0x20>
     ae0:	c5 01       	movw	r24, r10
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	08 95       	ret

00000af8 <_ZN5Print5writeEPKc.part.2>:
     af8:	fb 01       	movw	r30, r22
     afa:	01 90       	ld	r0, Z+
     afc:	00 20       	and	r0, r0
     afe:	e9 f7       	brne	.-6      	; 0xafa <_ZN5Print5writeEPKc.part.2+0x2>
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	af 01       	movw	r20, r30
     b04:	46 1b       	sub	r20, r22
     b06:	57 0b       	sbc	r21, r23
     b08:	dc 01       	movw	r26, r24
     b0a:	ed 91       	ld	r30, X+
     b0c:	fc 91       	ld	r31, X
     b0e:	02 80       	ldd	r0, Z+2	; 0x02
     b10:	f3 81       	ldd	r31, Z+3	; 0x03
     b12:	e0 2d       	mov	r30, r0
     b14:	09 94       	ijmp

00000b16 <_ZN5Print5printEPKc>:
     b16:	61 15       	cp	r22, r1
     b18:	71 05       	cpc	r23, r1
     b1a:	11 f0       	breq	.+4      	; 0xb20 <_ZN5Print5printEPKc+0xa>
     b1c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <_ZN5Print5writeEPKc.part.2>
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	08 95       	ret

00000b26 <_ZN5Print5printEc>:
     b26:	dc 01       	movw	r26, r24
     b28:	ed 91       	ld	r30, X+
     b2a:	fc 91       	ld	r31, X
     b2c:	01 90       	ld	r0, Z+
     b2e:	f0 81       	ld	r31, Z
     b30:	e0 2d       	mov	r30, r0
     b32:	09 94       	ijmp

00000b34 <_ZN5Print7printlnEv>:
     b34:	6e e4       	ldi	r22, 0x4E	; 78
     b36:	71 e0       	ldi	r23, 0x01	; 1
     b38:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <_ZN5Print5writeEPKc.part.2>

00000b3c <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     b3c:	8f 92       	push	r8
     b3e:	9f 92       	push	r9
     b40:	af 92       	push	r10
     b42:	bf 92       	push	r11
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	a1 97       	sbiw	r28, 0x21	; 33
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	7c 01       	movw	r14, r24
     b62:	fa 01       	movw	r30, r20
     b64:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     b66:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     b68:	22 30       	cpi	r18, 0x02	; 2
     b6a:	08 f4       	brcc	.+2      	; 0xb6e <_ZN5Print11printNumberEmh+0x32>
     b6c:	2a e0       	ldi	r18, 0x0A	; 10
     b6e:	8e 01       	movw	r16, r28
     b70:	0f 5d       	subi	r16, 0xDF	; 223
     b72:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     b74:	82 2e       	mov	r8, r18
     b76:	91 2c       	mov	r9, r1
     b78:	b1 2c       	mov	r11, r1
     b7a:	a1 2c       	mov	r10, r1
     b7c:	bf 01       	movw	r22, r30
     b7e:	a5 01       	movw	r20, r10
     b80:	94 01       	movw	r18, r8
     b82:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__udivmodsi4>
    n /= base;
     b86:	f9 01       	movw	r30, r18
     b88:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     b8a:	6a 30       	cpi	r22, 0x0A	; 10
     b8c:	0c f5       	brge	.+66     	; 0xbd0 <_ZN5Print11printNumberEmh+0x94>
     b8e:	60 5d       	subi	r22, 0xD0	; 208
     b90:	d8 01       	movw	r26, r16
     b92:	6e 93       	st	-X, r22
     b94:	8d 01       	movw	r16, r26
  } while(n);
     b96:	23 2b       	or	r18, r19
     b98:	24 2b       	or	r18, r20
     b9a:	25 2b       	or	r18, r21
     b9c:	79 f7       	brne	.-34     	; 0xb7c <_ZN5Print11printNumberEmh+0x40>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	10 97       	sbiw	r26, 0x00	; 0
     ba4:	21 f0       	breq	.+8      	; 0xbae <_ZN5Print11printNumberEmh+0x72>
     ba6:	bd 01       	movw	r22, r26
     ba8:	c7 01       	movw	r24, r14
     baa:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_ZN5Print5writeEPKc.part.2>

  return write(str);
}
     bae:	a1 96       	adiw	r28, 0x21	; 33
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	bf 90       	pop	r11
     bc8:	af 90       	pop	r10
     bca:	9f 90       	pop	r9
     bcc:	8f 90       	pop	r8
     bce:	08 95       	ret

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     bd0:	69 5c       	subi	r22, 0xC9	; 201
     bd2:	de cf       	rjmp	.-68     	; 0xb90 <_ZN5Print11printNumberEmh+0x54>

00000bd4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
  if (base == 0) {
     be4:	21 15       	cp	r18, r1
     be6:	31 05       	cpc	r19, r1
     be8:	81 f4       	brne	.+32     	; 0xc0a <_ZN5Print5printEli+0x36>
    return write(n);
     bea:	dc 01       	movw	r26, r24
     bec:	ed 91       	ld	r30, X+
     bee:	fc 91       	ld	r31, X
     bf0:	01 90       	ld	r0, Z+
     bf2:	f0 81       	ld	r31, Z
     bf4:	e0 2d       	mov	r30, r0
     bf6:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     c08:	09 94       	ijmp
  } else if (base == 10) {
     c0a:	2a 30       	cpi	r18, 0x0A	; 10
     c0c:	31 05       	cpc	r19, r1
     c0e:	01 f5       	brne	.+64     	; 0xc50 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     c10:	2a e0       	ldi	r18, 0x0A	; 10
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     c12:	77 ff       	sbrs	r23, 7
     c14:	1d c0       	rjmp	.+58     	; 0xc50 <_ZN5Print5printEli+0x7c>
     c16:	6a 01       	movw	r12, r20
     c18:	7b 01       	movw	r14, r22
     c1a:	ec 01       	movw	r28, r24
      int t = print('-');
     c1c:	6d e2       	ldi	r22, 0x2D	; 45
     c1e:	0e 94 93 05 	call	0xb26	; 0xb26 <_ZN5Print5printEc>
     c22:	8c 01       	movw	r16, r24
      n = -n;
     c24:	44 27       	eor	r20, r20
     c26:	55 27       	eor	r21, r21
     c28:	ba 01       	movw	r22, r20
     c2a:	4c 19       	sub	r20, r12
     c2c:	5d 09       	sbc	r21, r13
     c2e:	6e 09       	sbc	r22, r14
     c30:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
     c32:	2a e0       	ldi	r18, 0x0A	; 10
     c34:	ce 01       	movw	r24, r28
     c36:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_ZN5Print11printNumberEmh>
     c3a:	80 0f       	add	r24, r16
     c3c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	08 95       	ret
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     c60:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <_ZN5Print11printNumberEmh>

00000c64 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     c64:	9a 01       	movw	r18, r20
  return print((long) n, base);
     c66:	ab 01       	movw	r20, r22
     c68:	77 0f       	add	r23, r23
     c6a:	66 0b       	sbc	r22, r22
     c6c:	77 0b       	sbc	r23, r23
     c6e:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <_ZN5Print5printEli>

00000c72 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     c7c:	0e 94 32 06 	call	0xc64	; 0xc64 <_ZN5Print5printEii>
     c80:	8c 01       	movw	r16, r24
  n += println();
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 9a 05 	call	0xb34	; 0xb34 <_ZN5Print7printlnEv>
  return n;
}
     c88:	80 0f       	add	r24, r16
     c8a:	91 1f       	adc	r25, r17
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     c96:	08 95       	ret

00000c98 <StartOS>:
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
     c98:	4f 92       	push	r4
     c9a:	5f 92       	push	r5
     c9c:	6f 92       	push	r6
     c9e:	7f 92       	push	r7
     ca0:	8f 92       	push	r8
     ca2:	9f 92       	push	r9
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	00 d0       	rcall	.+0      	; 0xcba <StartOS+0x22>
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	00 91 63 01 	lds	r16, 0x0163	; 0x800163 <CDB>
     cc2:	10 91 64 01 	lds	r17, 0x0164	; 0x800164 <CDB+0x1>
     cc6:	9f b7       	in	r25, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	d8 01       	movw	r26, r16
     ccc:	18 96       	adiw	r26, 0x08	; 8
     cce:	2d 91       	ld	r18, X+
     cd0:	3c 91       	ld	r19, X
     cd2:	23 2b       	or	r18, r19
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <StartOS+0x40>
     cd6:	a4 c0       	rjmp	.+328    	; 0xe20 <StartOS+0x188>
     cd8:	88 2e       	mov	r8, r24
     cda:	82 ec       	ldi	r24, 0xC2	; 194
     cdc:	99 e0       	ldi	r25, 0x09	; 9
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	0e 94 0a 0a 	call	0x1414	; 0x1414 <osEE_avr8_system_timer_init>
     ce6:	a0 90 67 01 	lds	r10, 0x0167	; 0x800167 <CDB+0x4>
     cea:	b0 90 68 01 	lds	r11, 0x0168	; 0x800168 <CDB+0x5>
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	f8 01       	movw	r30, r16
     cf4:	91 87       	std	Z+9, r25	; 0x09
     cf6:	80 87       	std	Z+8, r24	; 0x08
     cf8:	82 86       	std	Z+10, r8	; 0x0a
     cfa:	e0 90 6f 01 	lds	r14, 0x016F	; 0x80016f <CDB+0xc>
     cfe:	f0 90 70 01 	lds	r15, 0x0170	; 0x800170 <CDB+0xd>
     d02:	d1 2c       	mov	r13, r1
     d04:	c1 2c       	mov	r12, r1
     d06:	f4 e0       	ldi	r31, 0x04	; 4
     d08:	8f 9e       	mul	r8, r31
     d0a:	40 01       	movw	r8, r0
     d0c:	11 24       	eor	r1, r1
     d0e:	e8 0c       	add	r14, r8
     d10:	f9 1c       	adc	r15, r9
     d12:	37 01       	movw	r6, r14
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	68 0e       	add	r6, r24
     d18:	71 1c       	adc	r7, r1
     d1a:	46 e0       	ldi	r20, 0x06	; 6
     d1c:	54 2e       	mov	r5, r20
     d1e:	f3 01       	movw	r30, r6
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	c8 16       	cp	r12, r24
     d26:	d9 06       	cpc	r13, r25
     d28:	e0 f1       	brcs	.+120    	; 0xda2 <StartOS+0x10a>
     d2a:	e0 90 6b 01 	lds	r14, 0x016B	; 0x80016b <CDB+0x8>
     d2e:	f0 90 6c 01 	lds	r15, 0x016C	; 0x80016c <CDB+0x9>
     d32:	38 01       	movw	r6, r16
     d34:	f2 e0       	ldi	r31, 0x02	; 2
     d36:	6f 0e       	add	r6, r31
     d38:	71 1c       	adc	r7, r1
     d3a:	d1 2c       	mov	r13, r1
     d3c:	c1 2c       	mov	r12, r1
     d3e:	e8 0c       	add	r14, r8
     d40:	f9 1c       	adc	r15, r9
     d42:	27 01       	movw	r4, r14
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	48 0e       	add	r4, r24
     d48:	51 1c       	adc	r5, r1
     d4a:	88 24       	eor	r8, r8
     d4c:	83 94       	inc	r8
     d4e:	91 2c       	mov	r9, r1
     d50:	f2 01       	movw	r30, r4
     d52:	80 81       	ld	r24, Z
     d54:	91 81       	ldd	r25, Z+1	; 0x01
     d56:	c8 16       	cp	r12, r24
     d58:	d9 06       	cpc	r13, r25
     d5a:	e8 f1       	brcs	.+122    	; 0xdd6 <StartOS+0x13e>
     d5c:	d8 01       	movw	r26, r16
     d5e:	18 96       	adiw	r26, 0x08	; 8
     d60:	8d 91       	ld	r24, X+
     d62:	9c 91       	ld	r25, X
     d64:	19 97       	sbiw	r26, 0x09	; 9
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	31 f4       	brne	.+12     	; 0xd76 <StartOS+0xde>
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	19 96       	adiw	r26, 0x09	; 9
     d70:	9c 93       	st	X, r25
     d72:	8e 93       	st	-X, r24
     d74:	18 97       	sbiw	r26, 0x08	; 8
     d76:	f8 01       	movw	r30, r16
     d78:	80 85       	ldd	r24, Z+8	; 0x08
     d7a:	91 85       	ldd	r25, Z+9	; 0x09
     d7c:	02 97       	sbiw	r24, 0x02	; 2
     d7e:	41 f4       	brne	.+16     	; 0xd90 <StartOS+0xf8>
     d80:	d5 01       	movw	r26, r10
     d82:	12 96       	adiw	r26, 0x02	; 2
     d84:	6d 91       	ld	r22, X+
     d86:	7c 91       	ld	r23, X
     d88:	ab 01       	movw	r20, r22
     d8a:	c5 01       	movw	r24, r10
     d8c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>
     d90:	f8 01       	movw	r30, r16
     d92:	80 85       	ldd	r24, Z+8	; 0x08
     d94:	91 85       	ldd	r25, Z+9	; 0x09
     d96:	02 97       	sbiw	r24, 0x02	; 2
     d98:	09 f4       	brne	.+2      	; 0xd9c <StartOS+0x104>
     d9a:	78 94       	sei
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	42 c0       	rjmp	.+132    	; 0xe26 <StartOS+0x18e>
     da2:	d7 01       	movw	r26, r14
     da4:	ed 91       	ld	r30, X+
     da6:	fc 91       	ld	r31, X
     da8:	5c 9c       	mul	r5, r12
     daa:	c0 01       	movw	r24, r0
     dac:	5d 9c       	mul	r5, r13
     dae:	90 0d       	add	r25, r0
     db0:	11 24       	eor	r1, r1
     db2:	e8 0f       	add	r30, r24
     db4:	f9 1f       	adc	r31, r25
     db6:	a0 81       	ld	r26, Z
     db8:	b1 81       	ldd	r27, Z+1	; 0x01
     dba:	24 81       	ldd	r18, Z+4	; 0x04
     dbc:	35 81       	ldd	r19, Z+5	; 0x05
     dbe:	42 81       	ldd	r20, Z+2	; 0x02
     dc0:	53 81       	ldd	r21, Z+3	; 0x03
     dc2:	bd 01       	movw	r22, r26
     dc4:	12 96       	adiw	r26, 0x02	; 2
     dc6:	8d 91       	ld	r24, X+
     dc8:	9c 91       	ld	r25, X
     dca:	0e 94 af 09 	call	0x135e	; 0x135e <osEE_alarm_set_rel>
     dce:	bf ef       	ldi	r27, 0xFF	; 255
     dd0:	cb 1a       	sub	r12, r27
     dd2:	db 0a       	sbc	r13, r27
     dd4:	a4 cf       	rjmp	.-184    	; 0xd1e <StartOS+0x86>
     dd6:	d7 01       	movw	r26, r14
     dd8:	ed 91       	ld	r30, X+
     dda:	fc 91       	ld	r31, X
     ddc:	c6 01       	movw	r24, r12
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	e8 0f       	add	r30, r24
     de4:	f9 1f       	adc	r31, r25
     de6:	40 81       	ld	r20, Z
     de8:	51 81       	ldd	r21, Z+1	; 0x01
     dea:	da 01       	movw	r26, r20
     dec:	14 96       	adiw	r26, 0x04	; 4
     dee:	ed 91       	ld	r30, X+
     df0:	fc 91       	ld	r31, X
     df2:	80 81       	ld	r24, Z
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	80 83       	st	Z, r24
     df8:	93 82       	std	Z+3, r9	; 0x03
     dfa:	82 82       	std	Z+2, r8	; 0x02
     dfc:	f8 01       	movw	r30, r16
     dfe:	64 81       	ldd	r22, Z+4	; 0x04
     e00:	75 81       	ldd	r23, Z+5	; 0x05
     e02:	db 01       	movw	r26, r22
     e04:	8d 91       	ld	r24, X+
     e06:	9c 91       	ld	r25, X
     e08:	11 97       	sbiw	r26, 0x01	; 1
     e0a:	95 83       	std	Z+5, r25	; 0x05
     e0c:	84 83       	std	Z+4, r24	; 0x04
     e0e:	1d 92       	st	X+, r1
     e10:	1c 92       	st	X, r1
     e12:	c3 01       	movw	r24, r6
     e14:	0e 94 5f 08 	call	0x10be	; 0x10be <osEE_scheduler_rq_insert>
     e18:	bf ef       	ldi	r27, 0xFF	; 255
     e1a:	cb 1a       	sub	r12, r27
     e1c:	db 0a       	sbc	r13, r27
     e1e:	98 cf       	rjmp	.-208    	; 0xd50 <StartOS+0xb8>
     e20:	9f bf       	out	0x3f, r25	; 63
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	ff 90       	pop	r15
     e34:	ef 90       	pop	r14
     e36:	df 90       	pop	r13
     e38:	cf 90       	pop	r12
     e3a:	bf 90       	pop	r11
     e3c:	af 90       	pop	r10
     e3e:	9f 90       	pop	r9
     e40:	8f 90       	pop	r8
     e42:	7f 90       	pop	r7
     e44:	6f 90       	pop	r6
     e46:	5f 90       	pop	r5
     e48:	4f 90       	pop	r4
     e4a:	08 95       	ret

00000e4c <ActivateTask>:
     e4c:	cf 93       	push	r28
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <KDB+0x6>
     e54:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <KDB+0x7>
     e58:	82 17       	cp	r24, r18
     e5a:	93 07       	cpc	r25, r19
     e5c:	e8 f4       	brcc	.+58     	; 0xe98 <ActivateTask+0x4c>
     e5e:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <KDB+0x2>
     e62:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <KDB+0x3>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	82 0f       	add	r24, r18
     e6c:	93 1f       	adc	r25, r19
     e6e:	fc 01       	movw	r30, r24
     e70:	40 81       	ld	r20, Z
     e72:	51 81       	ldd	r21, Z+1	; 0x01
     e74:	fa 01       	movw	r30, r20
     e76:	87 81       	ldd	r24, Z+7	; 0x07
     e78:	90 85       	ldd	r25, Z+8	; 0x08
     e7a:	02 97       	sbiw	r24, 0x02	; 2
     e7c:	68 f4       	brcc	.+26     	; 0xe98 <ActivateTask+0x4c>
     e7e:	cf b7       	in	r28, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	63 e6       	ldi	r22, 0x63	; 99
     e88:	71 e0       	ldi	r23, 0x01	; 1
     e8a:	81 e5       	ldi	r24, 0x51	; 81
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	0e 94 90 08 	call	0x1120	; 0x1120 <osEE_scheduler_task_activated>
     e92:	cf bf       	out	0x3f, r28	; 63
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	fb cf       	rjmp	.-10     	; 0xe94 <ActivateTask+0x48>

00000e9e <TerminateTask>:
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
     e9e:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <CDB>
     ea2:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <CDB+0x1>
     ea6:	01 90       	ld	r0, Z+
     ea8:	f0 81       	ld	r31, Z
     eaa:	e0 2d       	mov	r30, r0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     eac:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     eae:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
     eb0:	6e e5       	ldi	r22, 0x5E	; 94
     eb2:	77 e0       	ldi	r23, 0x07	; 7
     eb4:	82 81       	ldd	r24, Z+2	; 0x02
     eb6:	93 81       	ldd	r25, Z+3	; 0x03
     eb8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <osEE_hal_terminate_ctx>

00000ebc <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <osEE_scheduler_task_end+0x6>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
     ec6:	ae 01       	movw	r20, r28
     ec8:	4f 5f       	subi	r20, 0xFF	; 255
     eca:	5f 4f       	sbci	r21, 0xFF	; 255
     ecc:	63 e6       	ldi	r22, 0x63	; 99
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	81 e5       	ldi	r24, 0x51	; 81
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
     ed8:	bc 01       	movw	r22, r24
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	0e 94 31 0a 	call	0x1462	; 0x1462 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <osEE_scheduler_task_wrapper_restore>:
    p_ccb->p_lock_to_be_released = NULL;
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
     eec:	08 95       	ret

00000eee <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
     eee:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
     ef0:	ec 81       	ldd	r30, Y+4	; 0x04
     ef2:	fd 81       	ldd	r31, Y+5	; 0x05
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_prio < OSEE_ISR_ALL_PRIO) {
     ef4:	81 81       	ldd	r24, Z+1	; 0x01
     ef6:	8f 3f       	cpi	r24, 0xFF	; 255
     ef8:	09 f0       	breq	.+2      	; 0xefc <osEE_scheduler_task_wrapper_run+0xe>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
     efa:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
     efc:	e9 85       	ldd	r30, Y+9	; 0x09
     efe:	fa 85       	ldd	r31, Y+10	; 0x0a
     f00:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     f02:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     f04:	f8 94       	cli
     f06:	6e e5       	ldi	r22, 0x5E	; 94
     f08:	77 e0       	ldi	r23, 0x07	; 7
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	9b 81       	ldd	r25, Y+3	; 0x03
     f0e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <osEE_hal_terminate_ctx>

00000f12 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     f1a:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     f1c:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
     f1e:	63 e6       	ldi	r22, 0x63	; 99
     f20:	71 e0       	ldi	r23, 0x01	; 1
     f22:	81 e5       	ldi	r24, 0x51	; 81
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	0e 94 6e 09 	call	0x12dc	; 0x12dc <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
     f2a:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
     f2c:	00 91 63 01 	lds	r16, 0x0163	; 0x800163 <CDB>
     f30:	10 91 64 01 	lds	r17, 0x0164	; 0x800164 <CDB+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
     f34:	c0 91 65 01 	lds	r28, 0x0165	; 0x800165 <CDB+0x2>
     f38:	d0 91 66 01 	lds	r29, 0x0166	; 0x800166 <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
     f3c:	f8 01       	movw	r30, r16
     f3e:	80 85       	ldd	r24, Z+8	; 0x08
     f40:	91 85       	ldd	r25, Z+9	; 0x09
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	91 05       	cpc	r25, r1
     f46:	51 f0       	breq	.+20     	; 0xf5c <osEE_idle_hook_wrapper+0x4a>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
     f48:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <CDB+0x4>
     f4c:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <CDB+0x5>
}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
     f58:	0c 94 47 0a 	jmp	0x148e	; 0x148e <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
     f5c:	20 97       	sbiw	r28, 0x00	; 0
     f5e:	89 f3       	breq	.-30     	; 0xf42 <osEE_idle_hook_wrapper+0x30>
      p_idle_hook();
     f60:	fe 01       	movw	r30, r28
     f62:	09 95       	icall
     f64:	eb cf       	rjmp	.-42     	; 0xf3c <osEE_idle_hook_wrapper+0x2a>

00000f66 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
     f6e:	ec 01       	movw	r28, r24
     f70:	a8 81       	ld	r26, Y
     f72:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
     f74:	eb 01       	movw	r28, r22
     f76:	e8 81       	ld	r30, Y
     f78:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
     f7a:	16 96       	adiw	r26, 0x06	; 6
     f7c:	cd 91       	ld	r28, X+
     f7e:	dc 91       	ld	r29, X
     f80:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
     f82:	20 97       	sbiw	r28, 0x00	; 0
     f84:	c1 f1       	breq	.+112    	; 0xff6 <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
     f8a:	30 97       	sbiw	r30, 0x00	; 0
     f8c:	09 f4       	brne	.+2      	; 0xf90 <osEE_scheduler_core_rq_preempt_stk+0x2a>
     f8e:	3f c0       	rjmp	.+126    	; 0x100e <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
     f90:	ec 01       	movw	r28, r24
     f92:	0c 81       	ldd	r16, Y+4	; 0x04
     f94:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
     f96:	22 81       	ldd	r18, Z+2	; 0x02
     f98:	33 81       	ldd	r19, Z+3	; 0x03
     f9a:	e9 01       	movw	r28, r18
     f9c:	4c 81       	ldd	r20, Y+4	; 0x04
     f9e:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
     fa0:	e8 01       	movw	r28, r16
     fa2:	39 81       	ldd	r19, Y+1	; 0x01
     fa4:	ea 01       	movw	r28, r20
     fa6:	29 81       	ldd	r18, Y+1	; 0x01
     fa8:	32 17       	cp	r19, r18
     faa:	88 f5       	brcc	.+98     	; 0x100e <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
     fac:	22 e0       	ldi	r18, 0x02	; 2
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	e8 01       	movw	r28, r16
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
     fb2:	3b 83       	std	Y+3, r19	; 0x03
     fb4:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
     fb6:	20 81       	ld	r18, Z
     fb8:	31 81       	ldd	r19, Z+1	; 0x01
     fba:	eb 01       	movw	r28, r22
     fbc:	39 83       	std	Y+1, r19	; 0x01
     fbe:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
     fc0:	c2 81       	ldd	r28, Z+2	; 0x02
     fc2:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
     fc4:	2c 81       	ldd	r18, Y+4	; 0x04
     fc6:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
     fc8:	16 96       	adiw	r26, 0x06	; 6
     fca:	4d 91       	ld	r20, X+
     fcc:	5c 91       	ld	r21, X
     fce:	17 97       	sbiw	r26, 0x07	; 7
     fd0:	51 83       	std	Z+1, r21	; 0x01
     fd2:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
     fd4:	17 96       	adiw	r26, 0x07	; 7
     fd6:	fc 93       	st	X, r31
     fd8:	ee 93       	st	-X, r30
     fda:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
     fdc:	cd 93       	st	X+, r28
     fde:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
     fe0:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
     fe2:	f9 01       	movw	r30, r18
     fe4:	51 81       	ldd	r21, Z+1	; 0x01
     fe6:	54 17       	cp	r21, r20
     fe8:	08 f4       	brcc	.+2      	; 0xfec <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
     fea:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
     ff6:	30 97       	sbiw	r30, 0x00	; 0
     ff8:	51 f0       	breq	.+20     	; 0x100e <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
     ffa:	ec 01       	movw	r28, r24
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    1000:	ec 01       	movw	r28, r24
    1002:	4c 81       	ldd	r20, Y+4	; 0x04
    1004:	5d 81       	ldd	r21, Y+5	; 0x05
    1006:	22 e0       	ldi	r18, 0x02	; 2
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	ea 01       	movw	r28, r20
    100c:	d2 cf       	rjmp	.-92     	; 0xfb2 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	80 e0       	ldi	r24, 0x00	; 0
    p_ret_sn  = NULL;
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
    1012:	ec cf       	rjmp	.-40     	; 0xfec <osEE_scheduler_core_rq_preempt_stk+0x86>

00001014 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    1014:	cf 92       	push	r12
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    1024:	eb 01       	movw	r28, r22
    1026:	aa 81       	ldd	r26, Y+2	; 0x02
    1028:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    102a:	14 96       	adiw	r26, 0x04	; 4
    102c:	ed 91       	ld	r30, X+
    102e:	fc 91       	ld	r31, X
    1030:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1032:	41 15       	cp	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	01 f1       	breq	.+64     	; 0x1078 <osEE_sn_priority_insert+0x64>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    1038:	22 81       	ldd	r18, Z+2	; 0x02
    103a:	33 81       	ldd	r19, Z+3	; 0x03
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	d8 f0       	brcs	.+54     	; 0x1078 <osEE_sn_priority_insert+0x64>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1042:	1b 96       	adiw	r26, 0x0b	; 11
    1044:	2c 91       	ld	r18, X
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    1046:	dc 01       	movw	r26, r24
    1048:	ed 91       	ld	r30, X+
    104a:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    1050:	30 97       	sbiw	r30, 0x00	; 0
    1052:	a1 f4       	brne	.+40     	; 0x107c <osEE_sn_priority_insert+0x68>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    1054:	10 97       	sbiw	r26, 0x00	; 0
    1056:	69 f1       	breq	.+90     	; 0x10b2 <osEE_sn_priority_insert+0x9e>
    p_prev->p_next = p_sn_new;
    1058:	6d 93       	st	X+, r22
    105a:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
    1060:	eb 01       	movw	r28, r22
    1062:	f9 83       	std	Y+1, r31	; 0x01
    1064:	e8 83       	st	Y, r30

  return head_changed;
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1078:	21 81       	ldd	r18, Z+1	; 0x01
    107a:	e5 cf       	rjmp	.-54     	; 0x1046 <osEE_sn_priority_insert+0x32>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    107c:	02 81       	ldd	r16, Z+2	; 0x02
    107e:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    1080:	e8 01       	movw	r28, r16
    1082:	cc 80       	ldd	r12, Y+4	; 0x04
    1084:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    1086:	41 15       	cp	r20, r1
    1088:	51 05       	cpc	r21, r1
    108a:	81 f0       	breq	.+32     	; 0x10ac <osEE_sn_priority_insert+0x98>
    108c:	e6 01       	movw	r28, r12
    108e:	ea 80       	ldd	r14, Y+2	; 0x02
    1090:	fb 80       	ldd	r15, Y+3	; 0x03
    1092:	d2 e0       	ldi	r29, 0x02	; 2
    1094:	ed 16       	cp	r14, r29
    1096:	f1 04       	cpc	r15, r1
    1098:	48 f0       	brcs	.+18     	; 0x10ac <osEE_sn_priority_insert+0x98>
      prio_to_check = p_cur_tdb->ready_prio;
    109a:	e8 01       	movw	r28, r16
    109c:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
    109e:	32 17       	cp	r19, r18
    10a0:	c8 f2       	brcs	.-78     	; 0x1054 <osEE_sn_priority_insert+0x40>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    10a2:	df 01       	movw	r26, r30
    10a4:	01 90       	ld	r0, Z+
    10a6:	f0 81       	ld	r31, Z
    10a8:	e0 2d       	mov	r30, r0
    10aa:	d2 cf       	rjmp	.-92     	; 0x1050 <osEE_sn_priority_insert+0x3c>
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    10ac:	e6 01       	movw	r28, r12
    10ae:	39 81       	ldd	r19, Y+1	; 0x01
    10b0:	f6 cf       	rjmp	.-20     	; 0x109e <osEE_sn_priority_insert+0x8a>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    10b2:	dc 01       	movw	r26, r24
    10b4:	6d 93       	st	X+, r22
    10b6:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	d1 cf       	rjmp	.-94     	; 0x1060 <osEE_sn_priority_insert+0x4c>

000010be <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    10be:	fb 01       	movw	r30, r22
    10c0:	53 83       	std	Z+3, r21	; 0x03
    10c2:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    10c4:	41 e0       	ldi	r20, 0x01	; 1
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <osEE_sn_priority_insert>

000010cc <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    10da:	fc 01       	movw	r30, r24
    10dc:	c0 81       	ld	r28, Z
    10de:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    10e0:	ee 80       	ldd	r14, Y+6	; 0x06
    10e2:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    10e4:	f7 01       	movw	r30, r14
    10e6:	80 81       	ld	r24, Z
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	9f 83       	std	Y+7, r25	; 0x07
    10ec:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    10ee:	c8 01       	movw	r24, r16
    10f0:	0e 94 b3 07 	call	0xf66	; 0xf66 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    10f4:	89 2b       	or	r24, r25
    10f6:	41 f4       	brne	.+16     	; 0x1108 <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    10f8:	ee 81       	ldd	r30, Y+6	; 0x06
    10fa:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    10fc:	30 97       	sbiw	r30, 0x00	; 0
    10fe:	61 f0       	breq	.+24     	; 0x1118 <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
    1104:	99 83       	std	Y+1, r25	; 0x01
    1106:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    1108:	c7 01       	movw	r24, r14
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	08 95       	ret
      if ( p_curr_stk_sn != NULL ) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    1118:	f8 01       	movw	r30, r16
    111a:	84 81       	ldd	r24, Z+4	; 0x04
    111c:	95 81       	ldd	r25, Z+5	; 0x05
    111e:	f2 cf       	rjmp	.-28     	; 0x1104 <osEE_scheduler_core_pop_running+0x38>

00001120 <osEE_scheduler_task_activated>:
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	da 01       	movw	r26, r20
    1132:	14 96       	adiw	r26, 0x04	; 4
    1134:	cd 90       	ld	r12, X+
    1136:	dc 90       	ld	r13, X
    1138:	15 97       	sbiw	r26, 0x05	; 5
    113a:	e6 01       	movw	r28, r12
    113c:	98 81       	ld	r25, Y
    113e:	1d 96       	adiw	r26, 0x0d	; 13
    1140:	8c 91       	ld	r24, X
    1142:	98 17       	cp	r25, r24
    1144:	08 f0       	brcs	.+2      	; 0x1148 <osEE_scheduler_task_activated+0x28>
    1146:	4f c0       	rjmp	.+158    	; 0x11e6 <osEE_scheduler_task_activated+0xc6>
    1148:	db 01       	movw	r26, r22
    114a:	ed 91       	ld	r30, X+
    114c:	fc 91       	ld	r31, X
    114e:	00 81       	ld	r16, Z
    1150:	11 81       	ldd	r17, Z+1	; 0x01
    1152:	e8 01       	movw	r28, r16
    1154:	ec 80       	ldd	r14, Y+4	; 0x04
    1156:	fd 80       	ldd	r15, Y+5	; 0x05
    1158:	9f 5f       	subi	r25, 0xFF	; 255
    115a:	d6 01       	movw	r26, r12
    115c:	9c 93       	st	X, r25
    115e:	a4 81       	ldd	r26, Z+4	; 0x04
    1160:	b5 81       	ldd	r27, Z+5	; 0x05
    1162:	6d 91       	ld	r22, X+
    1164:	7c 91       	ld	r23, X
    1166:	11 97       	sbiw	r26, 0x01	; 1
    1168:	23 2b       	or	r18, r19
    116a:	49 f1       	breq	.+82     	; 0x11be <osEE_scheduler_task_activated+0x9e>
    116c:	e7 01       	movw	r28, r14
    116e:	99 81       	ldd	r25, Y+1	; 0x01
    1170:	e6 01       	movw	r28, r12
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	98 17       	cp	r25, r24
    1176:	18 f5       	brcc	.+70     	; 0x11be <osEE_scheduler_task_activated+0x9e>
    1178:	75 83       	std	Z+5, r23	; 0x05
    117a:	64 83       	std	Z+4, r22	; 0x04
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	e7 01       	movw	r28, r14
    1182:	9b 83       	std	Y+3, r25	; 0x03
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	13 96       	adiw	r26, 0x03	; 3
    1188:	5c 93       	st	X, r21
    118a:	4e 93       	st	-X, r20
    118c:	12 97       	sbiw	r26, 0x02	; 2
    118e:	86 81       	ldd	r24, Z+6	; 0x06
    1190:	97 81       	ldd	r25, Z+7	; 0x07
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	9c 93       	st	X, r25
    1196:	8e 93       	st	-X, r24
    1198:	b7 83       	std	Z+7, r27	; 0x07
    119a:	a6 83       	std	Z+6, r26	; 0x06
    119c:	51 83       	std	Z+1, r21	; 0x01
    119e:	40 83       	st	Z, r20
    11a0:	ba 01       	movw	r22, r20
    11a2:	c8 01       	movw	r24, r16
    11a4:	0e 94 16 0a 	call	0x142c	; 0x142c <osEE_change_context_from_running>
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	08 95       	ret
    11be:	e6 01       	movw	r28, r12
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	9b 81       	ldd	r25, Y+3	; 0x03
    11c4:	89 2b       	or	r24, r25
    11c6:	21 f4       	brne	.+8      	; 0x11d0 <osEE_scheduler_task_activated+0xb0>
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	9b 83       	std	Y+3, r25	; 0x03
    11ce:	8a 83       	std	Y+2, r24	; 0x02
    11d0:	75 83       	std	Z+5, r23	; 0x05
    11d2:	64 83       	std	Z+4, r22	; 0x04
    11d4:	11 96       	adiw	r26, 0x01	; 1
    11d6:	1c 92       	st	X, r1
    11d8:	1e 92       	st	-X, r1
    11da:	bd 01       	movw	r22, r26
    11dc:	cf 01       	movw	r24, r30
    11de:	02 96       	adiw	r24, 0x02	; 2
    11e0:	0e 94 5f 08 	call	0x10be	; 0x10be <osEE_scheduler_rq_insert>
    11e4:	e1 cf       	rjmp	.-62     	; 0x11a8 <osEE_scheduler_task_activated+0x88>
    11e6:	84 e0       	ldi	r24, 0x04	; 4
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	e0 cf       	rjmp	.-64     	; 0x11ac <osEE_scheduler_task_activated+0x8c>

000011ec <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    11ec:	af 92       	push	r10
    11ee:	bf 92       	push	r11
    11f0:	cf 92       	push	r12
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1202:	db 01       	movw	r26, r22
    1204:	cd 91       	ld	r28, X+
    1206:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    1208:	fe 01       	movw	r30, r28
    120a:	01 91       	ld	r16, Z+
    120c:	11 91       	ld	r17, Z+
    120e:	7f 01       	movw	r14, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    1210:	d8 01       	movw	r26, r16
    1212:	14 96       	adiw	r26, 0x04	; 4
    1214:	cd 90       	ld	r12, X+
    1216:	dc 90       	ld	r13, X

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    1218:	fa 01       	movw	r30, r20
    121a:	11 83       	std	Z+1, r17	; 0x01
    121c:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    121e:	d6 01       	movw	r26, r12
    1220:	12 96       	adiw	r26, 0x02	; 2
    1222:	8d 91       	ld	r24, X+
    1224:	9c 91       	ld	r25, X
    1226:	04 97       	sbiw	r24, 0x04	; 4
    1228:	a9 f5       	brne	.+106    	; 0x1294 <osEE_scheduler_task_terminated+0xa8>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    122a:	b7 01       	movw	r22, r14
    122c:	c5 01       	movw	r24, r10
    122e:	0e 94 66 08 	call	0x10cc	; 0x10cc <osEE_scheduler_core_pop_running>
    1232:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    1234:	88 81       	ld	r24, Y
    1236:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    1238:	08 17       	cp	r16, r24
    123a:	19 07       	cpc	r17, r25
    123c:	31 f1       	breq	.+76     	; 0x128a <osEE_scheduler_task_terminated+0x9e>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    123e:	d8 01       	movw	r26, r16
    1240:	14 96       	adiw	r26, 0x04	; 4
    1242:	ed 91       	ld	r30, X+
    1244:	fc 91       	ld	r31, X
    1246:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    1248:	1b 96       	adiw	r26, 0x0b	; 11
    124a:	2c 91       	ld	r18, X
    124c:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    124e:	20 81       	ld	r18, Z
    1250:	21 50       	subi	r18, 0x01	; 1
    1252:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    1254:	21 11       	cpse	r18, r1
    1256:	14 c0       	rjmp	.+40     	; 0x1280 <osEE_scheduler_task_terminated+0x94>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    1258:	13 82       	std	Z+3, r1	; 0x03
    125a:	12 82       	std	Z+2, r1	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    125c:	2c 81       	ldd	r18, Y+4	; 0x04
    125e:	3d 81       	ldd	r19, Y+5	; 0x05
    1260:	da 01       	movw	r26, r20
    1262:	2d 93       	st	X+, r18
    1264:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    1266:	5d 83       	std	Y+5, r21	; 0x05
    1268:	4c 83       	std	Y+4, r20	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	bf 90       	pop	r11
    127c:	af 90       	pop	r10
    127e:	08 95       	ret
  } else {
    p_tcb->status = OSEE_TASK_READY;
    1280:	21 e0       	ldi	r18, 0x01	; 1
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	33 83       	std	Z+3, r19	; 0x03
    1286:	22 83       	std	Z+2, r18	; 0x02
    1288:	e9 cf       	rjmp	.-46     	; 0x125c <osEE_scheduler_task_terminated+0x70>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    128a:	f6 01       	movw	r30, r12
    128c:	20 81       	ld	r18, Z
    128e:	21 50       	subi	r18, 0x01	; 1
    1290:	20 83       	st	Z, r18
    1292:	e4 cf       	rjmp	.-56     	; 0x125c <osEE_scheduler_task_terminated+0x70>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    1294:	6e 81       	ldd	r22, Y+6	; 0x06
    1296:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    1298:	fb 01       	movw	r30, r22
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	9f 83       	std	Y+7, r25	; 0x07
    12a0:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    12a2:	d8 01       	movw	r26, r16
    12a4:	1b 96       	adiw	r26, 0x0b	; 11
    12a6:	8c 91       	ld	r24, X
    12a8:	f6 01       	movw	r30, r12
    12aa:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	93 83       	std	Z+3, r25	; 0x03
    12b2:	82 83       	std	Z+2, r24	; 0x02
      if (p_tcb_term->current_num_of_act == 1U) {
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    12b4:	a8 01       	movw	r20, r16
    12b6:	c7 01       	movw	r24, r14
    12b8:	0e 94 5f 08 	call	0x10be	; 0x10be <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    12bc:	b7 01       	movw	r22, r14
    12be:	c5 01       	movw	r24, r10
    12c0:	0e 94 b3 07 	call	0xf66	; 0xf66 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    12c4:	89 2b       	or	r24, r25
    12c6:	39 f4       	brne	.+14     	; 0x12d6 <osEE_scheduler_task_terminated+0xea>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    12c8:	ee 81       	ldd	r30, Y+6	; 0x06
    12ca:	ff 81       	ldd	r31, Y+7	; 0x07
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    12d0:	99 83       	std	Y+1, r25	; 0x01
    12d2:	88 83       	st	Y, r24
    12d4:	ca cf       	rjmp	.-108    	; 0x126a <osEE_scheduler_task_terminated+0x7e>
        } else {
          p_tdb_to = p_ccb->p_curr;
    12d6:	88 81       	ld	r24, Y
    12d8:	99 81       	ldd	r25, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    12da:	c7 cf       	rjmp	.-114    	; 0x126a <osEE_scheduler_task_terminated+0x7e>

000012dc <osEE_scheduler_task_preemption_point>:
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb
)
{
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	cb 01       	movw	r24, r22
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    12e2:	fb 01       	movw	r30, r22
    12e4:	c0 81       	ld	r28, Z
    12e6:	d1 81       	ldd	r29, Z+1	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    12e8:	be 01       	movw	r22, r28
    12ea:	6e 5f       	subi	r22, 0xFE	; 254
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	0e 94 b3 07 	call	0xf66	; 0xf66 <osEE_scheduler_core_rq_preempt_stk>

  if (p_prev != NULL) {
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	49 f0       	breq	.+18     	; 0x1308 <osEE_scheduler_task_preemption_point+0x2c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_prev, p_curr);
    12f6:	68 81       	ld	r22, Y
    12f8:	79 81       	ldd	r23, Y+1	; 0x01
    12fa:	0e 94 16 0a 	call	0x142c	; 0x142c <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
  }
  return is_preemption;
}
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret
    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	80 e0       	ldi	r24, 0x00	; 0
  }
  return is_preemption;
    130c:	fa cf       	rjmp	.-12     	; 0x1302 <osEE_scheduler_task_preemption_point+0x26>

0000130e <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb
)
{
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb  = p_cdb->p_ccb;
    1312:	db 01       	movw	r26, r22
    1314:	ed 91       	ld	r30, X+
    1316:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
    131c:	26 81       	ldd	r18, Z+6	; 0x06
    131e:	37 81       	ldd	r19, Z+7	; 0x07

  p_preempted->p_tcb->status    = OSEE_TASK_READY_STACKED;
    1320:	ec 01       	movw	r28, r24
    1322:	ac 81       	ldd	r26, Y+4	; 0x04
    1324:	bd 81       	ldd	r27, Y+5	; 0x05
    1326:	62 e0       	ldi	r22, 0x02	; 2
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	13 96       	adiw	r26, 0x03	; 3
    132c:	7c 93       	st	X, r23
    132e:	6e 93       	st	-X, r22
    1330:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_curr                 = p_tdb;
    1332:	51 83       	std	Z+1, r21	; 0x01
    1334:	40 83       	st	Z, r20
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    1336:	a4 81       	ldd	r26, Z+4	; 0x04
    1338:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    133a:	6d 91       	ld	r22, X+
    133c:	7c 91       	ld	r23, X
    133e:	11 97       	sbiw	r26, 0x01	; 1
    1340:	75 83       	std	Z+5, r23	; 0x05
    1342:	64 83       	std	Z+4, r22	; 0x04

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  /* Alloc the SN for the new Running TASK */
  p_ccb->p_stk_sn               = osEE_sn_alloc(&p_ccb->p_free_sn);
    1344:	b7 83       	std	Z+7, r27	; 0x07
    1346:	a6 83       	std	Z+6, r26	; 0x06
  osEE_unlock_core(p_cdb);

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
    1348:	13 96       	adiw	r26, 0x03	; 3
    134a:	5c 93       	st	X, r21
    134c:	4e 93       	st	-X, r20
    134e:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
    1350:	2d 93       	st	X+, r18
    1352:	3c 93       	st	X, r19

  osEE_change_context_from_running(p_preempted, p_tdb);
    1354:	ba 01       	movw	r22, r20
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;

  osEE_change_context_from_running(p_preempted, p_tdb);
    135a:	0c 94 16 0a 	jmp	0x142c	; 0x142c <osEE_change_context_from_running>

0000135e <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
    135e:	db 01       	movw	r26, r22
    1360:	ed 91       	ld	r30, X+
    1362:	fc 91       	ld	r31, X
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    1364:	a4 81       	ldd	r26, Z+4	; 0x04
    1366:	b5 81       	ldd	r27, Z+5	; 0x05
    1368:	ab 2b       	or	r26, r27
    136a:	39 f4       	brne	.+14     	; 0x137a <osEE_alarm_set_rel+0x1c>
    ev = E_OS_STATE;
  } else {
    p_alarm_cb->cycle = cycle;
    136c:	37 83       	std	Z+7, r19	; 0x07
    136e:	26 83       	std	Z+6, r18	; 0x06

    osEE_counter_insert_rel_trigger(
    1370:	0e 94 ad 0a 	call	0x155a	; 0x155a <osEE_counter_insert_rel_trigger>
      p_counter_db, p_trigger_db, increment
    );
    ev = E_OK;
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	08 95       	ret
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    ev = E_OS_STATE;
    137a:	87 e0       	ldi	r24, 0x07	; 7
    137c:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
    137e:	08 95       	ret

00001380 <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    1380:	f8 94       	cli
    1382:	ff cf       	rjmp	.-2      	; 0x1382 <__vector_default+0x2>

00001384 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    1384:	e0 e8       	ldi	r30, 0x80	; 128
}
    1386:	08 95       	ret

00001388 <__vector_1>:

#else  /* OSEE_API_DYNAMIC */

/* INT0 interrupt vector */
#if (defined(OSEE_AVR8_INT0_ISR_TID)) && (OSEE_AVR8_INT0_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(INT0_vect, OSEE_AVR8_INT0_ISR_TID)
    1388:	8f 93       	push	r24
    138a:	9f 93       	push	r25
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <osEE_avr8_isr2_stub>
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	18 95       	reti

00001398 <__vector_11>:
OSEE_AVR8_ISR_NOT_DEFINED(TIMER1_CAPT_vect)
#endif /* OSEE_AVR8_TIMER1_CAPT_ISR */

/* TIMER1_COMPA interrupt vector */
#if (defined(OSEE_AVR8_TIMER1_COMPA_ISR_TID)) && (OSEE_AVR8_TIMER1_COMPA_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(TIMER1_COMPA_vect, OSEE_AVR8_TIMER1_COMPA_ISR_TID)
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <osEE_avr8_isr2_stub>
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	18 95       	reti

000013a8 <osEE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void OSEE_COMPILER_KEEP OSEE_NAKED osEE_avr8_isr2_stub(TaskType t)
{

  OSEE_AVR8_ISR_PREINSTUB();
    13a8:	1f 92       	push	r1
    13aa:	0f 92       	push	r0
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	2f 93       	push	r18
    13b4:	3f 93       	push	r19
    13b6:	4f 93       	push	r20
    13b8:	5f 93       	push	r21
    13ba:	6f 93       	push	r22
    13bc:	7f 93       	push	r23
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
{
  VAR(StatusType, AUTOMATIC) ret_val  = E_OK;
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
    13c6:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <KDB+0x2>
    13ca:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <KDB+0x3>
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	e8 0f       	add	r30, r24
    13d6:	f9 1f       	adc	r31, r25
    13d8:	40 81       	ld	r20, Z
    13da:	51 81       	ldd	r21, Z+1	; 0x01

  /* Mark the TASK as Activated */
  ++p_act_tdb->p_tcb->current_num_of_act;
    13dc:	da 01       	movw	r26, r20
    13de:	14 96       	adiw	r26, 0x04	; 4
    13e0:	ed 91       	ld	r30, X+
    13e2:	fc 91       	ld	r31, X
    13e4:	80 81       	ld	r24, Z
    13e6:	8f 5f       	subi	r24, 0xFF	; 255
    13e8:	80 83       	st	Z, r24

  osEE_scheduler_task_set_running(p_kdb, p_cdb, p_act_tdb);
    13ea:	63 e6       	ldi	r22, 0x63	; 99
    13ec:	71 e0       	ldi	r23, 0x01	; 1
    13ee:	81 e5       	ldi	r24, 0x51	; 81
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	0e 94 87 09 	call	0x130e	; 0x130e <osEE_scheduler_task_set_running>
#endif /* __ATXMEGA__ */

  /* Activate ISR2 */
  osEE_activate_isr2(t);

  OSEE_AVR8_ISR_POSTINSTUB();
    13f6:	ff 91       	pop	r31
    13f8:	ef 91       	pop	r30
    13fa:	bf 91       	pop	r27
    13fc:	af 91       	pop	r26
    13fe:	7f 91       	pop	r23
    1400:	6f 91       	pop	r22
    1402:	5f 91       	pop	r21
    1404:	4f 91       	pop	r20
    1406:	3f 91       	pop	r19
    1408:	2f 91       	pop	r18
    140a:	0f 90       	pop	r0
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	0f 90       	pop	r0
    1410:	1f 90       	pop	r1

  OSEE_RETURN();
    1412:	08 95       	ret

00001414 <osEE_avr8_system_timer_init>:

#if (defined(OSEE_SYSTEM_TIMER_DEVICE))
#if (OSEE_SYSTEM_TIMER_DEVICE == OSEE_AVR8_TIMER1_COMPA)

void osEE_avr8_system_timer_init(void) {
  OsEE_atmega_startTimer1(OSTICKDURATION / OSEE_KILO);
    1414:	68 ee       	ldi	r22, 0xE8	; 232
    1416:	73 e0       	ldi	r23, 0x03	; 3
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <OsEE_atmega_startTimer1>

00001420 <osEE_avr8_system_timer_handler>:
}

ISR2(osEE_avr8_system_timer_handler) {
  OsEE_CDB * p_cdb = osEE_get_curr_core();
  osEE_counter_increment(p_cdb->p_sys_counter_db);
    1420:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <CDB+0x6>
    1424:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <CDB+0x7>
    1428:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <osEE_counter_increment>

0000142c <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    142c:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    142e:	a4 81       	ldd	r26, Z+4	; 0x04
    1430:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    1432:	12 96       	adiw	r26, 0x02	; 2
    1434:	2d 91       	ld	r18, X+
    1436:	3c 91       	ld	r19, X
    1438:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    143a:	44 e0       	ldi	r20, 0x04	; 4
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	13 96       	adiw	r26, 0x03	; 3
    1440:	5c 93       	st	X, r21
    1442:	4e 93       	st	-X, r20
    1444:	12 97       	sbiw	r26, 0x02	; 2
    1446:	dc 01       	movw	r26, r24
    1448:	12 96       	adiw	r26, 0x02	; 2
    144a:	4d 91       	ld	r20, X+
    144c:	5c 91       	ld	r21, X
    144e:	62 81       	ldd	r22, Z+2	; 0x02
    1450:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    1452:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	11 f4       	brne	.+4      	; 0x145e <osEE_change_context_from_running+0x32>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    145a:	0c 94 88 00 	jmp	0x110	; 0x110 <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    145e:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>

00001462 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    1462:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    1464:	db 01       	movw	r26, r22
    1466:	14 96       	adiw	r26, 0x04	; 4
    1468:	ed 91       	ld	r30, X+
    146a:	fc 91       	ld	r31, X
    146c:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    146e:	22 81       	ldd	r18, Z+2	; 0x02
    1470:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    1472:	44 e0       	ldi	r20, 0x04	; 4
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	53 83       	std	Z+3, r21	; 0x03
    1478:	42 83       	std	Z+2, r20	; 0x02
    147a:	12 96       	adiw	r26, 0x02	; 2
    147c:	6d 91       	ld	r22, X+
    147e:	7c 91       	ld	r23, X

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	11 f4       	brne	.+4      	; 0x148a <osEE_change_context_from_task_end+0x28>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    1486:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    148a:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

0000148e <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    148e:	dc 01       	movw	r26, r24
    1490:	12 96       	adiw	r26, 0x02	; 2
    1492:	6d 91       	ld	r22, X+
    1494:	7c 91       	ld	r23, X
    1496:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    1498:	ed 91       	ld	r30, X+
    149a:	fc 91       	ld	r31, X
    149c:	40 81       	ld	r20, Z
    149e:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    14a0:	db 01       	movw	r26, r22
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    14a6:	22 89       	ldd	r18, Z+18	; 0x12
    14a8:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    14aa:	21 15       	cp	r18, r1
    14ac:	31 05       	cpc	r19, r1
    14ae:	19 f0       	breq	.+6      	; 0x14b6 <osEE_idle_task_terminate+0x28>
    14b0:	42 17       	cp	r20, r18
    14b2:	53 07       	cpc	r21, r19
    14b4:	29 f4       	brne	.+10     	; 0x14c0 <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    14b6:	db 01       	movw	r26, r22
    14b8:	ed 93       	st	X+, r30
    14ba:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    14bc:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
    14c0:	f9 01       	movw	r30, r18
    14c2:	f1 cf       	rjmp	.-30     	; 0x14a6 <osEE_idle_task_terminate+0x18>

000014c4 <osEE_counter_insert_abs_trigger>:
    }
  }

  /* Turn Off the Trigger */
  p_trigger_cb->active = OSEE_FALSE;
}
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	dc 01       	movw	r26, r24
    14d2:	8d 91       	ld	r24, X+
    14d4:	9c 91       	ld	r25, X
    14d6:	dc 01       	movw	r26, r24
    14d8:	ed 91       	ld	r30, X+
    14da:	fc 91       	ld	r31, X
    14dc:	11 97       	sbiw	r26, 0x01	; 1
    14de:	12 96       	adiw	r26, 0x02	; 2
    14e0:	0d 91       	ld	r16, X+
    14e2:	1c 91       	ld	r17, X
    14e4:	db 01       	movw	r26, r22
    14e6:	cd 91       	ld	r28, X+
    14e8:	dc 91       	ld	r29, X
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	3d 83       	std	Y+5, r19	; 0x05
    14f0:	2c 83       	std	Y+4, r18	; 0x04
    14f2:	5b 83       	std	Y+3, r21	; 0x03
    14f4:	4a 83       	std	Y+2, r20	; 0x02
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 97       	sbiw	r30, 0x00	; 0
    14fc:	e1 f0       	breq	.+56     	; 0x1536 <osEE_counter_insert_abs_trigger+0x72>
    14fe:	a0 81       	ld	r26, Z
    1500:	b1 81       	ldd	r27, Z+1	; 0x01
    1502:	12 96       	adiw	r26, 0x02	; 2
    1504:	ed 90       	ld	r14, X+
    1506:	fc 90       	ld	r15, X
    1508:	13 97       	sbiw	r26, 0x03	; 3
    150a:	0e 15       	cp	r16, r14
    150c:	1f 05       	cpc	r17, r15
    150e:	68 f4       	brcc	.+26     	; 0x152a <osEE_counter_insert_abs_trigger+0x66>
    1510:	4e 15       	cp	r20, r14
    1512:	5f 05       	cpc	r21, r15
    1514:	18 f4       	brcc	.+6      	; 0x151c <osEE_counter_insert_abs_trigger+0x58>
    1516:	04 17       	cp	r16, r20
    1518:	15 07       	cpc	r17, r21
    151a:	68 f0       	brcs	.+26     	; 0x1536 <osEE_counter_insert_abs_trigger+0x72>
    151c:	fc 90       	ld	r15, X
    151e:	11 96       	adiw	r26, 0x01	; 1
    1520:	ac 91       	ld	r26, X
    1522:	9f 01       	movw	r18, r30
    1524:	ef 2d       	mov	r30, r15
    1526:	fa 2f       	mov	r31, r26
    1528:	e8 cf       	rjmp	.-48     	; 0x14fa <osEE_counter_insert_abs_trigger+0x36>
    152a:	04 17       	cp	r16, r20
    152c:	15 07       	cpc	r17, r21
    152e:	18 f0       	brcs	.+6      	; 0x1536 <osEE_counter_insert_abs_trigger+0x72>
    1530:	4e 15       	cp	r20, r14
    1532:	5f 05       	cpc	r21, r15
    1534:	98 f7       	brcc	.-26     	; 0x151c <osEE_counter_insert_abs_trigger+0x58>
    1536:	21 15       	cp	r18, r1
    1538:	31 05       	cpc	r19, r1
    153a:	19 f0       	breq	.+6      	; 0x1542 <osEE_counter_insert_abs_trigger+0x7e>
    153c:	d9 01       	movw	r26, r18
    153e:	8d 91       	ld	r24, X+
    1540:	9c 91       	ld	r25, X
    1542:	dc 01       	movw	r26, r24
    1544:	6d 93       	st	X+, r22
    1546:	7c 93       	st	X, r23
    1548:	f9 83       	std	Y+1, r31	; 0x01
    154a:	e8 83       	st	Y, r30
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	08 95       	ret

0000155a <osEE_counter_insert_rel_trigger>:
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	dc 01       	movw	r26, r24
    1560:	12 96       	adiw	r26, 0x02	; 2
    1562:	ed 91       	ld	r30, X+
    1564:	fc 91       	ld	r31, X
    1566:	13 97       	sbiw	r26, 0x03	; 3
    1568:	0d 90       	ld	r0, X+
    156a:	bc 91       	ld	r27, X
    156c:	a0 2d       	mov	r26, r0
    156e:	12 96       	adiw	r26, 0x02	; 2
    1570:	2d 91       	ld	r18, X+
    1572:	3c 91       	ld	r19, X
    1574:	df 01       	movw	r26, r30
    1576:	a4 1b       	sub	r26, r20
    1578:	b5 0b       	sbc	r27, r21
    157a:	a2 17       	cp	r26, r18
    157c:	b3 07       	cpc	r27, r19
    157e:	30 f0       	brcs	.+12     	; 0x158c <osEE_counter_insert_rel_trigger+0x32>
    1580:	42 0f       	add	r20, r18
    1582:	53 1f       	adc	r21, r19
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <osEE_counter_insert_abs_trigger>
    158c:	41 50       	subi	r20, 0x01	; 1
    158e:	51 09       	sbc	r21, r1
    1590:	42 0f       	add	r20, r18
    1592:	53 1f       	adc	r21, r19
    1594:	4e 1b       	sub	r20, r30
    1596:	5f 0b       	sbc	r21, r31
    1598:	f5 cf       	rjmp	.-22     	; 0x1584 <osEE_counter_insert_rel_trigger+0x2a>

0000159a <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
    15ae:	dc 01       	movw	r26, r24
    15b0:	0d 91       	ld	r16, X+
    15b2:	1c 91       	ld	r17, X
    15b4:	11 97       	sbiw	r26, 0x01	; 1
       This because is more efficient to read SFR than mamory. */
    CONST(CoreIdType, AUTOMATIC) counter_core_id = osEE_get_curr_core_id();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
    15b6:	f8 01       	movw	r30, r16
    15b8:	22 81       	ldd	r18, Z+2	; 0x02
    15ba:	33 81       	ldd	r19, Z+3	; 0x03
    15bc:	12 96       	adiw	r26, 0x02	; 2
    15be:	4d 91       	ld	r20, X+
    15c0:	5c 91       	ld	r21, X
    15c2:	24 17       	cp	r18, r20
    15c4:	35 07       	cpc	r19, r21
    15c6:	08 f4       	brcc	.+2      	; 0x15ca <osEE_counter_increment+0x30>
    15c8:	5f c0       	rjmp	.+190    	; 0x1688 <osEE_counter_increment+0xee>
      counter_value = (p_counter_cb->value = 0U);
    15ca:	13 82       	std	Z+3, r1	; 0x03
    15cc:	12 82       	std	Z+2, r1	; 0x02
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	20 e0       	ldi	r18, 0x00	; 0
            the counters, whenever the locks are not limited resources for the
            HW and falling back to use core locks only for those architectures
            where this is not true. TBD. */
    osEE_lock_core_id(counter_core_id);

    p_triggered_db = p_counter_cb->trigger_queue;
    15d2:	f8 01       	movw	r30, r16
    15d4:	c0 81       	ld	r28, Z
    15d6:	d1 81       	ldd	r29, Z+1	; 0x01

    if (p_triggered_db != NULL) {
    15d8:	20 97       	sbiw	r28, 0x00	; 0
    15da:	09 f4       	brne	.+2      	; 0x15de <osEE_counter_increment+0x44>
    15dc:	4a c0       	rjmp	.+148    	; 0x1672 <osEE_counter_increment+0xd8>
      P2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
    15de:	a8 81       	ld	r26, Y
    15e0:	b9 81       	ldd	r27, Y+1	; 0x01
    15e2:	12 96       	adiw	r26, 0x02	; 2
    15e4:	4d 91       	ld	r20, X+
    15e6:	5c 91       	ld	r21, X
    15e8:	42 17       	cp	r20, r18
    15ea:	53 07       	cpc	r21, r19
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <osEE_counter_increment+0x56>
    15ee:	41 c0       	rjmp	.+130    	; 0x1672 <osEE_counter_increment+0xd8>
    15f0:	de 01       	movw	r26, r28
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
    15f2:	2d 91       	ld	r18, X+
    15f4:	3c 91       	ld	r19, X
    15f6:	f9 01       	movw	r30, r18
    15f8:	a0 81       	ld	r26, Z
    15fa:	b1 81       	ldd	r27, Z+1	; 0x01
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
    15fc:	10 97       	sbiw	r26, 0x00	; 0
    15fe:	49 f0       	breq	.+18     	; 0x1612 <osEE_counter_increment+0x78>
    1600:	6d 91       	ld	r22, X+
    1602:	7c 91       	ld	r23, X
    1604:	11 97       	sbiw	r26, 0x01	; 1

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
        } while ((p_current != NULL) &&
    1606:	fb 01       	movw	r30, r22
    1608:	62 81       	ldd	r22, Z+2	; 0x02
    160a:	73 81       	ldd	r23, Z+3	; 0x03
    160c:	46 17       	cp	r20, r22
    160e:	57 07       	cpc	r21, r23
    1610:	81 f3       	breq	.-32     	; 0x15f2 <osEE_counter_increment+0x58>
    1612:	7c 01       	movw	r14, r24
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
    1614:	f9 01       	movw	r30, r18
    1616:	11 82       	std	Z+1, r1	; 0x01
    1618:	10 82       	st	Z, r1
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
    161a:	f8 01       	movw	r30, r16
    161c:	b1 83       	std	Z+1, r27	; 0x01
    161e:	a0 83       	st	Z, r26
            p_trigger_to_be_handled = p_triggered_db;

          /* Prepare next trigger to be handled here, before actually handle the
           * current one, otherwise cycling triggers will mess with the list of
           * triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
    1620:	08 81       	ld	r16, Y
    1622:	19 81       	ldd	r17, Y+1	; 0x01
    1624:	d8 01       	movw	r26, r16
    1626:	ac 90       	ld	r10, X
    1628:	11 96       	adiw	r26, 0x01	; 1
    162a:	bc 90       	ld	r11, X
    162c:	11 97       	sbiw	r26, 0x01	; 1
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
  CONST(TickType, AUTOMATIC)
    cycle = p_trigger_cb->cycle;
    162e:	16 96       	adiw	r26, 0x06	; 6
    1630:	cd 90       	ld	r12, X+
    1632:	dc 90       	ld	r13, X
(
  P2CONST(OsEE_action, AUTOMATIC, OS_APPL_DATA) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev;
  switch (p_action->type) {
    1634:	2a 85       	ldd	r18, Y+10	; 0x0a
    1636:	3b 85       	ldd	r19, Y+11	; 0x0b
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	51 f1       	breq	.+84     	; 0x1692 <osEE_counter_increment+0xf8>
    163e:	23 30       	cpi	r18, 0x03	; 3
    1640:	31 05       	cpc	r19, r1
    1642:	61 f1       	breq	.+88     	; 0x169c <osEE_counter_increment+0x102>
    1644:	23 2b       	or	r18, r19
    1646:	51 f4       	brne	.+20     	; 0x165c <osEE_counter_increment+0xc2>
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;

      ev = osEE_scheduler_task_activated(
    1648:	4e 81       	ldd	r20, Y+6	; 0x06
    164a:	5f 81       	ldd	r21, Y+7	; 0x07
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	63 e6       	ldi	r22, 0x63	; 99
    1652:	71 e0       	ldi	r23, 0x01	; 1
    1654:	81 e5       	ldi	r24, 0x51	; 81
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	0e 94 90 08 	call	0x1120	; 0x1120 <osEE_scheduler_task_activated>
    cycle = p_trigger_cb->cycle;

  ev = osEE_handle_action(&p_alarm_db->action);

  /* TODO: Add active check to let call CancelAlarm from callback... */
  if (cycle > 0U) {
    165c:	c1 14       	cp	r12, r1
    165e:	d1 04       	cpc	r13, r1
    1660:	09 f1       	breq	.+66     	; 0x16a4 <osEE_counter_increment+0x10a>
    osEE_counter_insert_rel_trigger(
    1662:	a6 01       	movw	r20, r12
    1664:	be 01       	movw	r22, r28
    1666:	c7 01       	movw	r24, r14
    1668:	0e 94 ad 0a 	call	0x155a	; 0x155a <osEE_counter_insert_rel_trigger>
    166c:	e5 01       	movw	r28, r10
            osEE_end_primitive(flags);
          }
#else
          (void)ev; /* TODO: Handle ErrorHook */
#endif /* OSEE_HAS_ERRORHOOK */
        } while (p_triggered_db != NULL);
    166e:	20 97       	sbiw	r28, 0x00	; 0
    1670:	b9 f6       	brne	.-82     	; 0x1620 <osEE_counter_increment+0x86>
    }
    /* XXX: Unlock the core only at the End of The Service, to not incur in
            races when handling cycling triggers. */
    osEE_unlock_core_id(counter_core_id);
  }
}
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	bf 90       	pop	r11
    1684:	af 90       	pop	r10
    1686:	08 95       	ret
    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value = (p_counter_cb->value = 0U);
    } else {
      counter_value = ++p_counter_cb->value;
    1688:	2f 5f       	subi	r18, 0xFF	; 255
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	33 83       	std	Z+3, r19	; 0x03
    168e:	22 83       	std	Z+2, r18	; 0x02
    1690:	a0 cf       	rjmp	.-192    	; 0x15d2 <osEE_counter_increment+0x38>
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
      osEE_counter_increment(p_action->param.p_counter_db);
    1692:	88 85       	ldd	r24, Y+8	; 0x08
    1694:	99 85       	ldd	r25, Y+9	; 0x09
    1696:	0e 94 cd 0a 	call	0x159a	; 0x159a <osEE_counter_increment>
    169a:	e0 cf       	rjmp	.-64     	; 0x165c <osEE_counter_increment+0xc2>
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
    169c:	ec 81       	ldd	r30, Y+4	; 0x04
    169e:	fd 81       	ldd	r31, Y+5	; 0x05
    16a0:	09 95       	icall
    16a2:	dc cf       	rjmp	.-72     	; 0x165c <osEE_counter_increment+0xc2>
  if (cycle > 0U) {
    osEE_counter_insert_rel_trigger(
      p_counter_db, p_trigger_db, cycle
    );
  } else {
    p_trigger_cb->active = OSEE_FALSE;
    16a4:	f8 01       	movw	r30, r16
    16a6:	15 82       	std	Z+5, r1	; 0x05
    16a8:	14 82       	std	Z+4, r1	; 0x04
    16aa:	e0 cf       	rjmp	.-64     	; 0x166c <osEE_counter_increment+0xd2>

000016ac <OsEE_atmega_startTimer1>:
 * - x < TIMER_1_PRESCALER_1024_MAX_TICKS = 4194304:	64     us
 */
void OsEE_atmega_startTimer1(uint32_t microsecondsInterval) {
  uint8_t	timer1Prescaler;
  uint16_t	timer1CompareValue;
  TCCR1B = 0;	/* Pause Timer. */
    16ac:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  TCCR1A = 0;
    16b0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  TCCR1C = 0;
    16b4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
  TCNT1  = 0;
    16b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
   * 0 1 1 clkIO/64 (From prescaler)
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    16c0:	61 15       	cp	r22, r1
    16c2:	20 e1       	ldi	r18, 0x10	; 16
    16c4:	72 07       	cpc	r23, r18
    16c6:	81 05       	cpc	r24, r1
    16c8:	91 05       	cpc	r25, r1
    16ca:	a0 f4       	brcc	.+40     	; 0x16f4 <OsEE_atmega_startTimer1+0x48>
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
    16cc:	e4 e0       	ldi	r30, 0x04	; 4
    16ce:	66 0f       	add	r22, r22
    16d0:	77 1f       	adc	r23, r23
    16d2:	ea 95       	dec	r30
    16d4:	e1 f7       	brne	.-8      	; 0x16ce <OsEE_atmega_startTimer1+0x22>
    16d6:	61 50       	subi	r22, 0x01	; 1
    16d8:	71 09       	sbc	r23, r1
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    16da:	81 e0       	ldi	r24, 0x01	; 1
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
  }
#else
  #error("Unsupported CPU frequency")
#endif
  TIFR1  = (1 << OCIE1A);	/* Clear Output Compare A Match Flag. */
    16dc:	92 e0       	ldi	r25, 0x02	; 2
    16de:	96 bb       	out	0x16, r25	; 22
  TIMSK1 = (1 << OCIE1A);	/* Output Compare A Match Interrupt Enable */
    16e0:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  OCR1A  = timer1CompareValue;	/* Set Compare A Match Value */
    16e4:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    16e8:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  TCCR1B = (1 << WGM12) | timer1Prescaler;	/* Set CTC Mode and Prescaler. */
    16ec:	88 60       	ori	r24, 0x08	; 8
    16ee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
}	/* startTimer1() */
    16f2:	08 95       	ret
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    16f4:	61 15       	cp	r22, r1
    16f6:	20 e8       	ldi	r18, 0x80	; 128
    16f8:	72 07       	cpc	r23, r18
    16fa:	81 05       	cpc	r24, r1
    16fc:	91 05       	cpc	r25, r1
    16fe:	30 f4       	brcc	.+12     	; 0x170c <OsEE_atmega_startTimer1+0x60>
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
    1700:	66 0f       	add	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	61 50       	subi	r22, 0x01	; 1
    1706:	71 09       	sbc	r23, r1
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	e8 cf       	rjmp	.-48     	; 0x16dc <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    170c:	6c 3f       	cpi	r22, 0xFC	; 252
    170e:	2f ef       	ldi	r18, 0xFF	; 255
    1710:	72 07       	cpc	r23, r18
    1712:	23 e0       	ldi	r18, 0x03	; 3
    1714:	82 07       	cpc	r24, r18
    1716:	91 05       	cpc	r25, r1
    1718:	58 f4       	brcc	.+22     	; 0x1730 <OsEE_atmega_startTimer1+0x84>
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
    171a:	42 e0       	ldi	r20, 0x02	; 2
    171c:	96 95       	lsr	r25
    171e:	87 95       	ror	r24
    1720:	77 95       	ror	r23
    1722:	67 95       	ror	r22
    1724:	4a 95       	dec	r20
    1726:	d1 f7       	brne	.-12     	; 0x171c <OsEE_atmega_startTimer1+0x70>
    1728:	61 50       	subi	r22, 0x01	; 1
    172a:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    172c:	83 e0       	ldi	r24, 0x03	; 3
    172e:	d6 cf       	rjmp	.-84     	; 0x16dc <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    1730:	61 15       	cp	r22, r1
    1732:	71 05       	cpc	r23, r1
    1734:	20 e1       	ldi	r18, 0x10	; 16
    1736:	82 07       	cpc	r24, r18
    1738:	91 05       	cpc	r25, r1
    173a:	58 f4       	brcc	.+22     	; 0x1752 <OsEE_atmega_startTimer1+0xa6>
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
    173c:	34 e0       	ldi	r19, 0x04	; 4
    173e:	96 95       	lsr	r25
    1740:	87 95       	ror	r24
    1742:	77 95       	ror	r23
    1744:	67 95       	ror	r22
    1746:	3a 95       	dec	r19
    1748:	d1 f7       	brne	.-12     	; 0x173e <OsEE_atmega_startTimer1+0x92>
    174a:	61 50       	subi	r22, 0x01	; 1
    174c:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    174e:	84 e0       	ldi	r24, 0x04	; 4
    1750:	c5 cf       	rjmp	.-118    	; 0x16dc <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
    1752:	26 e0       	ldi	r18, 0x06	; 6
    1754:	96 95       	lsr	r25
    1756:	87 95       	ror	r24
    1758:	77 95       	ror	r23
    175a:	67 95       	ror	r22
    175c:	2a 95       	dec	r18
    175e:	d1 f7       	brne	.-12     	; 0x1754 <OsEE_atmega_startTimer1+0xa8>
    1760:	61 50       	subi	r22, 0x01	; 1
    1762:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    1764:	85 e0       	ldi	r24, 0x05	; 5
    1766:	ba cf       	rjmp	.-140    	; 0x16dc <OsEE_atmega_startTimer1+0x30>

00001768 <__udivmodsi4>:
    1768:	a1 e2       	ldi	r26, 0x21	; 33
    176a:	1a 2e       	mov	r1, r26
    176c:	aa 1b       	sub	r26, r26
    176e:	bb 1b       	sub	r27, r27
    1770:	fd 01       	movw	r30, r26
    1772:	0d c0       	rjmp	.+26     	; 0x178e <__udivmodsi4_ep>

00001774 <__udivmodsi4_loop>:
    1774:	aa 1f       	adc	r26, r26
    1776:	bb 1f       	adc	r27, r27
    1778:	ee 1f       	adc	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	a2 17       	cp	r26, r18
    177e:	b3 07       	cpc	r27, r19
    1780:	e4 07       	cpc	r30, r20
    1782:	f5 07       	cpc	r31, r21
    1784:	20 f0       	brcs	.+8      	; 0x178e <__udivmodsi4_ep>
    1786:	a2 1b       	sub	r26, r18
    1788:	b3 0b       	sbc	r27, r19
    178a:	e4 0b       	sbc	r30, r20
    178c:	f5 0b       	sbc	r31, r21

0000178e <__udivmodsi4_ep>:
    178e:	66 1f       	adc	r22, r22
    1790:	77 1f       	adc	r23, r23
    1792:	88 1f       	adc	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	1a 94       	dec	r1
    1798:	69 f7       	brne	.-38     	; 0x1774 <__udivmodsi4_loop>
    179a:	60 95       	com	r22
    179c:	70 95       	com	r23
    179e:	80 95       	com	r24
    17a0:	90 95       	com	r25
    17a2:	9b 01       	movw	r18, r22
    17a4:	ac 01       	movw	r20, r24
    17a6:	bd 01       	movw	r22, r26
    17a8:	cf 01       	movw	r24, r30
    17aa:	08 95       	ret

000017ac <__tablejump2__>:
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	05 90       	lpm	r0, Z+
    17b2:	f4 91       	lpm	r31, Z
    17b4:	e0 2d       	mov	r30, r0
    17b6:	09 94       	ijmp

000017b8 <_exit>:
    17b8:	f8 94       	cli

000017ba <__stop_program>:
    17ba:	ff cf       	rjmp	.-2      	; 0x17ba <__stop_program>
